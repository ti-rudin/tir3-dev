.menu.svelte-1fao8wd{display:flex;flex-direction:column;justify-content:space-between;height:100vh;border-right:1px solid #85898b}.menulast.svelte-1fao8wd{flex:none;text-align:center;margin-bottom:2rem}.chatpriglos.svelte-1fao8wd{display:inline-flex;flex-grow:2;text-align:center;border:1px solid #85898b;border-radius:5px;margin:1rem}.usermenu.svelte-1fao8wd{line-height:inherit}.rastyazhka.svelte-1fao8wd{display:inline-flex;flex-grow:2}.backknob.svelte-1fao8wd{margin-top:1rem;margin-right:1rem}.zagl.svelte-1fao8wd{width:16rem;height:100vh}.mainflex.svelte-1fao8wd{display:flex;margin-left:auto;margin-right:auto;margin-top:3.5rem;justify-content:center}.fill-current.svelte-1fao8wd:hover{fill:#f0b90b}.text-current.svelte-1fao8wd:hover{color:#f0b90b;background-color:#f0bb0b0c}
.headblock.svelte-15qh2zc{display:flex;max-width:400px;margin-left:auto;margin-right:auto;justify-content:flex-start;margin-bottom:7px}.itemgrow.svelte-15qh2zc{flex-grow:2}.mainflex.svelte-15qh2zc{display:flex}
ul.svelte-1hkq7r7{margin:0 0 1em 0;line-height:1.5}
.knob.svelte-155m2yj{width:auto;display:flex;justify-content:flex-end}.mtmt.svelte-155m2yj{margin-top:-1.1rem;margin-right:2rem}
.darkmodeknob.svelte-pknbhk{display:flex;justify-content:flex-end}
main.svelte-2uud3p{text-align:center;padding:0px}.foolrow.svelte-2uud3p{width:400px}.row.svelte-2uud3p{display:flex;max-width:400px;margin:auto;justify-content:space-between;margin-bottom:5px}.leftitem.svelte-2uud3p{border:0px solid;text-align:left}.headblock.svelte-2uud3p{display:flex;max-width:400px;margin:auto;justify-content:flex-start;margin-bottom:7px}
.divhr.svelte-upqpsm{display:flex;width:400px;height:10px;margin-left:auto;margin-right:auto}.balancehead.svelte-upqpsm{padding-top:28px}.rowbalanceitem.svelte-upqpsm{padding-left:10px;text-align:center;line-height:30px}.centereditem.svelte-upqpsm{text-align:center;min-width:23%;border:0px solid}.addknob.svelte-upqpsm{display:flex;justify-content:center;margin-right:10px;margin-left:10px;margin-top:10px}main.svelte-upqpsm{text-align:center}.botslist.svelte-upqpsm{width:100%;display:grid;grid-template-columns:repeat(1, 1fr);grid-gap:1px;grid-template-rows:auto 1fr;margin:0px;padding:0px}.botitem.svelte-upqpsm{display:flex;width:400px;margin-left:auto;margin-right:auto;justify-content:space-between}.textitem.svelte-upqpsm{display:flex;width:400px;margin-left:auto;margin-right:auto;justify-content:space-between}.leftitem.svelte-upqpsm{border:0px solid;text-align:left;max-width:30%}.rightitem.svelte-upqpsm{border:0px solid;text-align:right;width:40px;display:flex;flex-grow:1;align-items:center}.botitem.svelte-upqpsm:hover{background-color:rgba(255, 228, 196, 0.342)}@media(min-width: 640px){main.svelte-upqpsm{max-width:none}}
.padtop5.svelte-1b158ah{padding-top:14px}.foolrow.svelte-1b158ah{width:400px}.row.svelte-1b158ah{display:flex;max-width:400px;margin-left:auto;margin-right:auto;justify-content:space-between}.leftitem.svelte-1b158ah{border:0px solid;text-align:left}.rightitem.svelte-1b158ah{border:0px solid;text-align:right}.headblock.svelte-1b158ah{display:flex;max-width:400px;margin:auto;justify-content:space-around;margin-top:7px;color:rgb(36, 36, 36)}label.svelte-1b158ah{margin-bottom:7px;color:rgb(126, 126, 126)}main.svelte-1b158ah{text-align:center;padding:0px}
.foolrow.svelte-1atyj0m{width:400px}.padtop5.svelte-1atyj0m{padding-top:14px}.yelowkob.svelte-1atyj0m{border:1px solid rgba(233, 229, 132, 0.74);box-sizing:border-box;box-shadow:0px 3px 5px rgba(209, 192, 104, 0.06);border-radius:5px;margin-left:auto;margin-right:auto;max-width:430px;line-height:1.7em;margin-top:14px;padding-top:5px;padding-left:7px;padding-right:7px}.yelowkob.svelte-1atyj0m:hover{cursor:pointer}table.svelte-1atyj0m{position:relative;width:400px;border-collapse:collapse;border:0px solid;margin-top:14px}td.svelte-1atyj0m{padding:7px 7px 7px 0px}td.svelte-1atyj0m:first-child{border-right:0px solid}.cellleft.svelte-1atyj0m{text-align:left}.borderbootom.svelte-1atyj0m{border-bottom:1px solid}.borderleft.svelte-1atyj0m{border-left:1px solid}.bordernull.svelte-1atyj0m{border:0px solid}label.svelte-1atyj0m{margin-bottom:7px;color:rgb(126, 126, 126)}.foolrow.svelte-1atyj0m{width:400px}.row.svelte-1atyj0m{display:flex;max-width:400px;margin:auto;justify-content:space-between;margin-bottom:5px}.rowbalance.svelte-1atyj0m{display:flex;max-width:400px;margin-left:auto;justify-content:space-between;align-items:flex-end}.rowbalanceitem.svelte-1atyj0m{padding-left:10px;text-align:center}.leftitem.svelte-1atyj0m{border:0px solid;text-align:left}.rightitem.svelte-1atyj0m{border:0px solid;text-align:right}.centereditem.svelte-1atyj0m{border:0px solid;text-align:center}main.svelte-1atyj0m{text-align:center;padding:0px}
@import "tailwindcss/base";
@import "tailwindcss/components";
@import "tailwindcss/utilities";

h1,
.h1 {
  @apply text-5xl font-light;
  letter-spacing: -1.5px;
}

h2,
.h2 {
  @apply text-4xl font-light;
  letter-spacing: -0.5px;
}

h3,
.h3 {
  @apply text-3xl font-normal;
  letter-spacing: 0px;
}

h4,
.h4 {
  @apply text-2xl font-normal;
  letter-spacing: 0.25px;
}

h5,
.h5 {
  @apply text-xl font-normal;
  letter-spacing: 0px;
}

h6,
.h6 {
  @apply text-base font-medium;
  letter-spacing: 0.15px;
}

hr {
  @apply border-t border-gray-400 border-solid;
}

.subtitle-1 {
  @apply text-base;
  letter-spacing: 0.15px;
}

.subtitle-2 {
  @apply text-base text-sm font-medium;
  letter-spacing: 0.15px;
}

.body-1 {
  @apply text-base;
  letter-spacing: 0.5px;
}

.body-2 {
  @apply text-sm;
  letter-spacing: 0.25px;
}

.button {
  letter-spacing: 0.0892857143em;
}

caption,
.caption {
  font-size: 0.625rem;
  letter-spacing: 0.4px;
  display: inline-block;
}

button:focus, input:focus, li:focus, div:focus, textarea:focus {
  @apply outline-none;
}

.list {
  margin-top: 2px;
}

.a {
  @apply underline text-blue-600;
}

html {
  font-family: "Roboto", sans-serif;
}


input[type='number'] {
    -moz-appearance:textfield;
}

input::-webkit-outer-spin-button,
input::-webkit-inner-spin-button {
    -webkit-appearance: none;
}

.ripple {
	border-radius: 50%;
	position: absolute;
	transform: scale(0);
}

.ripple-normal {
	animation: ripple-normal 0.6s;
}

.ripple-centered {
  animation: ripple-centered 0.4s;
}

@keyframes ripple-normal {
	to {
		transform: scale(2.5);
		opacity: 0;
	}
}

@keyframes ripple-centered {
	to {
		transform: scale(1);
		opacity: 0;
	}
}

.mode-dark {
  @apply text-gray-100 bg-dark-500 duration-100 pointer-events-auto;
}


input[type="range"] {
  --bg: var(--color-gray-200);
  --bg-focus: var(--color-gray-200);
}

input[type="range"] {
  -webkit-appearance: none;
  height: 4px;
}

input[type="range"]:disabled {
  @apply bg-gray-300;
}

input[type="range"]::range-thumb {
  -webkit-appearance: none;
  @apply rounded-full p-1 w-5 h-5 elevation-3;
  background-color: var(--bg);
}

input[type="range"]:disabled::range-thumb {
  @apply bg-gray-400;
}

input[type="range"]::-ms-thumb {
  margin: 0;
}
input[type="range"]:focus {
  outline: none;
}

input[type="range"]:focus::range-thumb {
  -webkit-appearance: none;
  @apply rounded-full p-1 w-5 h-5 elevation-3;
  margin-top: -0.5rem;
  background-color: var(--bg-focus);
}

input[type="range"]:focus::range-track {
  @apply rounded;
  height: 4px;
}

th:first-child, td:first-child {
  @apply text-left border-r border-gray-200;
}

th:first-child .sort-wrapper {
  @apply justify-start;
}

th .sort {
  @apply w-4 h-4 opacity-0;
}

th:hover .sort {
  @apply opacity-100;
}

tr.selected {
  @apply bg-primary-50;
}

.select {
  @apply pb-0 mb-0 cursor-pointer;
  height: 3.5rem;
}
.select.dense {
  height: 2.7rem;
}

.code-inline {
  @apply text-sm bg-secondary-50 text-secondary-900 rounded-sm p-1;
  letter-spacing: 0.25px;
}
button.svelte-1djjzqq:active,button.svelte-1djjzqq:focus{outline:none}button.svelte-1djjzqq::-moz-focus-inner{border:0}.menu.svelte-1djjzqq{width:auto;min-width:auto;max-width:14rem;margin-left:-12rem;z-index:1000;padding:0.5rem;border:1px solid #85898b;box-shadow:0 2px 8px 0 rgba(0, 0, 0, 0.15);-moz-box-shadow:0 2px 8px 0 rgba(0, 0, 0, 0.15);-webkit-box-shadow:0 2px 8px 0 rgba(0, 0, 0, 0.15);border-radius:5px;color:#ebebeb}.my-1.svelte-1djjzqq{display:flex;justify-content:flex-end}.fill-current.svelte-1djjzqq:hover{fill:#f0b90b}
main.svelte-m6qgj6{width:auto}
.absmenu.svelte-15jeqdb{position:absolute}
.drawer.svelte-6qcjcu{min-width:250px}aside.svelte-6qcjcu{height:100vh}
.label-top.svelte-r33x2y{line-height:0.05}.label-transition.svelte-r33x2y{transition:font-size 0.05s, line-height 0.1s}label.text-xs{font-size:0.7rem}
.line.svelte-xd9zs6{height:1px}
.inc.svelte-mguqwa{animation:svelte-mguqwa-increase 2s ease-in-out infinite}.dec.svelte-mguqwa{animation:svelte-mguqwa-decrease 2s 0.9s ease-in-out infinite}@keyframes svelte-mguqwa-increase{from{left:-5%;width:5%}to{left:130%;width:150%}}@keyframes svelte-mguqwa-decrease{from{left:-90%;width:90%}to{left:110%;width:10%}}
.reverse.svelte-zzky5a{transform:rotate(180deg)}.tip.svelte-zzky5a{transform:rotate(90deg)}
.ripple.svelte-1o8z87d{position:absolute !important}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi4xOTYzNzUwNTEyLmNzcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vX2xheW91dC5zdmVsdGUiLCIuLi8uLi8uLi9ib3RzdGF0dXNwYWdlLnN2ZWx0ZSIsIi4uLy4uLy4uL2luZGV4LnN2ZWx0ZSIsIi4uLy4uLy4uL0xvZ2luLnN2ZWx0ZSIsIi4uLy4uLy4uL05hdi5zdmVsdGUiLCIuLi8uLi8uLi9TZXR0LnN2ZWx0ZSIsIi4uLy4uLy4uL0JvdHNMaXN0LnN2ZWx0ZSIsIi4uLy4uLy4uL05ld0JvdC5zdmVsdGUiLCIuLi8uLi8uLi9Cb3RTdGF0dXMuc3ZlbHRlIiwiLi4vLi4vLi4vUHJvZmlsZS5zdmVsdGUiLCIuLi8uLi8uLi9JbmRMb2FkLnN2ZWx0ZSIsIi4uLy4uLy4uL01lbnVVc2VyLnN2ZWx0ZSIsIi4uLy4uLy4uL05hdmlnYXRpb25EcmF3ZXIuc3ZlbHRlIiwiLi4vLi4vLi4vTGFiZWwuc3ZlbHRlIiwiLi4vLi4vLi4vVW5kZXJsaW5lLnN2ZWx0ZSIsIi4uLy4uLy4uL1Byb2dyZXNzTGluZWFyLnN2ZWx0ZSIsIi4uLy4uLy4uL0ljb24uc3ZlbHRlIiwiLi4vLi4vLi4vUmlwcGxlLnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcbjxzY3JpcHQ+XG5cbi8vY29uc29sZS5sb2cocHJvY2Vzcy5lbnYuU0FQUEVSX0FQUF9IT1NUSVApO1xuXG4gICAgaW1wb3J0IHsgc3RhdGVTdG9yZSB9IGZyb20gJy4uL3N0b3Jlcy9zdGF0ZWJvdC5qcyc7XG4gICAgaW1wb3J0IHsgYXV0aFN0b3JlIH0gZnJvbSAnLi4vc3RvcmVzL2F1dGgnO1xuICAgIGltcG9ydCBOYXYgZnJvbSAnLi4vY29tcG9uZW50cy9OYXYuc3ZlbHRlJztcbiAgICBpbXBvcnQgTG9naW4gZnJvbSAnLi4vY29tcG9uZW50cy9Mb2dpbi5zdmVsdGUnO1xuICAgIGltcG9ydCBOYXZpZ2F0aW9uRHJhd2VyIGZyb20gJ3NtZWx0ZS9zcmMvY29tcG9uZW50cy9OYXZpZ2F0aW9uRHJhd2VyJztcbiAgICBpbXBvcnQgQXBwQmFyIGZyb20gJ3NtZWx0ZS9zcmMvY29tcG9uZW50cy9BcHBCYXInO1xuICAgIGltcG9ydCBicmVha3BvaW50cyBmcm9tICdzbWVsdGUvc3JjL2JyZWFrcG9pbnRzJztcbiAgICBleHBvcnQgbGV0IHNlZ21lbnQ7XG4gICAgY29uc3QgYnAgPSBicmVha3BvaW50cygpO1xuICAgIGltcG9ydCAnc21lbHRlL3NyYy90YWlsd2luZC5jc3MnO1xuXG4gICAgaW1wb3J0IGRhcmsgZnJvbSAnc21lbHRlL3NyYy9kYXJrJztcblxuICAgIGxldCBkYXJrTW9kZSA9IGRhcmsoKTtcbiAgICBsZXQgc2hvd3phZ2w7XG4gICAgXG4gICAgaW1wb3J0IEJ1dHRvbiBmcm9tICdzbWVsdGUvc3JjL2NvbXBvbmVudHMvQnV0dG9uJztcbiAgICAvLyBleHBvcnQgbGV0IHNlZ21lbnQ7XG5cbiAgICBmdW5jdGlvbiBzaG93dG9nbGUoKSB7XG4gICAgICAgICRzdGF0ZVN0b3JlLnNob3dtZW51ID0gISRzdGF0ZVN0b3JlLnNob3dtZW51O1xuICAgICAgICAvL2NvbnNvbGUubG9nICgkc3RhdGVTdG9yZS5zaG93KTtcbiAgICAgICAgcmV0dXJuICRzdGF0ZVN0b3JlLnNob3dtZW51O1xuICAgIH1cbiAgICBsZXQgdXJsaG9zdCA9ICdodHRwOi8vMTUyLjcwLjE2MC4xODM6MTg4MC8nO1xuICAgICRzdGF0ZVN0b3JlLnVybGhvc3QgPSB1cmxob3N0O1xuICAgIC8vbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2Rhcmttb2RlJywgJ29uJyk7XG4gICAgaWYgKCRicCA9PT0gJ3NtJykgc2hvd3phZ2wgPSBmYWxzZTtcblxuICAgIGZ1bmN0aW9uIG1lbnVjbG9zZWlmbm90c20oKSB7XG4gICAgICAgIGlmICgkc3RhdGVTdG9yZS5zaG93bWVudSAmJiAkYnAgPT09ICdzbScpIHtcbiAgICAgICAgICAgICRzdGF0ZVN0b3JlLnNob3dtZW51ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAgZnVuY3Rpb24gZ29ob21lKCkge1xuICAgICAgICAgICAgJHN0YXRlU3RvcmUucm91dCA9ICdib3RsaXN0JztcbiAgICAgICAgfVxuPC9zY3JpcHQ+XG5cbjxzdHlsZT5cbiAgICAubWVudSB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICAgICAgaGVpZ2h0OiAxMDB2aDtcbiAgICAgICAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgIzg1ODk4YjtcbiAgICB9XG4gICAgLm1lbnVsYXN0IHtcbiAgICAgICAgZmxleDogbm9uZTtcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICBtYXJnaW4tYm90dG9tOiAycmVtO1xuICAgIH1cbiAgICAuY2hhdHByaWdsb3Mge1xuICAgICAgIGRpc3BsYXk6IGlubGluZS1mbGV4O1xuICAgICAgICBmbGV4LWdyb3c6IDI7XG4gICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgIzg1ODk4YjtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogNXB4O1xuICAgICAgICBtYXJnaW4gOiAxcmVtO1xuICAgIH1cbiAgICAudXNlcm1lbnUge1xuICAgICAgICBsaW5lLWhlaWdodDogaW5oZXJpdDtcbiAgICB9XG4gICAgLnJhc3R5YXpoa2Ege1xuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcbiAgICAgICAgZmxleC1ncm93OiAyO1xuICAgIH1cbiAgICAuYmFja2tub2Ige1xuICAgICAgICBtYXJnaW4tdG9wOiAxcmVtO1xuICAgICAgICBtYXJnaW4tcmlnaHQ6IDFyZW07XG4gICAgfVxuXG4gICAgLnphZ2wge1xuICAgICAgICB3aWR0aDogMTZyZW07XG4gICAgICAgIGhlaWdodDogMTAwdmg7XG4gICAgfVxuICAgIC5tYWluZmxleCB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xuICAgICAgICBtYXJnaW4tcmlnaHQ6IGF1dG87XG4gICAgICAgIG1hcmdpbi10b3A6IDMuNXJlbTtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgfVxuICAgIC5maWxsLWN1cnJlbnQ6aG92ZXIge1xuICAgICAgICBmaWxsOiAjZjBiOTBiO1xuICAgIH1cbiAgICAudGV4dC1jdXJyZW50OmhvdmVyIHtcbiAgICAgICAgY29sb3I6ICNmMGI5MGI7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmMGJiMGIwYztcbiAgICB9XG48L3N0eWxlPlxuXG48QXBwQmFyIGNsYXNzPVwiYmctZ3JheS0yMDAgZGFyazpiZy1kYXJrLTUwMCBmbGV4IHAtMCBmaXhlZCB3LWZ1bGwgei0xMCB0b3AtMFwiPlxuICAgIDxkaXYgY2xhc3M9XCJ0ZXh0LXdoaXRlIGZsZXgtbm9uZVwiPlxuICAgICAgICA8YVxuICAgICAgICAgICAgY2xhc3M9XCJ0ZXh0LXdoaXRlIG5vLXVuZGVybGluZSBob3Zlcjp0ZXh0LXdoaXRlIGhvdmVyOm5vLXVuZGVybGluZVwiXG4gICAgICAgICAgICBhcmlhLWN1cnJlbnQ9e3NlZ21lbnQgPT09IHVuZGVmaW5lZCA/ICdwYWdlJyA6IHVuZGVmaW5lZH1cbiAgICAgICAgICAgIGhyZWY9XCIuXCJcbiAgICAgICAgICAgIG9uOmNsaWNrPXtnb2hvbWV9PlxuICAgICAgICAgICAgPHN2Z1xuICAgICAgICAgICAgICAgIHdpZHRoPVwiNDVcIlxuICAgICAgICAgICAgICAgIGhlaWdodD1cIjQ1XCJcbiAgICAgICAgICAgICAgICB2aWV3Qm94PVwiMCAwIDQ1IDQ1XCJcbiAgICAgICAgICAgICAgICBmaWxsPVwibm9uZVwiXG4gICAgICAgICAgICAgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPlxuICAgICAgICAgICAgICAgIDxnIGNsaXAtcGF0aD1cInVybCgjY2xpcDApXCI+XG4gICAgICAgICAgICAgICAgICAgIDxwYXRoXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxsLXJ1bGU9XCJldmVub2RkXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsaXAtcnVsZT1cImV2ZW5vZGRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgZD1cIk04Ljk2NjMxIDguNjU1NTJMMzYuNjU1MyA4LjY1NTUxTDM2LjY1NTMgMzYuMzQ0NUw4Ljk2NjMxIDM2LjM0NDVMOC45NjYzMVxuICAgICAgICAgICAgICAgICAgICAgICAgOC42NTU1MlpNMzUuMjY2MyAxOC4zNjE4TDM1LjI2NjMgMjEuNjkxMkgzMC45NTUyTDMwLjk1NTIgMTguMzYxOEwzNS4yNjYzXG4gICAgICAgICAgICAgICAgICAgICAgICAxOC4zNjE4Wk0zNS4yNjYzIDM0Ljk5MzdMMzUuMjY2MyAyMi41NzFMMzAuOTU1MiAyMi41NzFMMzAuOTU1MlxuICAgICAgICAgICAgICAgICAgICAgICAgMjkuNzE3M0MzMC43MzA1IDMyLjY3NDQgMzIuNjMxNiAzNC44MzkzIDM1LjI2NjMgMzQuOTkzN1pNMjkuOTU5MVxuICAgICAgICAgICAgICAgICAgICAgICAgMjEuNzI5M1YxOC40MTE5TDE3LjE1NjQgMTguNDExOUwxNy4xNTY0IDIxLjcyOUwyMS41MTk0IDIxLjcyOUwyMS41MTk0XG4gICAgICAgICAgICAgICAgICAgICAgICAzNC45OTM3SDI1LjgyOTNMMjUuODI5MyAyMS43MjkzTDI5Ljk1OTEgMjEuNzI5M1pcIlxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsbD1cIiNGMEI5MEJcIiAvPlxuICAgICAgICAgICAgICAgIDwvZz5cbiAgICAgICAgICAgICAgICA8ZGVmcz5cbiAgICAgICAgICAgICAgICAgICAgPGNsaXBQYXRoIGlkPVwiY2xpcDBcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxyZWN0IHdpZHRoPVwiNDVcIiBoZWlnaHQ9XCI0NVwiIGZpbGw9XCJ3aGl0ZVwiIC8+XG4gICAgICAgICAgICAgICAgICAgIDwvY2xpcFBhdGg+XG4gICAgICAgICAgICAgICAgPC9kZWZzPlxuICAgICAgICAgICAgPC9zdmc+XG5cbiAgICAgICAgPC9hPlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJwci0yIGZsZXgtbm9uZVwiPlxuICAgICAgICA8ZGl2IG9uOmNsaWNrPXtzaG93dG9nbGV9PlxuICAgICAgICAgICAgPHN2Z1xuICAgICAgICAgICAgICAgIGNsYXNzPVwiZmlsbC1jdXJyZW50IGgtNiB3LTZcIlxuICAgICAgICAgICAgICAgIHZpZXdCb3g9XCIwIDAgMjAgMjBcIlxuICAgICAgICAgICAgICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj5cbiAgICAgICAgICAgICAgICA8dGl0bGU+TWVudTwvdGl0bGU+XG4gICAgICAgICAgICAgICAgPHBhdGggZD1cIk0wIDNoMjB2MkgwVjN6bTAgNmgyMHYySDBWOXptMCA2aDIwdjJIMHYtMnpcIiAvPlxuICAgICAgICAgICAgPC9zdmc+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJmbGV4LWdyb3cgdGV4dC1jZW50ZXJcIj57JHN0YXRlU3RvcmUuc2VsZWN0Ym90bmFtZX0gPC9kaXY+XG5cbiAgICA8ZGl2IGNsYXNzPVwidXNlcm1lbnUgZmxleC1ub25lXCI+XG4gICAgICAgIDxMb2dpbiAvPlxuICAgIDwvZGl2PlxuXG4gICAgPGRpdiBjbGFzcz1cImZsZXgtbm9uZVwiPlxuICAgICAgICA8QnV0dG9uIGJpbmQ6dmFsdWU9eyRkYXJrTW9kZX0gY2xhc3M9XCJtci0yIG1sLTJcIj5cbiAgICAgICAgICAgIDxzdmdcbiAgICAgICAgICAgICAgICBjbGFzcz1cImZpbGwtY3VycmVudCB3LTYgaC02XCJcbiAgICAgICAgICAgICAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgICAgICAgICAgICAgICB2aWV3Qm94PVwiMCAwIDIwIDIwXCI+XG4gICAgICAgICAgICAgICAgPHBhdGhcbiAgICAgICAgICAgICAgICAgICAgZmlsbC1ydWxlPVwiZXZlbm9kZFwiXG4gICAgICAgICAgICAgICAgICAgIGQ9XCJNMTAgMmExIDEgMCAwMTEgMXYxYTEgMSAwIDExLTIgMFYzYTEgMSAwIDAxMS0xem00IDhhNCA0IDAgMTEtOCAwIDQgNCAwIDAxOFxuICAgICAgICAgICAgICAgICAgICAwem0tLjQ2NCA0Ljk1bC43MDcuNzA3YTEgMSAwIDAwMS40MTQtMS40MTRsLS43MDctLjcwN2ExIDEgMCAwMC0xLjQxNFxuICAgICAgICAgICAgICAgICAgICAxLjQxNHptMi4xMi0xMC42MDdhMSAxIDAgMDEwIDEuNDE0bC0uNzA2LjcwN2ExIDEgMCAxMS0xLjQxNC0xLjQxNGwuNzA3LS43MDdhMSAxXG4gICAgICAgICAgICAgICAgICAgIDAgMDExLjQxNCAwek0xNyAxMWExIDEgMCAxMDAtMmgtMWExIDEgMCAxMDAgMmgxem0tNyA0YTEgMSAwIDAxMSAxdjFhMSAxIDAgMTEtMlxuICAgICAgICAgICAgICAgICAgICAwdi0xYTEgMSAwIDAxMS0xek01LjA1IDYuNDY0QTEgMSAwIDEwNi40NjUgNS4wNWwtLjcwOC0uNzA3YTEgMSAwIDAwLTEuNDE0XG4gICAgICAgICAgICAgICAgICAgIDEuNDE0bC43MDcuNzA3em0xLjQxNCA4LjQ4NmwtLjcwNy43MDdhMSAxIDAgMDEtMS40MTQtMS40MTRsLjcwNy0uNzA3YTEgMSAwXG4gICAgICAgICAgICAgICAgICAgIDAxMS40MTQgMS40MTR6TTQgMTFhMSAxIDAgMTAwLTJIM2ExIDEgMCAwMDAgMmgxelwiXG4gICAgICAgICAgICAgICAgICAgIGNsaXAtcnVsZT1cImV2ZW5vZGRcIiAvPlxuICAgICAgICAgICAgPC9zdmc+XG4gICAgICAgIDwvQnV0dG9uPlxuICAgIDwvZGl2PlxuXG48L0FwcEJhcj5cbjxOYXZpZ2F0aW9uRHJhd2VyIGNsYXNzPVwiYmctZ3JheS0yMDAgZGFyazpiZy1ibGFja1wiIGJpbmQ6c2hvdz17JHN0YXRlU3RvcmUuc2hvd21lbnV9IHtzZWdtZW50fT5cbiAgICA8ZGl2IGNsYXNzPVwibWVudVwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiZmxleCBqdXN0aWZ5LWJldHdlZW5cIj5cbiAgICAgICAgICAgIDxhXG4gICAgICAgICAgICAgICAgY2xhc3M9XCJ0ZXh0LXdoaXRlIG5vLXVuZGVybGluZSBob3Zlcjp0ZXh0LXdoaXRlIGhvdmVyOm5vLXVuZGVybGluZVwiXG4gICAgICAgICAgICAgICAgYXJpYS1jdXJyZW50PXtzZWdtZW50ID09PSB1bmRlZmluZWQgPyAncGFnZScgOiB1bmRlZmluZWR9XG4gICAgICAgICAgICAgICAgaHJlZj1cIi5cIj5cbiAgICAgICAgICAgICAgICA8c3ZnXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoPVwiOTVcIlxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ9XCI5NVwiXG4gICAgICAgICAgICAgICAgICAgIHZpZXdCb3g9XCIwIDAgNDUgNDVcIlxuICAgICAgICAgICAgICAgICAgICBmaWxsPVwibm9uZVwiXG4gICAgICAgICAgICAgICAgICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj5cbiAgICAgICAgICAgICAgICAgICAgPGcgY2xpcC1wYXRoPVwidXJsKCNjbGlwMClcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbC1ydWxlPVwiZXZlbm9kZFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpcC1ydWxlPVwiZXZlbm9kZFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZD1cIk04Ljk2NjMxIDguNjU1NTJMMzYuNjU1MyA4LjY1NTUxTDM2LjY1NTMgMzYuMzQ0NUw4Ljk2NjMxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgMzYuMzQ0NUw4Ljk2NjMxIDguNjU1NTJaTTM1LjI2NjMgMTguMzYxOEwzNS4yNjYzIDIxLjY5MTJIMzAuOTU1MkwzMC45NTUyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgMTguMzYxOEwzNS4yNjYzIDE4LjM2MThaTTM1LjI2NjMgMzQuOTkzN0wzNS4yNjYzIDIyLjU3MUwzMC45NTUyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgMjIuNTcxTDMwLjk1NTIgMjkuNzE3M0MzMC43MzA1IDMyLjY3NDQgMzIuNjMxNiAzNC44MzkzIDM1LjI2NjNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAzNC45OTM3Wk0yOS45NTkxIDIxLjcyOTNWMTguNDExOUwxNy4xNTY0IDE4LjQxMTlMMTcuMTU2NCAyMS43MjlMMjEuNTE5NFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDIxLjcyOUwyMS41MTk0IDM0Ljk5MzdIMjUuODI5M0wyNS44MjkzIDIxLjcyOTNMMjkuOTU5MSAyMS43MjkzWlwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbD1cIiNGMEI5MEJcIiAvPlxuICAgICAgICAgICAgICAgICAgICA8L2c+XG4gICAgICAgICAgICAgICAgICAgIDxkZWZzPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGNsaXBQYXRoIGlkPVwiY2xpcDBcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cmVjdCB3aWR0aD1cIjQ1XCIgaGVpZ2h0PVwiNDVcIiBmaWxsPVwid2hpdGVcIiAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9jbGlwUGF0aD5cbiAgICAgICAgICAgICAgICAgICAgPC9kZWZzPlxuICAgICAgICAgICAgICAgIDwvc3ZnPlxuXG4gICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYmFja2tub2JcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IG9uOmNsaWNrPXtzaG93dG9nbGV9PlxuICAgICAgICAgICAgICAgICAgICA8c3ZnXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImZpbGwtY3VycmVudCBoLTYgdy02XCJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdCb3g9XCIwIDAgMjAgMjBcIlxuICAgICAgICAgICAgICAgICAgICAgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHBhdGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkPVwiTTkuNzA3IDE2LjcwN2ExIDEgMCAwMS0xLjQxNCAwbC02LTZhMSAxIDAgMDEwLTEuNDE0bDYtNmExIDEgMCAwMTEuNDE0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgMS40MTRMNS40MTQgOUgxN2ExIDEgMCAxMTAgMkg1LjQxNGw0LjI5MyA0LjI5M2ExIDEgMCAwMTAgMS40MTR6XCIgLz5cbiAgICAgICAgICAgICAgICAgICAgPC9zdmc+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPGFcbiAgICAgICAgICAgIGNsYXNzPVwidGV4dC1jdXJyZW50IHB5LTQgcHgtNCBmbGV4LW5vbmVcIlxuICAgICAgICAgICAgYXJpYS1jdXJyZW50PXtzZWdtZW50ID09PSAnYWJvdXQnID8gJ3BhZ2UnIDogdW5kZWZpbmVkfVxuICAgICAgICAgICAgaHJlZj1cIi9cIlxuICAgICAgICAgICAgb246Y2xpY2s9e21lbnVjbG9zZWlmbm90c219PlxuICAgICAgICAgICAg0JPQu9Cw0LLQvdCw0Y9cbiAgICAgICAgPC9hPlxuICAgICAgICA8YVxuICAgICAgICAgICAgY2xhc3M9XCJ0ZXh0LWN1cnJlbnQgcHktNCBweC00IGZsZXgtbm9uZVwiXG4gICAgICAgICAgICBhcmlhLWN1cnJlbnQ9e3NlZ21lbnQgPT09ICdhYm91dCcgPyAncGFnZScgOiB1bmRlZmluZWR9XG4gICAgICAgICAgICBocmVmPVwiYWJvdXRcIlxuICAgICAgICAgICAgb246Y2xpY2s9e21lbnVjbG9zZWlmbm90c219PlxuICAgICAgICAgICAg0J4g0L/RgNC+0LPRgNCw0LzQvNC1XG4gICAgICAgIDwvYT5cblxuICAgICAgICA8YVxuICAgICAgICAgICAgY2xhc3M9XCJweS00IHB4LTQgdGV4dC1jdXJyZW50IGZsZXgtbm9uZVwiXG4gICAgICAgICAgICByZWw9XCJwcmVmZXRjaFwiXG4gICAgICAgICAgICBhcmlhLWN1cnJlbnQ9e3NlZ21lbnQgPT09ICdibG9nJyA/ICdwYWdlJyA6IHVuZGVmaW5lZH1cbiAgICAgICAgICAgIGhyZWY9XCJibG9nXCJcbiAgICAgICAgICAgIG9uOmNsaWNrPXttZW51Y2xvc2VpZm5vdHNtfT5cbiAgICAgICAgICAgINCR0LvQvtCzXG4gICAgICAgIDwvYT5cblxuICAgICAgICB7I2lmICRhdXRoU3RvcmUuc3RhdHVzID09PSAnaW4nfVxuICAgICAgICAgICAgPGhyIC8+XG4gICAgICAgICAgICA8YVxuICAgICAgICAgICAgICAgIGNsYXNzPVwicHktNCBweC00IHRleHQtY3VycmVudCBmbGV4LW5vbmVcIlxuICAgICAgICAgICAgICAgIHJlbD1cInByZWZldGNoXCJcbiAgICAgICAgICAgICAgICBhcmlhLWN1cnJlbnQ9e3NlZ21lbnQgPT09ICdibG9nJyA/ICdwYWdlJyA6IHVuZGVmaW5lZH1cbiAgICAgICAgICAgICAgICBocmVmPVwiL1wiXG4gICAgICAgICAgICAgICAgb246Y2xpY2s9e21lbnVjbG9zZWlmbm90c219PlxuICAgICAgICAgICAgICAgIEdSSUQgTE9ORyDQkdC+0YJcbiAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgIDxhXG4gICAgICAgICAgICAgICAgY2xhc3M9XCJweS00IHB4LTQgdGV4dC1jdXJyZW50IGZsZXgtbm9uZVwiXG4gICAgICAgICAgICAgICAgcmVsPVwicHJlZmV0Y2hcIlxuICAgICAgICAgICAgICAgIGFyaWEtY3VycmVudD17c2VnbWVudCA9PT0gJ2Jsb2cnID8gJ3BhZ2UnIDogdW5kZWZpbmVkfVxuICAgICAgICAgICAgICAgIGhyZWY9XCJzZXR0aW5nc1wiXG4gICAgICAgICAgICAgICAgb246Y2xpY2s9e21lbnVjbG9zZWlmbm90c219PlxuICAgICAgICAgICAgICAgINCd0LDRgdGC0YDQvtC50LrQuFxuICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgPGhyIC8+XG4gICAgICAgIHsvaWZ9XG5cbiAgICAgICAgPGRpdiBjbGFzcz1cInJhc3R5YXpoa2FcIj4mbmJzcDs8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNoYXRwcmlnbG9zIHB5LTQgcHgtNCB0ZXh0LWN1cnJlbnQgZmxleC1ub25lXCI+0JLRgdGC0YPQv9Cw0Lkg0LIg0L3QsNGIINGH0LDRgiE8L2Rpdj5cbiAgICAgICAgPGFcbiAgICAgICAgICAgIGNsYXNzPVwibWVudWxhc3QgcHktNCBweC00IHRleHQtY3VycmVudCBmbGV4LW5vbmVcIlxuICAgICAgICAgICAgcmVsPVwicHJlZmV0Y2hcIlxuICAgICAgICAgICAgYXJpYS1jdXJyZW50PXtzZWdtZW50ID09PSAnYmxvZycgPyAncGFnZScgOiB1bmRlZmluZWR9XG4gICAgICAgICAgICBocmVmPVwiaW5zdHJ1Y3Rpb25cIlxuICAgICAgICAgICAgb246Y2xpY2s9e21lbnVjbG9zZWlmbm90c219PlxuICAgICAgICAgICAg0JjQvdGB0YLRgNGD0LrRhtC40Y9cbiAgICAgICAgPC9hPlxuXG4gICAgPC9kaXY+XG48L05hdmlnYXRpb25EcmF3ZXI+XG5cbjxkaXYgY2xhc3M9XCJtYWluZmxleFwiPlxuXG4gICAgeyNpZiAkc3RhdGVTdG9yZS5zaG93bWVudSAmJiAkYnAgIT0gJ3NtJ31cbiAgICAgICAgPGRpdiBjbGFzcz1cInphZ2xcIj4mbmJzcDs8L2Rpdj5cblxuICAgICAgICA8c2xvdCAvPlxuICAgIHs6ZWxzZX1cbiAgICAgICAgPHNsb3QgLz5cbiAgICB7L2lmfVxuPC9kaXY+XG4iLCI8c2NyaXB0IGNvbnRleHQ9XCJtb2R1bGVcIj5cblxuICAgIGltcG9ydCB7IHN0YXRlU3RvcmUgfSAgZnJvbSBcIi4uL3N0b3Jlcy9zdGF0ZWJvdC5qc1wiXG4gICAgaW1wb3J0IEJvdFN0YXR1cyBmcm9tICcuLi9jb21wb25lbnRzL0JvdFN0YXR1cy5zdmVsdGUnO1xuICAgIGltcG9ydCB7IGF1dGhTdG9yZSB9IGZyb20gJy4uL3N0b3Jlcy9hdXRoJztcblxuICAgIGltcG9ydCBTaWduSW5CdXR0b24gZnJvbSAnLi4vY29tcG9uZW50cy9TaWduSW5CdXR0b24uc3ZlbHRlJztcbjwvc2NyaXB0PlxuXG5cbjxzdHlsZT5cbiAgICAuaGVhZGJsb2NrIHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgbWF4LXdpZHRoOiA0MDBweDtcbiAgICAgICAgbWFyZ2luLWxlZnQ6IGF1dG87XG4gICAgICAgIG1hcmdpbi1yaWdodDogYXV0bztcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xuICAgICAgICBtYXJnaW4tYm90dG9tOiA3cHg7XG4gICAgICAgIFxuICAgIH1cbiAgICAuaXRlbWdyb3cge1xuICAgICAgICBmbGV4LWdyb3c6IDI7XG4gICAgfVxuXG4gICAgLm1haW5mbGV4IHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICB9XG48L3N0eWxlPlxuXG48c3ZlbHRlOmhlYWQ+XG4gICAgPHRpdGxlPlRpIFRyYWRpbmcgQm90PC90aXRsZT5cbjwvc3ZlbHRlOmhlYWQ+XG5cbjxkaXYgY2xhc3M9XCJtYWluZmxleFwiPlxuXG5cbiAgICA8IS0tIHsjaWYgJGF1dGhTdG9yZS5zdGF0dXMgPT09ICdpbid9IC0tPlxuICAgIHsjaWYgdHJ1ZX1cbiAgICAgICAgPGRpdiBjbGFzcz1cImhlYWRibG9ja1wiPlxuXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaXRlbWdyb3dcIj5cbiAgICAgICAgICAgICAgIDxCb3RTdGF0dXMvPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgIHs6ZWxzZX1cbiAgICAgICAgPGRpdiBjbGFzcz1cImhlYWRibG9ja1wiPlxuXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaXRlbWdyb3dcIj5cbiAgICAgICAgICAgICAgICDQodC60LDRh9Cw0LnRgtC1INCx0LXRgdC/0LvQsNGC0L3QviDQuNC70Lgg0LLQvtC50LTQuNGC0LUg0LIg0L7QsdC70LDQutC+XG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgPFNpZ25JbkJ1dHRvbiBwcm92aWRlcj17J2dvb2dsZSd9IC8+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgey9pZn1cbjwvZGl2PlxuIiwiPHNjcmlwdCBjb250ZXh0PVwibW9kdWxlXCI+XG4gICAgZXhwb3J0IGZ1bmN0aW9uIHByZWxvYWQoeyBwYXJhbXMsIHF1ZXJ5IH0pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmV0Y2goYGJsb2cuanNvbmApXG4gICAgICAgICAgICAudGhlbihyID0+IHIuanNvbigpKVxuICAgICAgICAgICAgLnRoZW4ocG9zdHMgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IHBvc3RzIH07XG4gICAgICAgICAgICB9KTtcbiAgICB9XG48L3NjcmlwdD5cblxuPHNjcmlwdD5cbiAgICBpbXBvcnQgeyBzdGF0ZVN0b3JlIH0gZnJvbSAnLi4vLi4vc3RvcmVzL3N0YXRlYm90LmpzJztcbiAgICBjbGVhckludGVydmFsKCRzdGF0ZVN0b3JlLnRpbWVySWQpO1xuICAgIGNsZWFySW50ZXJ2YWwoJHN0YXRlU3RvcmUudGltZXJJZGxpc3QpO1xuICAgIFxuICAgIGV4cG9ydCBsZXQgcG9zdHM7XG48L3NjcmlwdD5cblxuPHN0eWxlPlxuICAgIHVsIHtcbiAgICAgICAgbWFyZ2luOiAwIDAgMWVtIDA7XG4gICAgICAgIGxpbmUtaGVpZ2h0OiAxLjU7XG4gICAgfVxuPC9zdHlsZT5cblxuPHN2ZWx0ZTpoZWFkPlxuICAgIDx0aXRsZT5CbG9nPC90aXRsZT5cbjwvc3ZlbHRlOmhlYWQ+XG5cbjxkaXYgY2xhc3M9XCJjb250YWluZXIgbXgtYXV0b1wiPlxuICAgIDxoMSBjbGFzcz1cInRleHQtMnhsIHRleHQtY2VudGVyIG1iLTRcIj5SZWNlbnQgcG9zdHM8L2gxPlxuXG4gICAgPHVsIGNsYXNzPVwidGV4dC1jZW50ZXJcIj5cbiAgICAgICAgeyNlYWNoIHBvc3RzIGFzIHBvc3R9XG4gICAgICAgICAgICA8IS0tIHdlJ3JlIHVzaW5nIHRoZSBub24tc3RhbmRhcmQgYHJlbD1wcmVmZXRjaGAgYXR0cmlidXRlIHRvXG50ZWxsIFNhcHBlciB0byBsb2FkIHRoZSBkYXRhIGZvciB0aGUgcGFnZSBhcyBzb29uIGFzXG50aGUgdXNlciBob3ZlcnMgb3ZlciB0aGUgbGluayBvciB0YXBzIGl0LCBpbnN0ZWFkIG9mXG53YWl0aW5nIGZvciB0aGUgJ2NsaWNrJyBldmVudCAtLT5cbiAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgICA8YSByZWw9XCJwcmVmZXRjaFwiIGhyZWY9XCJibG9nL3twb3N0LnNsdWd9XCI+e3Bvc3QudGl0bGV9PC9hPlxuICAgICAgICAgICAgPC9saT5cbiAgICAgICAgey9lYWNofVxuICAgIDwvdWw+XG48L2Rpdj5cbiIsIjxzY3JpcHQ+XG4gICAgaW1wb3J0IHsgc2lnbk91dCB9IGZyb20gJy4uL2ZpcmViYXNlJztcbiAgICBpbXBvcnQgeyBhdXRoU3RvcmUgfSBmcm9tICcuLi9zdG9yZXMvYXV0aCc7XG4gICAgaW1wb3J0IFByb2ZpbGUgZnJvbSAnLi9Qcm9maWxlLnN2ZWx0ZSc7XG4gICAgaW1wb3J0IFNpZ25JbkJ1dHRvbiBmcm9tICcuL1NpZ25JbkJ1dHRvbi5zdmVsdGUnO1xuPC9zY3JpcHQ+XG5cbjxzdHlsZT5cbiAgICAua25vYiB7XG4gICAgICAgIHdpZHRoOiBhdXRvO1xuXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XG4gICAgfVxuICAgIC5tdG10IHtcbiAgICAgICAgbWFyZ2luLXRvcDogLTEuMXJlbTtcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAycmVtO1xuICAgIH1cbjwvc3R5bGU+XG5cbjxzZWN0aW9uIGNsYXNzPVwia25vYlwiPlxuICAgIHsjaWYgJGF1dGhTdG9yZS5zdGF0dXMgPT09ICdpbid9XG4gICAgICAgIDxkaXYgY2xhc3M9XCJtdG10XCI+XG4gICAgICAgICAgICA8UHJvZmlsZSB7Li4uJGF1dGhTdG9yZS51c2VyfSAvPlxuICAgICAgICA8L2Rpdj5cbiAgICB7OmVsc2V9XG4gICAgICAgIDxTaWduSW5CdXR0b24gcHJvdmlkZXI9eydnb29nbGUnfSAvPlxuICAgIHsvaWZ9XG48L3NlY3Rpb24+XG4iLCI8c2NyaXB0PlxuICAgIGV4cG9ydCBsZXQgc2VnbWVudDtcbiAgICBpbXBvcnQgTG9naW4gZnJvbSAnLi4vY29tcG9uZW50cy9Mb2dpbi5zdmVsdGUnO1xuICAgIGltcG9ydCBkYXJrIGZyb20gJ3NtZWx0ZS9zcmMvZGFyayc7XG5cbiAgICBsZXQgZGFya01vZGUgPSBkYXJrKCk7XG4gICAgaW1wb3J0IEJ1dHRvbiBmcm9tICdzbWVsdGUvc3JjL2NvbXBvbmVudHMvQnV0dG9uJztcbjwvc2NyaXB0PlxuXG48c3R5bGU+XG4gICAgLmRhcmttb2Rla25vYiB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XG4gICAgfVxuPC9zdHlsZT5cblxuPG5hdlxuICAgIGNsYXNzPVwiZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1iZXR3ZWVuIGZsZXgtd3JhcCBiZy1ncmF5LTMwMCBkYXJrOmJnLWdyYXktODAwIHAtMSBmaXhlZCB3LWZ1bGxcbiAgICB6LTEwIHRvcC0wXCI+XG4gICAgPGRpdiBjbGFzcz1cImZsZXggaXRlbXMtY2VudGVyIGZsZXgtc2hyaW5rLTAgdGV4dC13aGl0ZSBtci02XCI+XG5cbiAgICAgICAgPGFcbiAgICAgICAgICAgIGNsYXNzPVwidGV4dC13aGl0ZSBuby11bmRlcmxpbmUgaG92ZXI6dGV4dC13aGl0ZSBob3Zlcjpuby11bmRlcmxpbmVcIlxuICAgICAgICAgICAgYXJpYS1jdXJyZW50PXtzZWdtZW50ID09PSB1bmRlZmluZWQgPyAncGFnZScgOiB1bmRlZmluZWR9XG4gICAgICAgICAgICBocmVmPVwiLlwiPlxuICAgICAgICAgICAgPHN2Z1xuICAgICAgICAgICAgICAgIHdpZHRoPVwiNDVcIlxuICAgICAgICAgICAgICAgIGhlaWdodD1cIjQ1XCJcbiAgICAgICAgICAgICAgICB2aWV3Qm94PVwiMCAwIDQ1IDQ1XCJcbiAgICAgICAgICAgICAgICBmaWxsPVwibm9uZVwiXG4gICAgICAgICAgICAgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPlxuICAgICAgICAgICAgICAgIDxnIGNsaXAtcGF0aD1cInVybCgjY2xpcDApXCI+XG4gICAgICAgICAgICAgICAgICAgIDxwYXRoXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxsLXJ1bGU9XCJldmVub2RkXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsaXAtcnVsZT1cImV2ZW5vZGRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgZD1cIk04Ljk2NjMxIDguNjU1NTJMMzYuNjU1MyA4LjY1NTUxTDM2LjY1NTMgMzYuMzQ0NUw4Ljk2NjMxIDM2LjM0NDVMOC45NjYzMVxuICAgICAgICAgICAgICAgICAgICAgICAgOC42NTU1MlpNMzUuMjY2MyAxOC4zNjE4TDM1LjI2NjMgMjEuNjkxMkgzMC45NTUyTDMwLjk1NTIgMTguMzYxOEwzNS4yNjYzXG4gICAgICAgICAgICAgICAgICAgICAgICAxOC4zNjE4Wk0zNS4yNjYzIDM0Ljk5MzdMMzUuMjY2MyAyMi41NzFMMzAuOTU1MiAyMi41NzFMMzAuOTU1MlxuICAgICAgICAgICAgICAgICAgICAgICAgMjkuNzE3M0MzMC43MzA1IDMyLjY3NDQgMzIuNjMxNiAzNC44MzkzIDM1LjI2NjMgMzQuOTkzN1pNMjkuOTU5MVxuICAgICAgICAgICAgICAgICAgICAgICAgMjEuNzI5M1YxOC40MTE5TDE3LjE1NjQgMTguNDExOUwxNy4xNTY0IDIxLjcyOUwyMS41MTk0IDIxLjcyOUwyMS41MTk0XG4gICAgICAgICAgICAgICAgICAgICAgICAzNC45OTM3SDI1LjgyOTNMMjUuODI5MyAyMS43MjkzTDI5Ljk1OTEgMjEuNzI5M1pcIlxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsbD1cIiNGMEI5MEJcIiAvPlxuICAgICAgICAgICAgICAgIDwvZz5cbiAgICAgICAgICAgICAgICA8ZGVmcz5cbiAgICAgICAgICAgICAgICAgICAgPGNsaXBQYXRoIGlkPVwiY2xpcDBcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxyZWN0IHdpZHRoPVwiNDVcIiBoZWlnaHQ9XCI0NVwiIGZpbGw9XCJ3aGl0ZVwiIC8+XG4gICAgICAgICAgICAgICAgICAgIDwvY2xpcFBhdGg+XG4gICAgICAgICAgICAgICAgPC9kZWZzPlxuICAgICAgICAgICAgPC9zdmc+XG5cbiAgICAgICAgPC9hPlxuICAgIDwvZGl2PlxuXG4gICAgPGRpdiBjbGFzcz1cImxnOmhpZGRlblwiIGlkPVwibmF2LWtub2JcIj5cbiAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgaWQ9XCJuYXYtdG9nZ2xlXCJcbiAgICAgICAgICAgIGNsYXNzPVwiZmxleCBpdGVtcy1jZW50ZXIgcHgtMyBweS0yIGJvcmRlciByb3VuZGVkIHRleHQtZ3JheS01MDAgYm9yZGVyLWdyYXktNjAwXG4gICAgICAgICAgICBob3Zlcjp0ZXh0LXdoaXRlIGhvdmVyOmJvcmRlci13aGl0ZVwiPlxuICAgICAgICAgICAgPHN2Z1xuICAgICAgICAgICAgICAgIGNsYXNzPVwiZmlsbC1jdXJyZW50IGgtMyB3LTNcIlxuICAgICAgICAgICAgICAgIHZpZXdCb3g9XCIwIDAgMjAgMjBcIlxuICAgICAgICAgICAgICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj5cbiAgICAgICAgICAgICAgICA8dGl0bGU+TWVudTwvdGl0bGU+XG4gICAgICAgICAgICAgICAgPHBhdGggZD1cIk0wIDNoMjB2MkgwVjN6bTAgNmgyMHYySDBWOXptMCA2aDIwdjJIMHYtMnpcIiAvPlxuICAgICAgICAgICAgPC9zdmc+XG4gICAgICAgIDwvYnV0dG9uPlxuICAgIDwvZGl2PlxuXG4gICAgPGRpdlxuICAgICAgICBjbGFzcz1cInctZnVsbCBmbGV4LWdyb3cgbGc6ZmxleCBsZzppdGVtcy1jZW50ZXIgbGc6dy1hdXRvIGhpZGRlbiBwdC02IGxnOnB0LTBcIlxuICAgICAgICBpZD1cIm5hdi1jb250ZW50XCI+XG4gICAgICAgIDx1bCBjbGFzcz1cImxpc3QtcmVzZXQgbGc6ZmxleCBqdXN0aWZ5LWVuZCBmbGV4LTEgaXRlbXMtY2VudGVyXCI+XG4gICAgICAgICAgICA8bGkgY2xhc3M9XCJtci0zXCI+XG5cbiAgICAgICAgICAgICAgICA8YVxuICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImlubGluZS1ibG9jayBweS0yIHB4LTQgdGV4dC13aGl0ZSBuby11bmRlcmxpbmVcIlxuICAgICAgICAgICAgICAgICAgICByZWw9XCJwcmVmZXRjaFwiXG4gICAgICAgICAgICAgICAgICAgIGFyaWEtY3VycmVudD17c2VnbWVudCA9PT0gJ2Jsb2cnID8gJ3BhZ2UnIDogdW5kZWZpbmVkfVxuICAgICAgICAgICAgICAgICAgICBocmVmPVwiYmxvZ1wiPlxuICAgICAgICAgICAgICAgICAgICBibG9nXG4gICAgICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgIDxsaSBjbGFzcz1cIm1yLTNcIj5cbiAgICAgICAgICAgICAgICA8YVxuICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImlubGluZS1ibG9jayB0ZXh0LXdoaXRlIG5vLXVuZGVybGluZSBob3Zlcjp0ZXh0LWdyYXktMzAwXG4gICAgICAgICAgICAgICAgICAgIGhvdmVyOnRleHQtdW5kZXJsaW5lIHB5LTIgcHgtNFwiXG4gICAgICAgICAgICAgICAgICAgIGFyaWEtY3VycmVudD17c2VnbWVudCA9PT0gJ2Fib3V0JyA/ICdwYWdlJyA6IHVuZGVmaW5lZH1cbiAgICAgICAgICAgICAgICAgICAgaHJlZj1cImFib3V0XCI+XG4gICAgICAgICAgICAgICAgICAgIGFib3V0XG4gICAgICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgIDxsaSBjbGFzcz1cIm1yLTNcIj5cbiAgICAgICAgICAgICAgICA8TG9naW4gLz5cbiAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICA8bGkgY2xhc3M9XCJtci0zXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRhcmttb2Rla25vYlwiPlxuICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIGJpbmQ6dmFsdWU9eyRkYXJrTW9kZX0gb3V0bGluZWQ+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInRleHQtbGcgbGVhZGluZy1ub25lXCI+JiM5NjgwOzwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICAgICAgICAgICZuYnNwO1xuICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIGhyZWY9XCJzZXR0aW5nc1wiIG91dGxpbmVkPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ0ZXh0LTJ4bCBsZWFkaW5nLW5vbmVcIj4mIzk4ODE7PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvbGk+XG4gICAgICAgIDwvdWw+XG4gICAgPC9kaXY+XG48L25hdj5cbiIsIjxzY3JpcHQ+XG4gICAgaW1wb3J0IHsgb25Nb3VudCB9IGZyb20gJ3N2ZWx0ZSc7XG4gICAgaW1wb3J0IFN3aXRjaCBmcm9tICdzbWVsdGUvc3JjL2NvbXBvbmVudHMvU3dpdGNoJztcbiAgICBpbXBvcnQgQnV0dG9uIGZyb20gJ3NtZWx0ZS9zcmMvY29tcG9uZW50cy9CdXR0b24nO1xuICAgIGltcG9ydCBUZXh0RmllbGQgZnJvbSAnc21lbHRlL3NyYy9jb21wb25lbnRzL1RleHRGaWVsZCc7XG4gICAgaW1wb3J0IHsgYXV0aFN0b3JlIH0gZnJvbSAnLi4vc3RvcmVzL2F1dGgnO1xuICAgIC8vaW1wb3J0IFwic21lbHRlL3NyYy90YWlsd2luZC5jc3NcIjtcbiAgICBleHBvcnQgbGV0IHVybGhvc3Q7XG5cbiAgICBsZXQgdXNlcnNldHRpbmdzID0gW107XG4gICAgbGV0IGJpbmFuY2VrZXksIGJpbmFuY2VzZWNyZXQsIGNvbWlzc2lvbjtcbiAgICBsZXQgZ2V0dXNzZXQgPSB1cmxob3N0ICsgJ2FwaS9nZXR1c2Vyc2V0dGluZ3MucGhwJztcbiAgICBsZXQgc2V0dXNzZXQgPSB1cmxob3N0ICsgJ2FwaS9zZXR1c2Vyc2V0dGluZ3MucGhwJztcblxuICAgIGNvbnNvbGUubG9nKGdldHVzc2V0KTtcbiAgICBvbk1vdW50KGFzeW5jICgpID0+IHtcbiAgICAgICAgbGV0IGF1ID0gJGF1dGhTdG9yZS51c2VyLnVpZDtcbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2goZ2V0dXNzZXQsIHtcbiAgICAgICAgICAgIG1ldGhvZDogJ3Bvc3QnLFxuICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoeyBhdSB9KSxcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICBBY2NlcHQ6ICdhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqLyonLFxuICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAgICAgJ0FjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpbic6ICcqJyxcbiAgICAgICAgICAgICAgICAnQWNjZXNzLUNvbnRyb2wtQWxsb3ctSGVhZGVycyc6ICcqJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgICB1c2Vyc2V0dGluZ3MgPSBhd2FpdCByZXMuanNvbigpO1xuICAgICAgICBjb25zb2xlLmxvZyh1c2Vyc2V0dGluZ3MpO1xuICAgICAgICBiaW5hbmNla2V5ID0gdXNlcnNldHRpbmdzWzFdO1xuICAgICAgICBiaW5hbmNlc2VjcmV0ID0gdXNlcnNldHRpbmdzWzJdO1xuICAgICAgICBjb21pc3Npb24gPSB1c2Vyc2V0dGluZ3NbM107XG4gICAgfSk7XG5cbiAgICBhc3luYyBmdW5jdGlvbiBzYXZlU2V0dGluZ3MoKSB7XG4gICAgICAgIGF3YWl0IGZldGNoKHNldHVzc2V0LCB7XG4gICAgICAgICAgICBtZXRob2Q6ICdwb3N0JyxcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICBBY2NlcHQ6ICdhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqLyonLFxuICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkodXNlcnNldHRpbmdzKSxcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnNvbGUubG9nKHVzZXJzZXR0aW5ncywgc2V0dXNzZXQpO1xuICAgIH1cbiAgICAkOiB1c2Vyc2V0dGluZ3MgPSBbJGF1dGhTdG9yZS51c2VyLnVpZCwgYmluYW5jZWtleSwgYmluYW5jZXNlY3JldCwgY29taXNzaW9uXTtcbjwvc2NyaXB0PlxuXG48c3R5bGUgdHlwZT1cInRleHQvc2Nzc1wiPlxuICAgIG1haW4ge1xuICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG5cbiAgICAgICAgcGFkZGluZzogMHB4O1xuICAgIH1cbiAgICAuZm9vbHJvdyB7XG4gICAgICAgIHdpZHRoOiA0MDBweDtcbiAgICB9XG5cbiAgICAucm93IHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgbWF4LXdpZHRoOiA0MDBweDtcbiAgICAgICAgbWFyZ2luOiBhdXRvO1xuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgICAgIG1hcmdpbi1ib3R0b206IDVweDtcbiAgICB9XG5cbiAgICAubGVmdGl0ZW0ge1xuICAgICAgICBib3JkZXI6IDBweCBzb2xpZDtcbiAgICAgICAgdGV4dC1hbGlnbjogbGVmdDtcbiAgICB9XG5cbiAgICAuaGVhZGJsb2NrIHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgbWF4LXdpZHRoOiA0MDBweDtcbiAgICAgICAgbWFyZ2luOiBhdXRvO1xuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XG4gICAgICAgIG1hcmdpbi1ib3R0b206IDdweDtcbiAgICB9XG48L3N0eWxlPlxuXG48bWFpbj5cbiAgICA8YnIgLz5cbiAgICA8cCBjbGFzcz1cInRleHQtMnhsXCI+0J3QsNGB0YLRgNC+0LnQutC4PC9wPlxuICAgIDxiciAvPlxuICAgIDxkaXYgY2xhc3M9XCJoZWFkYmxvY2tcIj5cbiAgICAgICAgPHA+QmluYW5jZSBBUEkga2V5czwvcD5cbiAgICAgICAgPGJyIC8+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwibGVmdGl0ZW1cIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmb29scm93XCI+XG4gICAgICAgICAgICAgICAgPFRleHRGaWVsZCBsYWJlbD1cIktleVwiIG91dGxpbmVkIGJpbmQ6dmFsdWU9e2JpbmFuY2VrZXl9IC8+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwibGVmdGl0ZW1cIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmb29scm93XCI+XG4gICAgICAgICAgICAgICAgPFRleHRGaWVsZCBiaW5kOnZhbHVlPXtiaW5hbmNlc2VjcmV0fSBsYWJlbD1cIlNlY3JldFwiIG91dGxpbmVkIC8+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cImhlYWRibG9ja1wiPlxuICAgICAgICA8cD7Qn9GA0L7Rh9C40LU8L3A+XG4gICAgICAgIDxiciAvPlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImxlZnRpdGVtXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZm9vbHJvd1wiPlxuICAgICAgICAgICAgICAgIDxUZXh0RmllbGQgbGFiZWw9XCJDb21pc3Npb25cIiBvdXRsaW5lZCBiaW5kOnZhbHVlPXtjb21pc3Npb259IC8+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICAgPEJ1dHRvbiBvbjpjbGljaz17c2F2ZVNldHRpbmdzfT7QodC+0YXRgNCw0L3QuNGC0Yw8L0J1dHRvbj5cbjwvbWFpbj5cbiIsIjxzY3JpcHQ+XG4gIGltcG9ydCB7IHN0YXRlU3RvcmUgfSBmcm9tIFwiLi4vc3RvcmVzL3N0YXRlYm90LmpzXCI7XG4gIGltcG9ydCB7IG9uTW91bnQgfSBmcm9tIFwic3ZlbHRlXCI7XG5cbiAgaW1wb3J0IFN3aXRjaCBmcm9tIFwic21lbHRlL3NyYy9jb21wb25lbnRzL1N3aXRjaFwiO1xuICAvL2ltcG9ydCBcInNtZWx0ZS9zcmMvdGFpbHdpbmQuY3NzXCI7XG4gIGltcG9ydCBOZXdCb3QgZnJvbSBcIi4vTmV3Qm90LnN2ZWx0ZVwiO1xuICAvL2ltcG9ydCBCb3RTdGF0dXMgZnJvbSAnLi9Cb3RTdGF0dXMuc3ZlbHRlJztcblxuICBleHBvcnQgbGV0IGNvbWlzc2lvbjtcbiAgZXhwb3J0IGxldCBzaG93O1xuXG4gIC8vY29uc29sZS5sb2cocHJvY2Vzcy5lbnYuU0FQUEVSX0FQUF9IT1NUSVApO1xuXG4gIGltcG9ydCBCdXR0b24gZnJvbSBcInNtZWx0ZS9zcmMvY29tcG9uZW50cy9CdXR0b25cIjtcbiAgaW1wb3J0IHsgYXV0aFN0b3JlIH0gZnJvbSBcIi4uL3N0b3Jlcy9hdXRoXCI7XG4gIC8vaW1wb3J0IHsgcmVxdWVzdCB9IGZyb20gJ2dyYXBocWwtcmVxdWVzdCc7XG5cbiAgaW1wb3J0IEluZExvYWQgZnJvbSBcIi4vSW5kTG9hZC5zdmVsdGVcIjtcblxuICBsZXQgdXJsaG9zdCA9ICRzdGF0ZVN0b3JlLnVybGhvc3Q7XG5cbiAgbGV0IGJvdHMgPSBbXTtcbiAgbGV0IHVybGJvdHNsaXN0ID0gdXJsaG9zdCArIFwiYm90c2xpc3RcIjtcbiAgbGV0IGxlYWRzdXJsID0gdXJsaG9zdCArIFwibGVhZHNcIjtcbiAgbGV0IG5ld2JvdCA9IHVybGhvc3QgKyBcImFwaS9uZXdib3QucGhwXCI7XG4gIGxldCBhcGlfYm90cyA9IHVybGJvdHNsaXN0O1xuXG4gIGxldCBzZWxlY3Rib3Q7XG4gIGxldCBsZWFkc2RhdGE7XG4gIGxldCBrb2x2b2xlYWRzO1xuICBsZXQgc3VtbGVhZHM7XG4gIGxldCBzcmxlYWRzO1xuICAvLy8vL3JvdXRlc1xuICBsZXQgcm91dElzQm90TGlzdCA9IHRydWU7XG4gIGxldCByb3V0SXNCb3QgPSBmYWxzZTtcbiAgbGV0IHJvdXRJc05ld0JvdCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIHJvdXRCb3RMaXN0KCkge1xuICAgICRzdGF0ZVN0b3JlLnJvdXQgPSBcImJvdGxpc3RcIjtcblxuICAgICRzdGF0ZVN0b3JlLnNlbGVjdGJvdG5hbWUgPSBcIlwiO1xuICAgIHJvdXRJc0JvdExpc3QgPSB0cnVlO1xuICAgIHJvdXRJc0JvdCA9IGZhbHNlO1xuICAgIHJvdXRJc05ld0JvdCA9IGZhbHNlO1xuICB9XG4gIGZ1bmN0aW9uIHJvdXROZXdCb3QoKSB7XG4gICAgJHN0YXRlU3RvcmUucm91dCA9IFwibmV3Ym90XCI7XG4gICAgY2xlYXJJbnRlcnZhbCgkc3RhdGVTdG9yZS50aW1lcklkbGlzdCk7XG4gICAgLy95bSg2NTk0ODExMCwgJ3JlYWNoR29hbCcsICdiZWdpbi1jcmVhdGVib3QnKTtcbiAgICByb3V0SXNCb3RMaXN0ID0gZmFsc2U7XG4gICAgcm91dElzQm90ID0gZmFsc2U7XG4gICAgcm91dElzTmV3Qm90ID0gdHJ1ZTtcbiAgfVxuICAvLy8vL2VuZCByb3V0ZXNcbiAgZnVuY3Rpb24gaXNteWJvdCh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZVs4XSA9PT0gJGF1dGhTdG9yZS51c2VyLnVpZDtcbiAgfVxuICBvbk1vdW50KGFzeW5jICgpID0+IHtcbiAgICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaChhcGlfYm90cywge1xuICAgICAgaGVhZGVyczoge1xuICAgICAgICBBY2NlcHQ6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgIH0sXG4gICAgICBtZXRob2Q6IFwiZ2V0XCIsXG4gICAgfSlcbiAgICAgIC50aGVuKChyZXMpID0+IHJlcy5qc29uKCkpXG4gICAgICAudGhlbigoanNvbikgPT4ge1xuICAgICAgICBib3RzID0ganNvbjtcbiAgICAgICAgaWYgKGJvdHMgPT0gbnVsbCkge1xuICAgICAgICAgIGJvdHMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLmxvZyhqc29uKTtcbiAgICAgICAgY29uc29sZS5sb2coYm90cyk7XG4gICAgICB9KTtcblxuICAgIGNvbnN0IGxlYWRzID0gYXdhaXQgZmV0Y2gobGVhZHN1cmwsIHtcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgQWNjZXB0OiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICB9LFxuICAgICAgbWV0aG9kOiBcImdldFwiLFxuICAgIH0pXG4gICAgICAudGhlbigobGVhZHMpID0+IGxlYWRzLmpzb24oKSlcbiAgICAgIC50aGVuKChqc29uKSA9PiB7XG4gICAgICAgIGtvbHZvbGVhZHMgPSBqc29uLmNvdW50O1xuICAgICAgICBzdW1sZWFkcyA9IGpzb24uc3VtO1xuICAgICAgICBzcmxlYWRzID0ganNvbi5zcjtcbiAgICAgIH0pO1xuICB9KTtcbiAgYXN5bmMgZnVuY3Rpb24gZmV0Y2gxcygpIHtcbiAgICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaCh1cmxib3RzbGlzdCk7XG4gICAgYm90cyA9IChhd2FpdCByZXMuanNvbigpKS5maWx0ZXIoaXNteWJvdCk7XG4gIH1cbiAgZnVuY3Rpb24gZW50cnlCb3QoYm90aWQpIHtcbiAgICBjb25zb2xlLmxvZyhib3RpZCk7XG5cbiAgICBjbGVhckludGVydmFsKCRzdGF0ZVN0b3JlLnRpbWVySWRsaXN0KTtcbiAgICBzZWxlY3Rib3QgPSBib3RpZDtcbiAgICAkc3RhdGVTdG9yZS5zZWxlY3Rib3RpZCA9IGJvdGlkO1xuICAgICRzdGF0ZVN0b3JlLnNlbGVjdGJvdG5hbWUgPSBib3RpZDtcbiAgICBsb2NhbFN0b3JhZ2Uuc2VsZWN0Ym90ID0gYm90aWQ7XG4gICAgJHN0YXRlU3RvcmUucm91dCA9IFwiYm90XCI7XG5cbiAgICAvL3dpbmRvdy5sb2NhdGlvbiA9IFwiL2JvdD9zZWxlY3Rib3Q9XCIrc2VsZWN0Ym90O1xuICB9XG4gIGZ1bmN0aW9uIHByb2ZpdHN1bXByb2N0b2RheWNhbGMoYXJyKSB7XG4gICAgbGV0IHN1bSA9IDA7XG4gICAgYXJyLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgIHN1bSA9IHN1bSArIGVsZW1lbnRbNV07XG4gICAgfSk7XG4gICAgcmV0dXJuIHN1bTtcbiAgfVxuICBmdW5jdGlvbiBwcm9maXRzdW1wcm9jY2FsYyhhcnIpIHtcbiAgICBsZXQgc3VtID0gMDtcbiAgICBhcnIuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgc3VtID0gc3VtICsgZWxlbWVudFszXTtcbiAgICB9KTtcbiAgICByZXR1cm4gc3VtO1xuICB9XG4gIGZ1bmN0aW9uIHN0YXJ0YmFsYW5jZXNjYWxjKGFycikge1xuICAgIGxldCBzdW0gPSAwO1xuICAgIGFyci5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICBzdW0gPSBzdW0gKyBlbGVtZW50WzZdO1xuICAgIH0pO1xuICAgIHJldHVybiBzdW07XG4gIH1cbiAgZnVuY3Rpb24gYmFsYW5jZXNjYWxjKGFycikge1xuICAgIGxldCBzdW0gPSAwO1xuICAgIGFyci5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICBzdW0gPSBzdW0gKyBlbGVtZW50WzddO1xuICAgIH0pO1xuICAgIHJldHVybiBzdW07XG4gIH1cbiAgZnVuY3Rpb24gdmxvemhjYWxjKGFycikge1xuICAgIGxldCBzdW0gPSAwO1xuICAgIGFyci5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICBzdW0gPSBzdW0gKyBlbGVtZW50WzEwXTtcbiAgICB9KTtcbiAgICByZXR1cm4gc3VtO1xuICB9XG5cbiAgbGV0IHNlbGVjdGJvdG5hbWU7XG4gICQ6IHBrZyA9IHtcbiAgICB1cmxob3N0OiB1cmxob3N0LFxuICAgIGNvbWlzc2lvbjogY29taXNzaW9uLFxuICAgIHVybGhvc3Q6IHVybGhvc3QsXG4gICAgc2VsZWN0Ym90bmFtZTogc2VsZWN0Ym90bmFtZSxcbiAgICByb3V0SXNCb3RMaXN0OiByb3V0SXNCb3RMaXN0LFxuICB9O1xuICAvLyQ6IGlmIChzZWxlY3Rib3QpIHtcbiAgLy8gICAgc2VsZWN0Ym90bmFtZSA9IGJvdHMuYm90bmFtZTtcbiAgLy99XG4gICQ6IHByb2ZpdHN1bXByb2N0b2RheSA9IHByb2ZpdHN1bXByb2N0b2RheWNhbGMoYm90cykudG9GaXhlZCgyKTtcbiAgJDogcHJvZml0c3VtcHJvYyA9IHByb2ZpdHN1bXByb2NjYWxjKGJvdHMpLnRvRml4ZWQoMik7XG4gICQ6IHN0YXJ0YmFsYW5jZXMgPSBzdGFydGJhbGFuY2VzY2FsYyhib3RzKS50b0ZpeGVkKDIpO1xuICAkOiBiYWxhbmNlcyA9IGJhbGFuY2VzY2FsYyhib3RzKS50b0ZpeGVkKDIpO1xuICAkOiBzdW1wcm9jdmxvemggPSAodmxvemhjYWxjKGJvdHMpIC8gc3RhcnRiYWxhbmNlc2NhbGMoYm90cykpICogMTAwO1xuXG4gIC8vJHN0YXRlU3RvcmUudGltZXJJZGxpc3QgPSBzZXRJbnRlcnZhbChmZXRjaDFzLCAxMDAwMCk7XG5cbiAgJDogc2hvdyA9ICRzdGF0ZVN0b3JlLnNob3dtZW51O1xuICAkOiBzZWxlY3Rib3RuYW1lID0gJHN0YXRlU3RvcmUuc2VsZWN0Ym90bmFtZTtcbiAgJDogdXJsaG9zdCA9ICRzdGF0ZVN0b3JlLnVybGhvc3Q7XG5cbiAgY2xlYXJJbnRlcnZhbCgkc3RhdGVTdG9yZS50aW1lcklkKTtcbiAgcm91dEJvdExpc3QoKTtcbiAgLy9jb25zb2xlLmxvZygkYXV0aFN0b3JlLnVzZXIpO1xuPC9zY3JpcHQ+XG5cbjxtYWluPlxuXG4gIDxkaXYgY2xhc3M9XCJ0ZXh0aXRlbSBweC0yIHB5LTNcIj5cbiAgICA8ZGl2IGNsYXNzPVwicm93YmFsYW5jZWl0ZW0gYmFsYW5jZWhlYWRcIj5cbiAgICAgIDxsYWJlbD7QkdCw0LvQsNC90YE8L2xhYmVsPlxuXG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cInJvd2JhbGFuY2VpdGVtXCI+XG4gICAgICA8bGFiZWw+0KHRgtCw0YDRgjwvbGFiZWw+XG4gICAgICA8YnIgLz5cbiAgICAgIDxzcGFuXG4gICAgICAgIGNsYXNzPVwiYm9yZGVyLXNvbGlkIGJvcmRlci0yIGJvcmRlci1ncmF5LTIwMCBiZy1ncmF5LTIwMCByb3VuZGVkLWZ1bGxcbiAgICAgICAgcHgtMyBweS0xIHRleHQtc20gZm9udC1zZW1pYm9sZCB0ZXh0LWdyYXktNzAwXCJcbiAgICAgID5cbiAgICAgICAge3N0YXJ0YmFsYW5jZXN9XG4gICAgICA8L3NwYW4+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cInJvd2JhbGFuY2VpdGVtXCI+XG4gICAgICA8bGFiZWw+0KHQtdCz0L7QtNC90Y88L2xhYmVsPlxuICAgICAgPGJyIC8+XG4gICAgICA8c3BhblxuICAgICAgICBjbGFzcz1cImJvcmRlci1zb2xpZCBib3JkZXItMiBib3JkZXItZ3JheS0yMDAgYmctZ3JheS0yMDAgcm91bmRlZC1mdWxsXG4gICAgICAgIHB4LTMgcHktMSB0ZXh0LXNtIGZvbnQtc2VtaWJvbGQgdGV4dC1ncmF5LTcwMFwiXG4gICAgICA+XG4gICAgICAgIHtiYWxhbmNlc31cbiAgICAgIDwvc3Bhbj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwicm93YmFsYW5jZWl0ZW1cIj5cbiAgICAgIDxsYWJlbD5D0LDQu9GM0LTQvjwvbGFiZWw+XG4gICAgICA8YnIgLz5cbiAgICAgIDxzcGFuXG4gICAgICAgIGNsYXNzPVwiYm9yZGVyLXNvbGlkIGJvcmRlci0yIGJvcmRlci1ncmF5LTYwMCByb3VuZGVkLWZ1bGwgcHgtMyBweS0xXG4gICAgICAgIHRleHQtc20gZm9udC1zZW1pYm9sZCB0ZXh0LWdyYXktNzAwIGRhcms6dGV4dC1wcmltYXJ5LTcwMFwiXG4gICAgICA+XG4gICAgICAgIHsoYmFsYW5jZXMgLSBzdGFydGJhbGFuY2VzKS50b0ZpeGVkKDIpfVxuICAgICAgPC9zcGFuPlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbiAgPGRpdiBjbGFzcz1cInRleHRpdGVtIHB4LTIgcHktM1wiPlxuICAgIDxkaXYgY2xhc3M9XCJyb3diYWxhbmNlaXRlbSBiYWxhbmNlaGVhZFwiPlxuICAgICAgPGxhYmVsPtCh0LTQtdC70LrQuDwvbGFiZWw+XG5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwicm93YmFsYW5jZWl0ZW1cIj5cbiAgICAgIDxsYWJlbD7QmtC+0Lst0LLQvjwvbGFiZWw+XG4gICAgICA8YnIgLz5cbiAgICAgIDxzcGFuXG4gICAgICAgIGNsYXNzPVwiYm9yZGVyLXNvbGlkIGJvcmRlci0yIGJvcmRlci1ncmF5LTIwMCBiZy1ncmF5LTIwMCByb3VuZGVkLWZ1bGxcbiAgICAgICAgcHgtMyBweS0xIHRleHQtc20gZm9udC1zZW1pYm9sZCB0ZXh0LWdyYXktNzAwXCJcbiAgICAgID5cbiAgICAgICAge2tvbHZvbGVhZHN9XG4gICAgICA8L3NwYW4+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cInJvd2JhbGFuY2VpdGVtXCI+XG4gICAgICA8bGFiZWw+0KHRg9C80LzQsDwvbGFiZWw+XG4gICAgICA8YnIgLz5cbiAgICAgIDxzcGFuXG4gICAgICAgIGNsYXNzPVwiYm9yZGVyLXNvbGlkIGJvcmRlci0yIGJvcmRlci1ncmF5LTIwMCBiZy1ncmF5LTIwMCByb3VuZGVkLWZ1bGxcbiAgICAgICAgcHgtMyBweS0xIHRleHQtc20gZm9udC1zZW1pYm9sZCB0ZXh0LWdyYXktNzAwXCJcbiAgICAgID5cbiAgICAgICAge3N1bWxlYWRzfVxuICAgICAgPC9zcGFuPlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJyb3diYWxhbmNlaXRlbVwiPlxuICAgICAgPGxhYmVsPtCh0YDQtdC00L3QtdC1PC9sYWJlbD5cbiAgICAgIDxiciAvPlxuICAgICAgPHNwYW5cbiAgICAgICAgY2xhc3M9XCJib3JkZXItc29saWQgYm9yZGVyLTIgYm9yZGVyLWdyYXktMjAwIGJnLWdyYXktMjAwIHJvdW5kZWQtZnVsbFxuICAgICAgICBweC0zIHB5LTEgdGV4dC1zbSBmb250LXNlbWlib2xkIHRleHQtZ3JheS03MDBcIlxuICAgICAgPlxuICAgICAgICB7c3JsZWFkc31cbiAgICAgIDwvc3Bhbj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG5cbiAgPGRpdiBjbGFzcz1cInRleHRpdGVtIHAtMlwiPlxuICAgIDxkaXYgY2xhc3M9XCJsZWZ0aXRlbVwiPtCf0YDQuNCx0YvQu9GMIC8g0L/RgNC+0YHQsNC00LrQsDwvZGl2PlxuICAgICZuYnNwOyZuYnNwO1xuICAgIDxkaXYgY2xhc3M9XCJjZW50ZXJlZGl0ZW1cIj5cbiAgICAgINCY0YLQvtCzXG4gICAgICA8YnIgLz5cbiAgICAgIHtwcm9maXRzdW1wcm9jfSAlXG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cImNlbnRlcmVkaXRlbVwiPlxuICAgICAg0KHQtdCz0L7QtNC90Y9cbiAgICAgIDxiciAvPlxuICAgICAge3Byb2ZpdHN1bXByb2N0b2RheX0gJVxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJyaWdodGl0ZW1cIj5cbiAgICAgIDxJbmRMb2FkIHByb2N2bG96aD17c3VtcHJvY3Zsb3pofSBpZD1cInN1bXByb2N2bG96aFwiIC8+XG5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG4gIDxkaXYgY2xhc3M9XCJkaXZoclwiPlxuICAgIDxociB3aWR0aD1cIjQwMHB4XCIgLz5cbiAgPC9kaXY+XG5cbiAgPGRpdiBjbGFzcz1cImJvdHNsaXN0XCI+XG5cbiAgICB7I2VhY2ggT2JqZWN0LmVudHJpZXMoYm90cykgYXMgW2lkLCBkYXRhXX1cbiAgICAgIDxhIGNsYXNzPVwiYm90aXRlbSBwLTJcIiBocmVmPVwiYm90c3RhdHVzcGFnZVwiIG9uOmNsaWNrPXtlbnRyeUJvdChkYXRhWzFdKX0+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJsZWZ0aXRlbVwiPntkYXRhWzFdfTwvZGl2PlxuXG4gICAgICAgIDxkaXYgY2xhc3M9XCJjZW50ZXJlZGl0ZW1cIj5cbiAgICAgICAgICA8c3Bhbj57ZGF0YVsyXX08L3NwYW4+XG4gICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgPHNwYW4+KHtkYXRhWzNdfSAlKTwvc3Bhbj5cbiAgICAgICAgICA8YnIgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjZW50ZXJlZGl0ZW1cIj5cbiAgICAgICAgICA8c3Bhbj57ZGF0YVs0XX08L3NwYW4+XG4gICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgPHNwYW4+KHtkYXRhWzVdfSAlKTwvc3Bhbj5cbiAgICAgICAgICA8YnIgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJyaWdodGl0ZW1cIj5cblxuICAgICAgICAgIDxJbmRMb2FkIHByb2N2bG96aD17ZGF0YVs5XX0ge2lkfSBvbm9mZj17ZGF0YVswXX0gLz5cblxuICAgICAgICA8L2Rpdj5cblxuICAgICAgPC9hPlxuICAgIHs6ZWxzZX1cbiAgICAgIDwhLS0g0Y3RgtC+0YIg0LHQu9C+0Log0L7RgtGA0LjRgdC+0LLRi9Cy0LDQtdGC0YHRjywg0L/QvtC60LAgcGhvdG9zLmxlbmd0aCA9PT0gMCAtLT5cbiAgICAgIDxwPtCd0Lgg0L7QtNC90L7Qs9C+INCx0L7RgtCwINC90LUg0YHQvtC30LTQsNC90L48L3A+XG4gICAgey9lYWNofVxuICA8L2Rpdj5cbiAgPGRpdiBjbGFzcz1cImFkZGtub2JcIj5cbiAgICA8QnV0dG9uIGhyZWY9XCJuZXdib3RcIiBsaWdodCBvdXRsaW5lZCBvbjpjbGljaz17cm91dE5ld0JvdH0+XG4gICAgICAmbmJzcDvQndC+0LLRi9C5INCx0L7RgiZuYnNwO1xuICAgIDwvQnV0dG9uPlxuICA8L2Rpdj5cblxuPC9tYWluPlxuXG48c3R5bGU+XG4gIC5kaXZociB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICB3aWR0aDogNDAwcHg7XG4gICAgaGVpZ2h0OiAxMHB4O1xuICAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xuICAgIG1hcmdpbi1yaWdodDogYXV0bztcbiAgfVxuICAuYmFsYW5jZWhlYWQge1xuICAgIHBhZGRpbmctdG9wOiAyOHB4O1xuICB9XG4gIC5yb3diYWxhbmNlaXRlbSB7XG4gICAgcGFkZGluZy1sZWZ0OiAxMHB4O1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBsaW5lLWhlaWdodDogMzBweDtcbiAgfVxuICAuY2VudGVyZWRpdGVtIHtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgbWluLXdpZHRoOiAyMyU7XG4gICAgYm9yZGVyOiAwcHggc29saWQ7XG4gIH1cbiAgLmFkZGtub2Ige1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xuICAgIG1hcmdpbi1sZWZ0OiAxMHB4O1xuICAgIG1hcmdpbi10b3A6IDEwcHg7XG4gIH1cbiAgbWFpbiB7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICB9XG4gIC5ib3RzbGlzdCB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgZGlzcGxheTogZ3JpZDtcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdCgxLCAxZnIpO1xuICAgIGdyaWQtZ2FwOiAxcHg7XG4gICAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiBhdXRvIDFmcjtcbiAgICBtYXJnaW46IDBweDtcbiAgICBwYWRkaW5nOiAwcHg7XG4gIH1cbiAgLmJvdGl0ZW0ge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgd2lkdGg6IDQwMHB4O1xuICAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xuICAgIG1hcmdpbi1yaWdodDogYXV0bztcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gIH1cbiAgLnRleHRpdGVtIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIHdpZHRoOiA0MDBweDtcbiAgICBtYXJnaW4tbGVmdDogYXV0bztcbiAgICBtYXJnaW4tcmlnaHQ6IGF1dG87XG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICB9XG4gIC5sZWZ0aXRlbSB7XG4gICAgYm9yZGVyOiAwcHggc29saWQ7XG4gICAgdGV4dC1hbGlnbjogbGVmdDtcbiAgICBtYXgtd2lkdGg6IDMwJTtcbiAgfVxuICAucmlnaHRpdGVtIHtcbiAgICBib3JkZXI6IDBweCBzb2xpZDtcbiAgICB0ZXh0LWFsaWduOiByaWdodDtcbiAgICB3aWR0aDogNDBweDtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZ3JvdzogMTtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICB9XG4gIC5ib3RpdGVtOmhvdmVyIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NSwgMjI4LCAxOTYsIDAuMzQyKTtcbiAgfVxuICBAbWVkaWEgKG1pbi13aWR0aDogNjQwcHgpIHtcbiAgICBtYWluIHtcbiAgICAgIG1heC13aWR0aDogbm9uZTtcbiAgICB9XG4gIH1cbjwvc3R5bGU+XG4iLCI8c2NyaXB0PlxuICAgIGltcG9ydCB7IG9uTW91bnQgfSBmcm9tICdzdmVsdGUnO1xuICAgIGltcG9ydCBUZXh0RmllbGQgZnJvbSAnc21lbHRlL3NyYy9jb21wb25lbnRzL1RleHRGaWVsZCc7XG4gICAgaW1wb3J0IFN3aXRjaCBmcm9tICdzbWVsdGUvc3JjL2NvbXBvbmVudHMvU3dpdGNoJztcbiAgICBpbXBvcnQgQnV0dG9uIGZyb20gJ3NtZWx0ZS9zcmMvY29tcG9uZW50cy9CdXR0b24nO1xuICAgIGV4cG9ydCBsZXQgdXJsaG9zdDtcbiAgICBleHBvcnQgbGV0IGNvbWlzc2lvbjtcblxuICAgIGltcG9ydCB7IGF1dGhTdG9yZSB9IGZyb20gJy4uL3N0b3Jlcy9hdXRoJztcbiAgICBpbXBvcnQgeyBzdGF0ZVN0b3JlIH0gZnJvbSAnLi4vc3RvcmVzL3N0YXRlYm90LmpzJztcbiAgICBsZXQgdXNlcmlkID0gJGF1dGhTdG9yZS51c2VyLnVpZDtcblxuICAgIGxldCB1cmxib3RzbGlzdCA9IHVybGhvc3QgKyAnYm90c2xpc3QnO1xuICAgIC8vbGV0IG5ld2JvdCA9IHVybGhvc3QgKyAnYXBpL25ld2JvdC5waHAnO1xuICAgIGxldCBhcGlfYm90cyA9ICdodHRwOi8vNzcuODcuMjEyLjM4OjEzMzcvYm90cyc7XG4gICAgbGV0IGFwaV9ib3RjcmVhdGUgPSB1cmxob3N0ICsgJ2JvdGNyZWF0ZSc7XG5cblxuICAgIGxldCBpc3J1bm5pbmcgPSBmYWxzZTtcbiAgICBsZXQgcXVvdGFjb2luO1xuICAgIGxldCBiYXNlY29pbjtcbiAgICBsZXQgZGlnaXRxO1xuICAgIGxldCBkaWdpdHByaWNlO1xuICAgIGxldCBtaW5wcmljZTtcbiAgICBsZXQgbWF4cHJpY2U7XG4gICAgbGV0IHN0YXJ0ZGVwbztcbiAgICBsZXQgcHJvZml0cHJvYztcbiAgICBsZXQgb3JkZXJzaXplO1xuICAgIGxldCBvcmRlcnNpemVpbnF1b3RhID0gMDtcbiAgICAkOiBvcmRlcnNpemVpbnF1b3RhID0gKCgoc3RhcnRkZXBvIC8gMTAwKSAqIG9yZGVyc2l6ZSkgLyBtaW5wcmljZSkudG9GaXhlZChkaWdpdHEpO1xuICAgICQ6IG9yZGVyc2l6ZWluYmFzZSA9ICgoc3RhcnRkZXBvIC8gMTAwKSAqIG9yZGVyc2l6ZSkudG9GaXhlZChkaWdpdHEpO1xuICAgIGxldCBvZnNldGJvdHRvbTtcbiAgICBsZXQgb2ZzZXR0b3A7XG4gICAgJDogb2ZzZXRib3R0b21zaXplID0gKG1pbnByaWNlIC8gMTAwKSAqIG9mc2V0Ym90dG9tO1xuICAgICQ6IG9mc2V0dG9wc2l6ZSA9ICgobWlucHJpY2UgKiAoMSArIHByb2ZpdHByb2MgLyAxMDApKSAvIDEwMCkgKiBvZnNldHRvcDtcbiAgICBsZXQgY29tbWVudDtcbiAgICBsZXQgZmxvb3JzdnNlZ28gPSAwO1xuXG4gICAgbGV0IHN0YXJ0Zmxvb3JwcmljZSA9IG1pbnByaWNlO1xuICAgIGxldCBoZWlnaHRmaXJzdGZsb29yID0gMDtcbiAgICBsZXQgaGVpZ2h0bGFzdGZsb29yID0gMDtcbiAgICBsZXQgbWExID0gMztcbiAgICBsZXQgbWEyID0gMzA7XG4gICAgbGV0IG1heHByaWNlZm9yemFrdXA7XG4gICAgbGV0IG1pbnByaWNlZm9yemFrdXA7XG4gICAgbGV0IGZsb29ycyA9IFtdO1xuICAgIGxldCBjdXJlbm50cHJpY2UgPSAwO1xuICAgIGxldCBwcmljZWZvcndha2U7XG4gICAgbGV0IGhhbmR5emFwcmV0bmF6YWt1cCA9IGZhbHNlO1xuXG4gICAgZnVuY3Rpb24gZ2V0Zmxvb3JzdnNlZ28obSwgbXgsIHByLCBvYiwgb3QpIHtcbiAgICAgICAgbGV0IGZ2ID0gMTtcbiAgICAgICAgbGV0IGhlaWdodF9mbG9vciA9IDA7XG5cbiAgICAgICAgaWYgKG0gJiYgbXggJiYgcHIgJiYgb2IgJiYgb3QpIHtcbiAgICAgICAgICAgIGxldCBwID0gcGFyc2VJbnQocHIgKiAxMDAwKSAvIDEwMDA7XG4gICAgICAgICAgICBmbG9vcnMgPSBbXTtcbiAgICAgICAgICAgIGxldCBtbnogPSAxMCAqIHBhcnNlSW50KGRpZ2l0cHJpY2UpO1xuICAgICAgICAgICAgbGV0IHN0YXJ0Zmxvb3JwcmljZSA9IHBhcnNlSW50KG0gKiBtbnopIC8gbW56O1xuXG4gICAgICAgICAgICBpZiAobSAmJiBteCAmJiBwKSB7XG4gICAgICAgICAgICAgICAgd2hpbGUgKHN0YXJ0Zmxvb3JwcmljZSA8IG14KSB7XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodF9mbG9vciA9XG4gICAgICAgICAgICAgICAgICAgICAgICAoc3RhcnRmbG9vcnByaWNlICogKGNvbWlzc2lvbiArIHApKSAvIDEwMCArXG4gICAgICAgICAgICAgICAgICAgICAgICAob2ZzZXRib3R0b20gKiBzdGFydGZsb29ycHJpY2UpIC8gMTAwICtcbiAgICAgICAgICAgICAgICAgICAgICAgIChvZnNldHRvcCAqIHN0YXJ0Zmxvb3JwcmljZSkgLyAxMDA7XG4gICAgICAgICAgICAgICAgICAgIGZsb29ycy5wdXNoKFtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ2LFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRmbG9vcnByaWNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRmbG9vcnByaWNlICsgaGVpZ2h0X2Zsb29yLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRmbG9vcnByaWNlICsgKG9mc2V0Ym90dG9tICogc3RhcnRmbG9vcnByaWNlKSAvIDEwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0Zmxvb3JwcmljZSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKG9mc2V0Ym90dG9tICogc3RhcnRmbG9vcnByaWNlKSAvIDEwMCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHN0YXJ0Zmxvb3JwcmljZSAqIGNvbWlzc2lvbikgLyAxMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydGZsb29ycHJpY2UgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChvZnNldGJvdHRvbSAqIHN0YXJ0Zmxvb3JwcmljZSkgLyAxMDAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChzdGFydGZsb29ycHJpY2UgKiBjb21pc3Npb24pIC8gMTAwICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAob2ZzZXR0b3AgKiBzdGFydGZsb29ycHJpY2UpIC8gMTAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRmbG9vcnByaWNlICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAob2ZzZXRib3R0b20gKiBzdGFydGZsb29ycHJpY2UpIC8gMTAwICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoc3RhcnRmbG9vcnByaWNlICogKGNvbWlzc2lvbiArIHApKSAvIDEwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgICAgICAgICBdKTtcblxuICAgICAgICAgICAgICAgICAgICBzdGFydGZsb29ycHJpY2UgPSBzdGFydGZsb29ycHJpY2UgKyBoZWlnaHRfZmxvb3I7XG4gICAgICAgICAgICAgICAgICAgIGZ2Kys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChtIDwgbXgpIHtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0Zmlyc3RmbG9vciA9IChmbG9vcnNbMF1bMl0gLSBmbG9vcnNbMF1bMV0pLnRvRml4ZWQoZGlnaXRwcmljZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0Zmlyc3RmbG9vciA9IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChtIDwgbXgpIHtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0bGFzdGZsb29yID0gKGZsb29yc1tmdiAtIDJdWzJdIC0gZmxvb3JzW2Z2IC0gMl1bMV0pLnRvRml4ZWQoZGlnaXRwcmljZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0bGFzdGZsb29yID0gMDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhoZWlnaHRmaXJzdGZsb29yLCBoZWlnaHRsYXN0Zmxvb3IpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdiA9IGZ2IC0gMTtcbiAgICAgICAgICAgIHJldHVybiBmdjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgICQ6IGZsb29yc3ZzZWdvID0gZ2V0Zmxvb3JzdnNlZ28obWlucHJpY2UsIG1heHByaWNlLCBwcm9maXRwcm9jLCBvZnNldGJvdHRvbSwgb2ZzZXR0b3ApO1xuXG4gICAgbGV0IGJvdHMgPSBbXTtcbiAgICBvbk1vdW50KGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2godXJsYm90c2xpc3QpO1xuICAgICAgICBib3RzID0gYXdhaXQgcmVzLmpzb24oKTtcbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIGFkZE5ld0JvdCgpIHtcbiAgICAgICAgdmFyIGQgPSBuZXcgRGF0ZSgpO1xuICAgICAgICB2YXIgbXMgPSBEYXRlLnBhcnNlKGQpIC8gMTAwMDtcbiAgICAgICAgaWYgKGJvdHMgPT0gbnVsbCkge1xuICAgICAgICAgICAgYm90cyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIGxldCBib3RuYW1lID0gcXVvdGFjb2luICsgYmFzZWNvaW4gKyAnLScgKyBtcztcbiAgICAgICAgbGV0IG1vbmV0YSA9IHF1b3RhY29pbiArIGJhc2Vjb2luO1xuICAgICAgICBib3RzID0gWy4uLmJvdHMsIFtmYWxzZSwgYm90bmFtZSwgMCwgMCwgMCwgMCwgMCwgMCwgdXNlcmlkXV07XG5cbiAgICAgICAgbGV0IHNldHRpbmdzID0ge1xuICAgICAgICAgICAgYm90bmFtZSxcbiAgICAgICAgICAgIGlzcnVubmluZyxcbiAgICAgICAgICAgIGhhbmR5emFwcmV0bmF6YWt1cCxcbiAgICAgICAgICAgIGNvbW1lbnQsXG4gICAgICAgICAgICBxdW90YWNvaW4sXG4gICAgICAgICAgICBiYXNlY29pbixcbiAgICAgICAgICAgIG1vbmV0YSxcbiAgICAgICAgICAgIGRpZ2l0cSxcbiAgICAgICAgICAgIGRpZ2l0cHJpY2UsXG4gICAgICAgICAgICBtaW5wcmljZSxcbiAgICAgICAgICAgIG1heHByaWNlLFxuICAgICAgICAgICAgcHJvZml0cHJvYyxcbiAgICAgICAgICAgIG9yZGVyc2l6ZSxcbiAgICAgICAgICAgIG9mc2V0Ym90dG9tLFxuICAgICAgICAgICAgb2ZzZXR0b3AsXG4gICAgICAgICAgICBtYTEsXG4gICAgICAgICAgICBtYTIsXG4gICAgICAgICAgICBtYXhwcmljZWZvcnpha3VwLFxuICAgICAgICAgICAgbWlucHJpY2Vmb3J6YWt1cCxcbiAgICAgICAgICAgIHByaWNlZm9yd2FrZSxcbiAgICAgICAgICAgIHVzZXJpZFxuICAgICAgICB9O1xuXG4gICAgICAgIGxldCBmaW5hbmNlID0ge1xuICAgICAgICAgICAgc3RhcnRkZXBvOiBzdGFydGRlcG8sXG4gICAgICAgICAgICBkZXBvOiBzdGFydGRlcG8sXG4gICAgICAgICAgICBxdW90YW5hbDogMCxcbiAgICAgICAgICAgIHF1b3RhaW5vcmRlcnM6IDAsXG4gICAgICAgICAgICBiYXNlbmFsOiBzdGFydGRlcG8sXG4gICAgICAgICAgICBiYXNlaW5vcmRlcnM6IDAsXG4gICAgICAgICAgICBwcm9maXR0b2RheTogMCxcbiAgICAgICAgfTtcbiAgICAgICAgbGV0IHNhbGVzID0geyB0b2RheTogW10sIGRheXM6IFtdLCBhbGw6IFtdIH07XG4gICAgICAgIGxldCBzdGF0dXMgPSB7XG4gICAgICAgICAgICBjdXJyZW50cHJpY2U6IC0xLFxuICAgICAgICAgICAgbGFzdHByaWNlOiAtMSxcbiAgICAgICAgICAgIGN1cnJlbnRmbG9vcjogLTEsXG4gICAgICAgICAgICBsYXN0Zmxvb3I6IC0xLFxuICAgICAgICAgICAgc3JfbWFfYmlnOiAtMSxcbiAgICAgICAgICAgIHNyX21hX3NtYWxsOiAtMSxcbiAgICAgICAgICAgIHJlemhpbTogJ9Ch0YLQsNGA0YLQvtCy0YvQtSDQvdCw0YHRgtGA0L7QudC60LgnLFxuICAgICAgICAgICAgdXBkYXRlZDogbXNcbiAgICAgICAgfTtcbiAgICAgICAgbGV0IHR0cCA9IHtcbiAgICAgICAgICAgIHJhc2Noc3RvcHByaWNlOiAwLFxuICAgICAgICAgICAgY3Vyc3RvcDogMCxcbiAgICAgICAgICAgIGN1cm9yZGVyaWQ6IDAsXG4gICAgICAgICAgICBxdWFudGl0eTogMCxcbiAgICAgICAgICAgIHR0cGJ1c3k6IGZhbHNlLFxuICAgICAgICAgICAgc29sZDogZmFsc2VcbiAgICAgICAgfTtcbiAgICAgICAgXG5cbiAgICBmZXRjaChhcGlfYm90Y3JlYXRlLCB7XG4gICAgICAgIG1ldGhvZDogJ3Bvc3QnLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICBBY2NlcHQ6ICdhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqLyonLFxuICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgfSxcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoeyBcbiAgICAgICAgICAgIFwiYm90bmFtZVwiIDogYm90bmFtZSxcbiAgICAgICAgICAgIFwiYnVzeVwiOiBmYWxzZSxcbiAgICAgICAgICAgIFwib25vZmZcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwidXNlcl9pZF9mcm9tX2dvb2dsZVwiOiB1c2VyaWQsXG4gICAgICAgICAgICBcInNldHRpbmdzXCI6IEpTT04uc3RyaW5naWZ5KHNldHRpbmdzKSxcbiAgICAgICAgICAgIFwiZmxvb3JzXCI6IEpTT04uc3RyaW5naWZ5KGZsb29ycyksXG4gICAgICAgICAgICBcImZpbmFuY2VcIiA6IEpTT04uc3RyaW5naWZ5KGZpbmFuY2UpLFxuICAgICAgICAgICAgXCJzYWxlc1wiIDogSlNPTi5zdHJpbmdpZnkoc2FsZXMpLFxuICAgICAgICAgICAgXCJzdGF0dXNcIiA6IEpTT04uc3RyaW5naWZ5KHN0YXR1cyksXG4gICAgICAgICAgICBcInR0cFwiIDogSlNPTi5zdHJpbmdpZnkodHRwKSxcbiAgICAgICAgICAgIFwic3RhcnRfc2V0XCIgOiBKU09OLnN0cmluZ2lmeSh7c2V0dGluZ3MsZmxvb3JzLGZpbmFuY2Usc2FsZXMsc3RhdHVzLHR0cH0pXG4gICAgICAgIH0pXG4gICAgfSk7XG5cblxuICAgICAgICAvL2ZldGNoKGFwaV9ib3RjcmVhdGUsIHtcbiAgICAgICAgLy8gICAgbWV0aG9kOiAncG9zdCcsXG4gICAgICAgIC8vICAgIGhlYWRlcnM6IHtcbiAgICAgICAgLy8gICAgICAgIEFjY2VwdDogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKicsXG4gICAgICAgIC8vICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAvLyAgICB9LFxuICAgICAgICAvLyAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7IFxuICAgICAgICAvLyAgICAgICAgXCJib3RuYW1lXCIgOiBib3RuYW1lLFxuICAgICAgICAvLyAgICAgICAgXCJ1c2VyX2lkX2Zyb21fZ29vZ2xlXCI6IHVzZXJpZCxcbiAgICAgICAgLy8gICAgICAgIFwidHRwXCIgOiB0dHBcbiAgICAgICAgLy8gICAgfSksXG4gICAgICAgIC8vfSk7XG4gICAgICAgLy9cbiAgICAgICAgLy95bSg2NTk0ODExMCwncmVhY2hHb2FsJywnY3JlYXRlYm90Jyk7XG4gICAgICAgIC8vXG4gICAgICAgIC8vd2luZG93LmxvY2F0aW9uID0gXCIvXCI7XG4gICAgICAgIC8vY29uc29sZS5sb2coT2JqZWN0LnZhbHVlcyhib3RzKSk7XG4gICAgfVxuICAgIC8vbGV0IGJvdHNldHRpbmdzYWxsID0gW107XG4vL1xuICAgIC8vJDogYm90c2V0dGluZ3NhbGwgPSBbXG4gICAgLy8gICAgY29tbWVudCxcbiAgICAvLyAgICBxdW90YWNvaW4sXG4gICAgLy8gICAgYmFzZWNvaW4sXG4gICAgLy8gICAgZGlnaXRxLFxuICAgIC8vICAgIGRpZ2l0cHJpY2UsXG4gICAgLy8gICAgbWlucHJpY2UsXG4gICAgLy8gICAgbWF4cHJpY2UsXG4gICAgLy8gICAgcHJvZml0cHJvYyxcbiAgICAvLyAgICBvcmRlcnNpemUsXG4gICAgLy8gICAgb2ZzZXRib3R0b20sXG4gICAgLy8gICAgb2ZzZXR0b3AsXG4gICAgLy8gICAgbWExLFxuICAgIC8vICAgIG1hMixcbiAgICAvLyAgICBtYXhwcmljZWZvcnpha3VwLFxuICAgIC8vICAgIG1pbnByaWNlZm9yemFrdXAsXG4gICAgLy8gICAgcHJpY2Vmb3J3YWtlLFxuICAgIC8vXTtcbjwvc2NyaXB0PlxuXG48c3R5bGUgdHlwZT1cInRleHQvc2Nzc1wiPlxuICAgIC5wYWR0b3A1IHtcbiAgICAgICAgcGFkZGluZy10b3A6IDE0cHg7XG4gICAgfVxuXG4gICAgLmZvb2xyb3cge1xuICAgICAgICB3aWR0aDogNDAwcHg7XG4gICAgfVxuXG4gICAgLnJvdyB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIG1heC13aWR0aDogNDAwcHg7XG4gICAgICAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xuICAgICAgICBtYXJnaW4tcmlnaHQ6IGF1dG87XG4gICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICB9XG4gICAgLmxlZnRpdGVtIHtcbiAgICAgICAgYm9yZGVyOiAwcHggc29saWQ7XG4gICAgICAgIHRleHQtYWxpZ246IGxlZnQ7XG4gICAgfVxuICAgIC5yaWdodGl0ZW0ge1xuICAgICAgICBib3JkZXI6IDBweCBzb2xpZDtcbiAgICAgICAgdGV4dC1hbGlnbjogcmlnaHQ7XG4gICAgfVxuICAgIC5oZWFkYmxvY2sge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBtYXgtd2lkdGg6IDQwMHB4O1xuICAgICAgICBtYXJnaW46IGF1dG87XG4gICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kO1xuICAgICAgICBtYXJnaW4tdG9wOiA3cHg7XG4gICAgICAgIGNvbG9yOiByZ2IoMzYsIDM2LCAzNik7XG4gICAgfVxuXG4gICAgbGFiZWwge1xuICAgICAgICBtYXJnaW4tYm90dG9tOiA3cHg7XG4gICAgICAgIGNvbG9yOiByZ2IoMTI2LCAxMjYsIDEyNik7XG4gICAgfVxuICAgIG1haW4ge1xuICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICAgIHBhZGRpbmc6IDBweDtcbiAgICB9XG48L3N0eWxlPlxuXG48bWFpbj5cbiAgICA8ZGl2IGNsYXNzPVwiaGVhZGJsb2NrXCI+XG4gICAgICAgIDxwIGNsYXNzPVwidGV4dC14bCB0ZXh0LWdyYXktOTAwIGRhcms6dGV4dC1ncmF5LTMwMFwiPtCh0L7Qt9C00LDQvdC40LUg0L3QvtCy0L7Qs9C+INCx0L7RgtCwPC9wPlxuXG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwibGVmdGl0ZW1cIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmb29scm93XCI+XG4gICAgICAgICAgICAgICAgPFRleHRGaWVsZCBsYWJlbD1cItCa0L7QvNC80LXQvdGC0LDRgNC40LlcIiBvdXRsaW5lZCBiaW5kOnZhbHVlPXtjb21tZW50fSAvPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImxlZnRpdGVtXCI+XG4gICAgICAgICAgICA8VGV4dEZpZWxkIGxhYmVsPVwi0KLQvtGA0LPRg9C10LzQsNGPINCy0LDQu9GO0YLQsFwiIG91dGxpbmVkIGJpbmQ6dmFsdWU9e3F1b3RhY29pbn0gLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgICZuYnNwOyZuYnNwO1xuICAgICAgICA8ZGl2IGNsYXNzPVwicmlnaHRpdGVtXCI+XG4gICAgICAgICAgICA8VGV4dEZpZWxkIGxhYmVsPVwi0JHQsNC30L7QstCw0Y8g0LLQsNC70Y7RgtCwXCIgb3V0bGluZWQgYmluZDp2YWx1ZT17YmFzZWNvaW59IC8+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImxlZnRpdGVtXCI+XG4gICAgICAgICAgICA8VGV4dEZpZWxkIGxhYmVsPVwi0J7QutGA0YPQs9C70LXQvdC40LUg0YbQtdC90YtcIiBvdXRsaW5lZCBiaW5kOnZhbHVlPXtkaWdpdHByaWNlfSAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgJm5ic3A7Jm5ic3A7XG4gICAgICAgIDxkaXYgY2xhc3M9XCJyaWdodGl0ZW1cIj5cbiAgICAgICAgICAgIDxUZXh0RmllbGQgbGFiZWw9XCLQntC60YDRg9Cz0LvQtdC90LjQtSDQvtCx0YrQtdC80LBcIiBvdXRsaW5lZCBiaW5kOnZhbHVlPXtkaWdpdHF9IC8+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImxlZnRpdGVtXCI+XG4gICAgICAgICAgICA8VGV4dEZpZWxkIGxhYmVsPVwi0J3QuNC3INGB0LXRgtC60LhcIiBvdXRsaW5lZCBiaW5kOnZhbHVlPXttaW5wcmljZX0gLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgICZuYnNwOyZuYnNwO1xuICAgICAgICA8ZGl2IGNsYXNzPVwicmlnaHRpdGVtXCI+XG4gICAgICAgICAgICA8VGV4dEZpZWxkIGxhYmVsPVwi0JLQtdGA0YUg0YHQtdGC0LrQuFwiIG91dGxpbmVkIGJpbmQ6dmFsdWU9e21heHByaWNlfSAvPlxuICAgICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwicm93XCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJsZWZ0aXRlbVwiPlxuICAgICAgICAgICAgPFRleHRGaWVsZCBsYWJlbD1cItCh0YLQsNGA0YLQvtCy0YvQuSDQtNC10L/QvtC30LjRglwiIG91dGxpbmVkIGJpbmQ6dmFsdWU9e3N0YXJ0ZGVwb30gLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgICZuYnNwOyZuYnNwO1xuICAgICAgICA8ZGl2IGNsYXNzPVwicmlnaHRpdGVtXCI+XG5cbiAgICAgICAgICAgIDxUZXh0RmllbGQgbGFiZWw9XCLQn9GA0LjQsdGL0LvRjCDQsiDRgdC00LXQu9C60LUsICVcIiBvdXRsaW5lZCBiaW5kOnZhbHVlPXtwcm9maXRwcm9jfSAvPlxuICAgICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwicm93XCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJsZWZ0aXRlbVwiPlxuICAgICAgICAgICAgPGxhYmVsPtCe0LHRitC10Lwg0L7RgNC00LXRgNCwPC9sYWJlbD5cbiAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgPHAgY2xhc3M9XCIgdGV4dC1ncmF5LTkwMCBkYXJrOnRleHQtZ3JheS0zMDBcIj5cbiAgICAgICAgICAgICAgICB+IHtvcmRlcnNpemVpbnF1b3RhID8gb3JkZXJzaXplaW5xdW90YSA6IDB9IHtxdW90YWNvaW59LCB7b3JkZXJzaXplaW5iYXNlID8gb3JkZXJzaXplaW5iYXNlIDogMH1cbiAgICAgICAgICAgICAgICB7YmFzZWNvaW59XG4gICAgICAgICAgICA8L3A+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICAmbmJzcDsmbmJzcDtcbiAgICAgICAgPGRpdiBjbGFzcz1cInJpZ2h0aXRlbVwiPlxuICAgICAgICAgICAgPFRleHRGaWVsZCBsYWJlbD1cIiUg0L7RgiDQtNC10L/QvlwiIG91dGxpbmVkIGJpbmQ6dmFsdWU9e29yZGVyc2l6ZX0gc2l6ZT1cIjEwXCIgLz5cblxuICAgICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwicm93XCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJsZWZ0aXRlbVwiPlxuICAgICAgICAgICAgPFRleHRGaWVsZCBsYWJlbD1cItCe0YLRgdGC0YPQvyDRgdC90LjQt9GDLCAlXCIgb3V0bGluZWQgYmluZDp2YWx1ZT17b2ZzZXRib3R0b219IC8+XG4gICAgICAgICAgICA8cCBjbGFzcz1cIiB0ZXh0LWdyYXktOTAwIGRhcms6dGV4dC1ncmF5LTMwMFwiPlxuICAgICAgICAgICAgICAgIH4ge29mc2V0Ym90dG9tc2l6ZS50b0ZpeGVkKGRpZ2l0cHJpY2UpfSB7YmFzZWNvaW59XG4gICAgICAgICAgICA8L3A+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICAmbmJzcDsmbmJzcDtcbiAgICAgICAgPGRpdiBjbGFzcz1cInJpZ2h0aXRlbVwiPlxuICAgICAgICAgICAgPFRleHRGaWVsZCBsYWJlbD1cItCe0YLRgdGC0YPQvyDRgdCy0LXRgNGF0YMsICVcIiBvdXRsaW5lZCBiaW5kOnZhbHVlPXtvZnNldHRvcH0gLz5cbiAgICAgICAgICAgIDxwIGNsYXNzPVwiIHRleHQtZ3JheS05MDAgZGFyazp0ZXh0LWdyYXktMzAwXCI+XG4gICAgICAgICAgICAgICAgfiB7b2ZzZXR0b3BzaXplLnRvRml4ZWQoZGlnaXRwcmljZSl9IHtiYXNlY29pbn1cbiAgICAgICAgICAgIDwvcD5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwibGVmdGl0ZW1cIj5cbiAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgPGxhYmVsPtCS0YHQtdCz0L4g0Y3RgtCw0LbQtdC5PC9sYWJlbD5cbiAgICAgICAgICAgIDxwIGNsYXNzPVwiIHRleHQtZ3JheS05MDAgZGFyazp0ZXh0LWdyYXktMzAwXCI+e2Zsb29yc3ZzZWdvfTwvcD5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwibGVmdGl0ZW1cIj5cbiAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgPGxhYmVsPtCS0YvRgdC+0YLQsCAxLdCz0L4g0Y3RgtCw0LbQsDwvbGFiZWw+XG4gICAgICAgICAgICA8cCBjbGFzcz1cIiB0ZXh0LWdyYXktOTAwIGRhcms6dGV4dC1ncmF5LTMwMFwiPntoZWlnaHRmaXJzdGZsb29yfSB7YmFzZWNvaW59PC9wPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInJpZ2h0aXRlbVwiPlxuICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICA8bGFiZWw+0JLRi9GB0L7RgtCwINCy0LXRgNGF0L3QtdCz0L4g0Y3RgtCw0LbQsDwvbGFiZWw+XG4gICAgICAgICAgICA8cCBjbGFzcz1cIiB0ZXh0LWdyYXktOTAwIGRhcms6dGV4dC1ncmF5LTMwMFwiPntoZWlnaHRsYXN0Zmxvb3J9IHtiYXNlY29pbn08L3A+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgIDxiciAvPlxuICAgIDxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImxlZnRpdGVtXCI+XG4gICAgICAgICAgICA8VGV4dEZpZWxkIGxhYmVsPVwiTUExLCDQvNC40L1cIiBvdXRsaW5lZCBiaW5kOnZhbHVlPXttYTF9IC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICAmbmJzcDsmbmJzcDtcbiAgICAgICAgPGRpdiBjbGFzcz1cInJpZ2h0aXRlbVwiPlxuICAgICAgICAgICAgPFRleHRGaWVsZCBsYWJlbD1cIk1BMiwg0LzQuNC9XCIgb3V0bGluZWQgYmluZDp2YWx1ZT17bWEyfSAvPlxuICAgICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwicm93XCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJsZWZ0aXRlbSBwYWR0b3A1XCI+XG4gICAgICAgICAgICA8bGFiZWw+0J3QtSDQt9Cw0LrRg9C/0LDRgtGMLCDQtdGB0LvQuCDRhtC10L3QsCDQsdC+0LvRjNGI0LU8L2xhYmVsPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgJm5ic3A7Jm5ic3A7XG4gICAgICAgIDxkaXYgY2xhc3M9XCJyaWdodGl0ZW1cIj5cbiAgICAgICAgICAgIDxUZXh0RmllbGQgbGFiZWw9XCJcIiBvdXRsaW5lZCBiaW5kOnZhbHVlPXttYXhwcmljZWZvcnpha3VwfSBzaXplPVwiMTBcIiAvPlxuICAgICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cblxuICAgIDxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImxlZnRpdGVtIHBhZHRvcDVcIj5cbiAgICAgICAgICAgIDxsYWJlbD7QndC1INC30LDQutGD0L/QsNGC0YwsINC10YHQu9C4INGG0LXQvdCwINC80LXQvdGM0YjQtTwvbGFiZWw+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwicmlnaHRpdGVtXCI+XG4gICAgICAgICAgICA8VGV4dEZpZWxkIGxhYmVsPVwiXCIgb3V0bGluZWQgYmluZDp2YWx1ZT17bWlucHJpY2Vmb3J6YWt1cH0gc2l6ZT1cIjEwXCIgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICAgPGJyIC8+XG4gICAgPEJ1dHRvbiBocmVmPVwiL1wiIG9uOmNsaWNrPXthZGROZXdCb3R9PtCh0L7Qt9C00LDRgtGMPC9CdXR0b24+XG4gICAgPGJyIC8+XG4gICAgPGJyIC8+XG48L21haW4+XG4iLCI8c2NyaXB0PlxuICBpbXBvcnQgeyBvbk1vdW50IH0gZnJvbSBcInN2ZWx0ZVwiO1xuICBpbXBvcnQgU3dpdGNoIGZyb20gXCJzbWVsdGUvc3JjL2NvbXBvbmVudHMvU3dpdGNoXCI7XG4gIGltcG9ydCBCdXR0b24gZnJvbSBcInNtZWx0ZS9zcmMvY29tcG9uZW50cy9CdXR0b25cIjtcbiAgaW1wb3J0IFRleHRGaWVsZCBmcm9tIFwic21lbHRlL3NyYy9jb21wb25lbnRzL1RleHRGaWVsZFwiO1xuICBpbXBvcnQgUHJvZ3Jlc3NMaW5lYXIgZnJvbSBcInNtZWx0ZS9zcmMvY29tcG9uZW50cy9Qcm9ncmVzc0xpbmVhclwiO1xuICBpbXBvcnQgeyBzdGF0ZVN0b3JlIH0gZnJvbSBcIi4uL3N0b3Jlcy9zdGF0ZWJvdC5qc1wiO1xuICBpbXBvcnQgeyBhdXRoU3RvcmUgfSBmcm9tICcuLi9zdG9yZXMvYXV0aCc7XG5cbiAgdmFyIHNlbGVjdGJvdG5hbWUgPSAkc3RhdGVTdG9yZS5zZWxlY3Rib3RuYW1lO1xuICBsZXQgdXJsaG9zdCA9ICRzdGF0ZVN0b3JlLnVybGhvc3Q7XG4gIGxldCB1c2VyaWQgPSAkYXV0aFN0b3JlLnVzZXIudWlkO1xuXG4gIGxldCBib3RzZXR0aW5nc2pzb24gPSB1cmxob3N0ICsgXCJib3Rfc2V0dGluZ3NcIjtcbiAgbGV0IGJvdG9ub2ZmanNvbiA9IHVybGhvc3QgKyBcImJvdF9vbm9mZlwiO1xuICBsZXQgYm90ZmluYW5jZWpzb24gPSB1cmxob3N0ICsgXCJhcGkvZGF0YS1maW5hbmNlLnBocFwiO1xuICBsZXQgYm90Zmxvb3JzanNvbiA9IHVybGhvc3QgKyBcImFwaS9kYXRhLWZsb29ycy5waHBcIjtcbiAgbGV0IGJvdHNhbGVzanNvbiA9IHVybGhvc3QgKyBcImFwaS9kYXRhLXNhbGVzLnBocFwiO1xuICBsZXQgYm90c3RhdHVzanNvbiA9IHVybGhvc3QgKyBcImJvdF9mdWxsXCI7XG4gIGxldCBjaGFuZ2VzZXR0aW5nc2pzb24gPSB1cmxob3N0ICsgXCJhcGkvY2hhbmdlc2V0dGluZ3MucGhwXCI7XG4gIGxldCByZXNldHNldHRpbmdzanNvbiA9IHVybGhvc3QgKyBcImJvdF9yZXNldFwiO1xuICBsZXQgZGVsZXRlYm90dXJsID0gdXJsaG9zdCArIFwiYm90X2RlbGV0ZVwiO1xuICBsZXQgYm90ZnVsbHN0YXR1c3VybCA9IHVybGhvc3QgKyBcImFwaS9kYXRhLWZ1bGxzdGF0dXMucGhwXCI7XG4gIGxldCBwYW5pY3NhbGV1cmwgPSB1cmxob3N0ICsgXCJhcGkvcGFuaWNzYWxlLnBocFwiO1xuXG4gIGxldCBib3RmdWxsc3RhdHVzID0gW107XG4gIGxldCBib3RzZXR0aW5ncyA9IFtdO1xuICBsZXQgYm90ZmluYW5jZSA9IFtdO1xuICBsZXQgYm90Zmxvb3JzID0gW107XG4gIGxldCBib3RzYWxlcyA9IFtdO1xuICBsZXQgYm90c3RhdHVzID0gW107XG4gIGxldCBib3Rvbm9mZiA9IFtdO1xuICBsZXQgbGFzdF9wcmljZSA9IDA7XG5cbiAgbGV0IHNhbGVzdG9kYXlhcnIgPSBbXTtcbiAgbGV0IHNhbGVzYWxsYXJyID0gW107XG5cbiAgZnVuY3Rpb24gbG9hZHNldHRpbmdzKHNlbGVjdGJvdGlkKSB7XG4gICAgbGV0IG15SGVhZGVycyA9IG5ldyBIZWFkZXJzKCk7XG4gICAgbXlIZWFkZXJzLmFwcGVuZChcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb25cIik7XG5cbiAgICBsZXQgcmF3ID0gSlNPTi5zdHJpbmdpZnkoeyBib3RuYW1lOiBzZWxlY3Rib3RpZCB9KTtcblxuICAgIGxldCByZXF1ZXN0T3B0aW9ucyA9IHtcbiAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICBoZWFkZXJzOiBteUhlYWRlcnMsXG4gICAgICBib2R5OiByYXcsXG4gICAgICByZWRpcmVjdDogXCJmb2xsb3dcIixcbiAgICB9O1xuXG4gICAgZmV0Y2goYm90c2V0dGluZ3Nqc29uLCByZXF1ZXN0T3B0aW9ucylcbiAgICAgIC50aGVuKChyZXNwb25zZSkgPT4gcmVzcG9uc2UuanNvbigpKVxuICAgICAgLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhyZXN1bHQpO1xuXG4gICAgICAgIGJvdHNldHRpbmdzID0gcmVzdWx0O1xuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZXJyb3IpID0+IGNvbnNvbGUubG9nKFwiZXJyb3JcIiwgZXJyb3IpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldG9ub2ZmKHNlbGVjdGJvdGlkKSB7XG4gICAgbGV0IG15SGVhZGVycyA9IG5ldyBIZWFkZXJzKCk7XG4gICAgbXlIZWFkZXJzLmFwcGVuZChcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb25cIik7XG5cbiAgICBsZXQgcmF3ID0gSlNPTi5zdHJpbmdpZnkoeyBib3RuYW1lOiBzZWxlY3Rib3RpZCB9KTtcblxuICAgIGxldCByZXF1ZXN0T3B0aW9ucyA9IHtcbiAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICBoZWFkZXJzOiBteUhlYWRlcnMsXG4gICAgICBib2R5OiByYXcsXG4gICAgICByZWRpcmVjdDogXCJmb2xsb3dcIixcbiAgICB9O1xuXG4gICAgZmV0Y2goYm90b25vZmZqc29uLCByZXF1ZXN0T3B0aW9ucylcbiAgICAgIC50aGVuKChyZXNwb25zZSkgPT4gcmVzcG9uc2UuanNvbigpKVxuICAgICAgLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhyZXN1bHQpO1xuXG4gICAgICAgIGJvdG9ub2ZmID0gcmVzdWx0O1xuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZXJyb3IpID0+IGNvbnNvbGUubG9nKFwiZXJyb3JcIiwgZXJyb3IpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNhdmVzZXR0aW5ncygpIHtcbiAgICAvL2JvdHNldHRpbmdzLmlzcnVubmluZyA9ICFib3RzZXR0aW5ncy5pc3J1bm5pbmc7XG4gICAgZmV0Y2goY2hhbmdlc2V0dGluZ3Nqc29uLCB7XG4gICAgICBtZXRob2Q6IFwicG9zdFwiLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICBBY2NlcHQ6IFwiYXBwbGljYXRpb24vanNvbiwgdGV4dC9wbGFpbiwgKi8qXCIsXG4gICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgfSxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGJvdHNldHRpbmdzKSxcbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIGdvYmFjaygpIHtcbiAgICAgIHNlbGVjdGJvdG5hbWUgPSBcIlwiO1xuICAgICAgJHN0YXRlU3RvcmUucm91dCA9IFwiYm90bGlzdFwiO1xuICAgIH1cbiAgICBzZXRUaW1lb3V0KGdvYmFjaywgMTAwMCk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNldHNldHRpbmdzKCkge1xuICAgIHZhciBteUhlYWRlcnMgPSBuZXcgSGVhZGVycygpO1xuICAgIG15SGVhZGVycy5hcHBlbmQoXCJDb250ZW50LVR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uXCIpO1xuXG4gICAgdmFyIHJhdyA9IEpTT04uc3RyaW5naWZ5KHsgYm90bmFtZTogc2VsZWN0Ym90bmFtZSB9KTtcbiAgICB2YXIgcmVxdWVzdE9wdGlvbnMgPSB7XG4gICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgaGVhZGVyczogbXlIZWFkZXJzLFxuICAgICAgYm9keTogcmF3LFxuICAgICAgcmVkaXJlY3Q6IFwiZm9sbG93XCIsXG4gICAgfTtcbiAgICBmZXRjaChyZXNldHNldHRpbmdzanNvbiwgcmVxdWVzdE9wdGlvbnMpXG4gICAgICAudGhlbigocmVzcG9uc2UpID0+IHJlc3BvbnNlLmpzb24oKSlcbiAgICAgIC50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2cocmVzdWx0KTtcbiAgICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gZ29iYWNrKCkge1xuICAgICAgc2VsZWN0Ym90bmFtZSA9IFwiXCI7XG4gICAgICAkc3RhdGVTdG9yZS5yb3V0ID0gXCJib3RsaXN0XCI7XG4gICAgfVxuICAgIHNldFRpbWVvdXQoZ29iYWNrLCAxMDAwKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlbGV0ZWJvdCgpIHtcbiAgICB2YXIgbXlIZWFkZXJzID0gbmV3IEhlYWRlcnMoKTtcbiAgICBteUhlYWRlcnMuYXBwZW5kKFwiQ29udGVudC1UeXBlXCIsIFwiYXBwbGljYXRpb24vanNvblwiKTtcblxuICAgIHZhciByYXcgPSBKU09OLnN0cmluZ2lmeSh7XG4gICAgICBib3RuYW1lOiBzZWxlY3Rib3RuYW1lLFxuICAgICAgdXNlcl9pZF9mcm9tX2dvb2dsZTogdXNlcmlkLFxuICAgIH0pO1xuICAgIHZhciByZXF1ZXN0T3B0aW9ucyA9IHtcbiAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICBoZWFkZXJzOiBteUhlYWRlcnMsXG4gICAgICBib2R5OiByYXcsXG4gICAgICByZWRpcmVjdDogXCJmb2xsb3dcIixcbiAgICB9O1xuICAgIGZldGNoKGRlbGV0ZWJvdHVybCwgcmVxdWVzdE9wdGlvbnMpXG4gICAgICAudGhlbigocmVzcG9uc2UpID0+IHJlc3BvbnNlLmpzb24oKSlcbiAgICAgIC50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2cocmVzdWx0KTtcbiAgICAgIH0pO1xuICAgIC8vJHN0YXRlU3RvcmUucm91dCA9IFwiYm90bGlzdFwiO1xuICAgIC8vd2luZG93LmxvY2F0aW9uID0gXCIvXCI7XG4gICAgZnVuY3Rpb24gZ29iYWNrKCkge1xuICAgICAgc2VsZWN0Ym90bmFtZSA9IFwiXCI7XG4gICAgICAkc3RhdGVTdG9yZS5yb3V0ID0gXCJib3RsaXN0XCI7XG4gICAgfVxuICAgIHNldFRpbWVvdXQoZ29iYWNrLCAxMDAwKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhbmljc2FsZSgpIHtcbiAgICBpZiAocGFuaWNzYWxldXJsKSB7XG4gICAgICBmZXRjaChwYW5pY3NhbGV1cmwsIHtcbiAgICAgICAgbWV0aG9kOiBcInBvc3RcIixcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgIEFjY2VwdDogXCJhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqLypcIixcbiAgICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgICAgfSxcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoc2VsZWN0Ym90bmFtZSksXG4gICAgICB9KTtcbiAgICAgIC8vJHN0YXRlU3RvcmUucm91dCA9IFwiYm90bGlzdFwiO1xuICAgICAgLy93aW5kb3cubG9jYXRpb24gPSBcIi9cIjtcbiAgICAgIC8vZnVuY3Rpb24gZ29iYWNrKCkge1xuICAgICAgLy8gICAgc2VsZWN0Ym90bmFtZSA9ICcnO1xuICAgICAgLy8gICAgJHN0YXRlU3RvcmUucm91dCA9ICdib3RsaXN0JztcbiAgICAgIC8vfVxuICAgICAgLy9zZXRUaW1lb3V0KGdvYmFjaywgMTAwMCk7XG5cbiAgICAgIC8vZmV0Y2gocmVzZXRzZXR0aW5nc2pzb24sIHtcbiAgICAgIC8vICAgIG1ldGhvZDogJ3Bvc3QnLFxuICAgICAgLy8gICAgaGVhZGVyczoge1xuICAgICAgLy8gICAgICAgIEFjY2VwdDogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKicsXG4gICAgICAvLyAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgIC8vICAgIH0sXG4gICAgICAvLyAgICBib2R5OiBzZWxlY3Rib3RuYW1lLFxuICAgICAgLy99KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzdW1zYWxlcyhhcnIpIHtcbiAgICBsZXQgc3VtID0gMDtcbiAgICBhcnIuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgc3VtID0gc3VtICsgZWxlbWVudFs1XTtcbiAgICB9KTtcbiAgICByZXR1cm4gc3VtO1xuICB9XG4gIGxldCBib3Q7XG4gIGZ1bmN0aW9uIGZldGNoZnVsbHN0YXR1cyhzZWxlY3Rib3RpZCkge1xuICAgIGNvbnNvbGUubG9nKFwic2VsZWN0Ym90aWQ6XCIgKyBzZWxlY3Rib3RpZCk7XG5cbiAgICBsZXQgbXlIZWFkZXJzMiA9IG5ldyBIZWFkZXJzKCk7XG4gICAgbXlIZWFkZXJzMi5hcHBlbmQoXCJDb250ZW50LVR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uXCIpO1xuXG4gICAgbGV0IHJhdzIgPSBKU09OLnN0cmluZ2lmeSh7IGJvdG5hbWU6IHNlbGVjdGJvdGlkIH0pO1xuXG4gICAgbGV0IHJlcXVlc3RPcHRpb25zMiA9IHtcbiAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICBoZWFkZXJzOiBteUhlYWRlcnMyLFxuICAgICAgYm9keTogcmF3MixcbiAgICAgIHJlZGlyZWN0OiBcImZvbGxvd1wiLFxuICAgIH07XG5cbiAgICBmZXRjaChib3RzdGF0dXNqc29uLCByZXF1ZXN0T3B0aW9uczIpXG4gICAgICAudGhlbigocmVzcG9uc2UpID0+IHJlc3BvbnNlLmpzb24oKSlcbiAgICAgIC50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2cocmVzdWx0KTtcbiAgICAgICAgbGFzdF9wcmljZSA9IE51bWJlcihyZXN1bHQuc3RhdHVzLmN1cnJlbnRwcmljZSk7XG4gICAgICAgIGJvdHN0YXR1cyA9IHJlc3VsdC5zdGF0dXM7XG4gICAgICAgIC8vYm90c2V0dGluZ3MgPSByZXN1bHQuc2V0dGluZ3M7XG4gICAgICAgIGJvdGZpbmFuY2UgPSByZXN1bHQuZmluYW5jZTtcbiAgICAgICAgYm90Zmxvb3JzID0gcmVzdWx0LmZsb29ycztcbiAgICAgICAgYm90c2FsZXMgPSByZXN1bHQuc2FsZXM7XG4gICAgICAgIHNhbGVzdG9kYXlhcnIgPSBib3RzYWxlcy50b2RheTtcbiAgICAgICAgc2FsZXNhbGxhcnIgPSBib3RzYWxlcy5hbGw7XG4gICAgICAgIC8vYm90b25vZmYgPSByZXN1bHQub25vZmY7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKChlcnJvcikgPT4gY29uc29sZS5sb2coXCJlcnJvclwiLCBlcnJvcikpO1xuICB9XG5cbiAgbG9hZHNldHRpbmdzKHNlbGVjdGJvdG5hbWUpO1xuICAvL2ZldGNoMXMoKTtcbiAgZmV0Y2hmdWxsc3RhdHVzKHNlbGVjdGJvdG5hbWUpO1xuICBnZXRvbm9mZihzZWxlY3Rib3RuYW1lKTtcbiAgY29uc3QgdGltZXJJZCA9IHNldEludGVydmFsKGZldGNoZnVsbHN0YXR1cywgMTAwMCwgc2VsZWN0Ym90bmFtZSk7XG4gICRzdGF0ZVN0b3JlLnRpbWVySWQgPSB0aW1lcklkO1xuXG4gICQ6IGlmICghYm90c3RhdHVzKSB7XG4gICAgYm90c3RhdHVzID0gW107XG4gICAgYm90c3RhdHVzLnJlemhpbSA9IFwi0J/QvtC00LrQu9GO0YfQsNC10LzRgdGPINC6INGB0LXRgNCy0LXRgNGDXCI7XG4gIH1cbiAgbGV0IHByb2ZpdHN1bSA9IDA7XG4gIGxldCBwcm9maXRzdW1wcm9jID0gMDtcbiAgbGV0IHF1b3Rhc3VtID0gMDtcbiAgbGV0IGJhc2VzdW0gPSAwO1xuICAkOiBwcm9maXRzdW0gPSAoYm90ZmluYW5jZS5kZXBvIC0gYm90ZmluYW5jZS5zdGFydGRlcG8pLnRvRml4ZWQoXG4gICAgYm90c2V0dGluZ3MuZGlnaXRwcmljZVxuICApO1xuICAkOiBwcm9maXRzdW1wcm9jID0gKFxuICAgIChib3RmaW5hbmNlLmRlcG8gLyBib3RmaW5hbmNlLnN0YXJ0ZGVwbykgKiAxMDAgLVxuICAgIDEwMFxuICApLnRvRml4ZWQoMik7XG4gICQ6IHF1b3Rhc3VtID0gK2JvdGZpbmFuY2UucXVvdGFuYWwgKyArYm90ZmluYW5jZS5xdW90YWlub3JkZXJzO1xuICAkOiBiYXNlc3VtID0gK2JvdGZpbmFuY2UuYmFzZW5hbCArICtib3RmaW5hbmNlLmJhc2Vpbm9yZGVycztcbiAgJDogcHJvZml0dG9kYXlwcm9jID0gKChzYWxlc3RvZGF5c3VtIC8gYm90ZmluYW5jZS5zdGFydGRlcG8pICogMTAwKS50b0ZpeGVkKFxuICAgIDJcbiAgKTtcblxuICAvL3NldEludGVydmFsKGZldGNoMXMsIDEwMDApO1xuXG4gIGxldCBsb3dxO1xuICBsZXQgbG93O1xuICBsZXQgaGlnaHQ7XG4gIGxldCBmbG9vcm51bWJlciwgZjEsIGYyLCBmMztcbiAgbGV0IHNhbGVzYWxsO1xuICBsZXQgc2FsZXNhbGxzdW0sIG9yZGVyc2l6ZWlucXVvdGEsIG9yZGVyc2l6ZWluYmFzZSwgcHJvZ3Jlc3M7XG5cbiAgJDogaWYgKGJvdHN0YXR1cyAhPT0gbnVsbCkge1xuICAgIGxvd3EgPSBib3RmbG9vcnNbYm90c3RhdHVzLmN1cnJlbnRmbG9vciAtIDFdO1xuICAgIG9yZGVyc2l6ZWlucXVvdGEgPSAoXG4gICAgICAoKGJvdGZpbmFuY2UuZGVwbyAvIDEwMCkgKiBib3RzZXR0aW5ncy5vcmRlcnNpemUpIC9cbiAgICAgIGJvdHN0YXR1cy5jdXJyZW50cHJpY2VcbiAgICApLnRvRml4ZWQoYm90c2V0dGluZ3MuZGlnaXRxKTtcbiAgICBvcmRlcnNpemVpbmJhc2UgPSAob3JkZXJzaXplaW5xdW90YSAqIGJvdHN0YXR1cy5jdXJyZW50cHJpY2UpLnRvRml4ZWQoXG4gICAgICBib3RzZXR0aW5ncy5kaWdpdHByaWNlXG4gICAgKTtcbiAgICBwcm9ncmVzcyA9ICgoYm90c3RhdHVzLmN1cnJlbnRwcmljZSAtIGxvdykgLyAoaGlnaHQgLSBsb3cpKSAqIDEwMDtcbiAgICBpZiAobG93cSkge1xuICAgICAgZmxvb3JudW1iZXIgPSBsb3dxWzBdO1xuICAgICAgbG93ID0gbG93cVsxXS50b0ZpeGVkKGJvdHNldHRpbmdzLmRpZ2l0cHJpY2UpO1xuICAgICAgaGlnaHQgPSBsb3dxWzJdLnRvRml4ZWQoYm90c2V0dGluZ3MuZGlnaXRwcmljZSk7XG4gICAgICBmMSA9IGxvd3FbM10udG9GaXhlZChib3RzZXR0aW5ncy5kaWdpdHByaWNlKTtcbiAgICAgIGYyID0gbG93cVs0XS50b0ZpeGVkKGJvdHNldHRpbmdzLmRpZ2l0cHJpY2UpO1xuICAgICAgZjMgPSBsb3dxWzVdLnRvRml4ZWQoYm90c2V0dGluZ3MuZGlnaXRwcmljZSk7XG4gICAgfVxuICB9XG5cbiAgJDogc2FsZXN0b2RheSA9IHNhbGVzdG9kYXlhcnIubGVuZ3RoO1xuICAkOiBzYWxlc3RvZGF5c3VtID0gc3Vtc2FsZXMoc2FsZXN0b2RheWFycik7XG5cbiAgJDogc2FsZXNhbGwgPSBzYWxlc2FsbGFyci5sZW5ndGg7XG4gICQ6IHNhbGVzYWxsc3VtID0gc3Vtc2FsZXMoc2FsZXNhbGxhcnIpO1xuXG4gIGxldCBvcGVuZmxvb3JzO1xuXG4gIGZ1bmN0aW9uIG9wZW5mbG9vcnNjYWxjKGZsb29ycykge1xuICAgIGxldCBjb3VudCA9IDA7XG4gICAgbGV0IHNycHJpY2UgPSAwO1xuICAgIGxldCBzdW0gPSAwO1xuICAgIGxldCByZXM7XG4gICAgZmxvb3JzLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0sIGksIGZsb29ycykge1xuICAgICAgaWYgKGl0ZW1bN10gPT09IDIgfHwgaXRlbVs3XSA9PT0gMykge1xuICAgICAgICBjb3VudCA9IGNvdW50ICsgMTtcbiAgICAgICAgc3VtID0gTnVtYmVyKHN1bSArIE51bWJlcihpdGVtWzEwXSkpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChjb3VudCA+IDApIHtcbiAgICAgIHNycHJpY2UgPSAoc3VtIC8gY291bnQpLnRvRml4ZWQoYm90c2V0dGluZ3MuZGlnaXRwcmljZSk7XG4gICAgICByZXMgPSB7IGNvdW50OiBjb3VudCwgc3ByaWNlOiBzcnByaWNlIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcyA9IHsgY291bnQ6IGNvdW50LCBzcHJpY2U6IHNycHJpY2UgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xuICB9XG4gICQ6IG9wZW5mbG9vcnMgPSBvcGVuZmxvb3JzY2FsYyhib3RmbG9vcnMpO1xuPC9zY3JpcHQ+XG5cbjxtYWluPlxuXG4gIDxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgICA8ZGl2IGNsYXNzPVwibGVmdGl0ZW1cIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJmb29scm93XCI+XG4gICAgICAgIDxUZXh0RmllbGRcbiAgICAgICAgICBsYWJlbD1cItCa0L7QvNC80LXQvdGC0LDRgNC40LlcIlxuICAgICAgICAgIG91dGxpbmVkXG4gICAgICAgICAgYmluZDp2YWx1ZT17Ym90c2V0dGluZ3MuY29tbWVudH1cbiAgICAgICAgLz5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbiAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgIDxkaXYgY2xhc3M9XCJsZWZ0aXRlbVwiPlxuICAgICAgPGxhYmVsPtCi0LXQutGD0YnQuNC5INGA0LXQttC40Lw8L2xhYmVsPlxuICAgICAgPGJyIC8+XG4gICAgICA8c3Ryb25nIGNsYXNzPVwiYmctd2hpdGUgZGFyazpiZy1ncmF5LTkwMCB0ZXh0LWJsYWNrIGRhcms6dGV4dC13aGl0ZVwiPlxuICAgICAgICB7Ym90c3RhdHVzLnJlemhpbX1cbiAgICAgIDwvc3Ryb25nPlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbiAgeyNpZiBib3RzdGF0dXMuY3VycmVudGZsb29yICE9PSAwfVxuICAgIDxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJsZWZ0aXRlbVwiPlxuICAgICAgICA8bm9icj5cbiAgICAgICAgICA8bGFiZWw+0K3RgtCw0LY8L2xhYmVsPlxuICAgICAgICAgIDxzdHJvbmc+e2Zsb29ybnVtYmVyfTwvc3Ryb25nPlxuICAgICAgICAgIHtsb3d9IC0ge2hpZ2h0fSZuYnNwOyZuYnNwO1xuICAgICAgICA8L25vYnI+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXZcbiAgICAgICAgY2xhc3M9XCJyaWdodGl0ZW1cIlxuICAgICAgICBzdHlsZT1cIm1hcmdpbi10b3A6IDlweDtoZWlnaHQ6NHB4OyB3aWR0aDoxMDAlOyBiYWNrZ3JvdW5kLWNvbG9yOiAjZjVjZTU0XCJcbiAgICAgID5cbiAgICAgICAgPFByb2dyZXNzTGluZWFyIHtwcm9ncmVzc30gLz5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICB7L2lmfVxuICA8ZGl2IGNsYXNzPVwicm93XCI+XG4gICAgPGRpdiBjbGFzcz1cImxlZnRpdGVtXCI+XG4gICAgICA8bGFiZWw+0KbQtdC90LA8L2xhYmVsPlxuICAgICAgPGJyIC8+XG4gICAgICA8c3BhblxuICAgICAgICBjbGFzcz1cImlubGluZS1ibG9jayBiZy1ncmF5LTIwMCByb3VuZGVkLWZ1bGwgcHgtMyBweS0xIHRleHQtc20gZm9udC1ib2xkXG4gICAgICAgIHRleHQtZ3JheS04MDBcIlxuICAgICAgPlxuICAgICAgICB7bGFzdF9wcmljZX1cbiAgICAgIDwvc3Bhbj5cbiAgICAgIDxiciAvPlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJyaWdodGl0ZW0gcm93YmFsYW5jZVwiPlxuICAgICAgPGRpdiBjbGFzcz1cInJvd2JhbGFuY2VpdGVtXCI+XG4gICAgICAgIDxsYWJlbD7QkdCw0LvQsNC90YE8L2xhYmVsPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwicm93YmFsYW5jZWl0ZW1cIj5cbiAgICAgICAgPGxhYmVsPtCh0YLQsNGA0YI8L2xhYmVsPlxuICAgICAgICA8YnIgLz5cbiAgICAgICAgPHNwYW5cbiAgICAgICAgICBjbGFzcz1cImlubGluZS1ibG9jayBiZy1ncmF5LTIwMCByb3VuZGVkLWZ1bGwgcHgtMyBweS0xIHRleHQtc21cbiAgICAgICAgICBmb250LXNlbWlib2xkIHRleHQtZ3JheS03MDBcIlxuICAgICAgICA+XG4gICAgICAgICAge2JvdGZpbmFuY2Uuc3RhcnRkZXBvfVxuICAgICAgICA8L3NwYW4+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJyb3diYWxhbmNlaXRlbVwiPlxuICAgICAgICA8bGFiZWw+0KHQtdCz0L7QtNC90Y88L2xhYmVsPlxuICAgICAgICA8YnIgLz5cbiAgICAgICAgPHNwYW5cbiAgICAgICAgICBjbGFzcz1cImlubGluZS1ibG9jayBiZy1ncmF5LTIwMCByb3VuZGVkLWZ1bGwgcHgtMyBweS0xIHRleHQtc21cbiAgICAgICAgICBmb250LXNlbWlib2xkIHRleHQtZ3JheS03MDBcIlxuICAgICAgICA+XG4gICAgICAgICAge2JvdGZpbmFuY2UuZGVwb31cbiAgICAgICAgPC9zcGFuPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuICA8ZGl2IGNsYXNzPVwieWVsb3drb2JcIj5cbiAgICA8ZGl2IGNsYXNzPVwicm93XCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2VudGVyZWRpdGVtXCI+XG4gICAgICAgIDxsYWJlbD7Qn9GA0LjQsdGL0LvRjCDQstGB0LXQs9C+PC9sYWJlbD5cbiAgICAgICAgPGJyIC8+XG4gICAgICAgIDxzcGFuPntwcm9maXRzdW19PC9zcGFuPlxuICAgICAgICA8YnIgLz5cbiAgICAgICAgPHNwYW4+KHtwcm9maXRzdW1wcm9jfSAlKTwvc3Bhbj5cbiAgICAgICAgPGJyIC8+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjZW50ZXJlZGl0ZW1cIj5cbiAgICAgICAgPGxhYmVsPtCf0YDQuNCx0YvQu9GMINGB0LXQs9C+0LTQvdGPPC9sYWJlbD5cbiAgICAgICAgPGJyIC8+XG4gICAgICAgIDxzcGFuPntzYWxlc3RvZGF5c3VtLnRvRml4ZWQoYm90c2V0dGluZ3MuZGlnaXRwcmljZSl9PC9zcGFuPlxuICAgICAgICA8YnIgLz5cbiAgICAgICAgPHNwYW4+KHtwcm9maXR0b2RheXByb2N9ICUpPC9zcGFuPlxuICAgICAgICA8YnIgLz5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbiAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgIDxkaXYgY2xhc3M9XCJjZW50ZXJlZGl0ZW1cIj5cbiAgICAgIDx0YWJsZSBjbGFzcz1cImJvcmRlcm51bGxcIj5cbiAgICAgICAgPHRyIGNsYXNzPVwiYm9yZGVybnVsbFwiPlxuICAgICAgICAgIDx0ZCBjbGFzcz1cImNlbGxsZWZ0XCI+XG4gICAgICAgICAgICA8bGFiZWw+e2JvdHNldHRpbmdzLnF1b3RhY29pbn0g0LIg0L3QsNC70LjRh9C40Lg8L2xhYmVsPlxuICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgPHRkIGNsYXNzPVwiY2VsbGxlZnQgYm9yZGVybnVsbFwiPntib3RmaW5hbmNlLnF1b3RhbmFsfTwvdGQ+XG4gICAgICAgICAgPHRkIHJvd3NwYW49XCIyXCIgY2xhc3M9XCJib3JkZXJib290b20gYm9yZGVybGVmdFwiPlxuICAgICAgICAgICAge3F1b3Rhc3VtLnRvRml4ZWQoYm90c2V0dGluZ3MuZGlnaXRxKX1cbiAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgKHsobGFzdF9wcmljZSAqIHF1b3Rhc3VtKS50b0ZpeGVkKGJvdHNldHRpbmdzLmRpZ2l0cSl9IHtib3RzZXR0aW5ncy5iYXNlY29pbn0pXG4gICAgICAgICAgPC90ZD5cbiAgICAgICAgPC90cj5cbiAgICAgICAgPHRyPlxuICAgICAgICAgIDx0ZCBjbGFzcz1cImJvcmRlcmJvb3RvbSBjZWxsbGVmdFwiPlxuICAgICAgICAgICAgPGxhYmVsPntib3RzZXR0aW5ncy5xdW90YWNvaW59INCyINC+0YDQtNC10YDQsNGFPC9sYWJlbD5cbiAgICAgICAgICA8L3RkPlxuICAgICAgICAgIDx0ZCBjbGFzcz1cImJvcmRlcmJvb3RvbSBjZWxsbGVmdFwiPntib3RmaW5hbmNlLnF1b3RhaW5vcmRlcnN9PC90ZD5cbiAgICAgICAgPC90cj5cbiAgICAgICAgPHRyPlxuICAgICAgICAgIDx0ZCBjbGFzcz1cImNlbGxsZWZ0XCI+XG4gICAgICAgICAgICA8bGFiZWw+e2JvdHNldHRpbmdzLmJhc2Vjb2lufSDQsiDQvdCw0LvQuNGH0LjQuDwvbGFiZWw+XG4gICAgICAgICAgPC90ZD5cbiAgICAgICAgICA8dGQgY2xhc3M9XCJjZWxsbGVmdCBib3JkZXJudWxsXCI+XG4gICAgICAgICAgICB7KGJvdGZpbmFuY2UuYmFzZW5hbCAqIDEpLnRvRml4ZWQoYm90c2V0dGluZ3MuZGlnaXRwcmljZSl9XG4gICAgICAgICAgPC90ZD5cbiAgICAgICAgICA8dGQgcm93c3Bhbj1cIjJcIiBjbGFzcz1cImJvcmRlcmxlZnRcIj5cbiAgICAgICAgICAgIHtiYXNlc3VtLnRvRml4ZWQoYm90c2V0dGluZ3MuZGlnaXRwcmljZSl9XG4gICAgICAgICAgPC90ZD5cbiAgICAgICAgPC90cj5cbiAgICAgICAgPHRyPlxuICAgICAgICAgIDx0ZCBjbGFzcz1cImNlbGxsZWZ0XCI+XG4gICAgICAgICAgICA8bGFiZWw+e2JvdHNldHRpbmdzLmJhc2Vjb2lufSDQsiDQvtGA0LTQtdGA0LDRhTwvbGFiZWw+XG4gICAgICAgICAgPC90ZD5cbiAgICAgICAgICA8dGQgY2xhc3M9XCJjZWxsbGVmdFwiPntib3RmaW5hbmNlLmJhc2Vpbm9yZGVyc308L3RkPlxuICAgICAgICA8L3RyPlxuICAgICAgPC90YWJsZT5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG4gIDxkaXYgY2xhc3M9XCJ5ZWxvd2tvYlwiPlxuICAgIDxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJsZWZ0aXRlbVwiPlxuICAgICAgICA8bGFiZWw+0J/RgNC+0LTQsNC20Lg8L2xhYmVsPlxuICAgICAgICA8YnIgLz5cbiAgICAgICAgPGxhYmVsPtCf0YDQvtC00LDQttC4INGB0LXQs9C+0LTQvdGPPC9sYWJlbD5cbiAgICAgICAgPGJyIC8+XG4gICAgICAgIDxsYWJlbD7QodGALiDQv9GA0LjQsdGL0LvRjCDQsiDRgdC00LXQu9C60LU8L2xhYmVsPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwicmlnaHRpdGVtXCI+XG4gICAgICAgIHtzYWxlc2FsbH1cbiAgICAgICAgPGJyIC8+XG4gICAgICAgIDxzdHJvbmc+e3NhbGVzdG9kYXl9PC9zdHJvbmc+XG4gICAgICAgICh7c2FsZXN0b2RheXN1bS50b0ZpeGVkKGJvdHNldHRpbmdzLmRpZ2l0cHJpY2UpfSB7Ym90c2V0dGluZ3MuYmFzZWNvaW59KVxuICAgICAgICA8YnIgLz5cbiAgICAgICAgeyhzYWxlc2FsbHN1bSAvIHNhbGVzYWxsIHx8IDApLnRvRml4ZWQoYm90c2V0dGluZ3MuZGlnaXRwcmljZSl9XG4gICAgICAgIHtib3RzZXR0aW5ncy5iYXNlY29pbn1cbiAgICAgIDwvZGl2PlxuXG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuICA8ZGl2IGNsYXNzPVwieWVsb3drb2JcIj5cbiAgICA8ZGl2IGNsYXNzPVwicm93XCI+XG4gICAgICA8ZGl2IGNsYXNzPVwibGVmdGl0ZW1cIj5cbiAgICAgICAgPGxhYmVsPtCe0YLQutGA0YvRgtGL0YUg0YHQtNC10LvQvtC6PC9sYWJlbD5cbiAgICAgICAgPGJyIC8+XG4gICAgICAgIDxsYWJlbD7QodGA0LXQtNC90Y/RjyDRhtC10L3QsCDQt9Cw0LrRg9C/0LrQuDwvbGFiZWw+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJyaWdodGl0ZW1cIj5cbiAgICAgICAge29wZW5mbG9vcnMuY291bnR9XG4gICAgICAgIDxiciAvPlxuICAgICAgICB7b3BlbmZsb29ycy5zcHJpY2V9IHtib3RzZXR0aW5ncy5iYXNlY29pbn1cbiAgICAgIDwvZGl2PlxuXG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuICA8YnIgLz5cbiAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgIDxkaXYgY2xhc3M9XCJsZWZ0aXRlbVwiPlxuICAgICAgPGxhYmVsPntib3Rvbm9mZiA/ICfQktC60LvRjtGH0LXQvScgOiAn0JLRi9C60LvRjtGH0LXQvSd9PC9sYWJlbD5cbiAgICAgIDxiciAvPlxuICAgICAgPFN3aXRjaCBiaW5kOnZhbHVlPXtib3Rvbm9mZn0gLz5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwicmlnaHRpdGVtXCI+XG4gICAgICA8bGFiZWw+0JfQsNC/0YDQtdGCINC90LAg0LfQsNC60YPQvzwvbGFiZWw+XG4gICAgICA8YnIgLz5cbiAgICAgIDxTd2l0Y2hcbiAgICAgICAgY2xhc3Nlcz1cImlubGluZS1mbGV4IGl0ZW1zLXJpZ2h0IG1iLTIgY3Vyc29yLXBvaW50ZXIgei0xMFwiXG4gICAgICAgIGJpbmQ6dmFsdWU9e2JvdHNldHRpbmdzLmhhbmR5emFwcmV0bmF6YWt1cH1cbiAgICAgIC8+XG4gICAgPC9kaXY+XG5cbiAgPC9kaXY+XG5cbiAgPCEtLSAgICAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwibGVmdGl0ZW1cIj5cbiAgICAgICAgICAgIDxUZXh0RmllbGQgb3V0bGluZWQgYmluZDp2YWx1ZT17Ym90c2V0dGluZ3MucHJpY2Vmb3J3YWtlfSAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInJpZ2h0aXRlbWxhYmVsXCI+XG4gICAgICAgICAgICA8bGFiZWw+0JLQutC70Y7Rh9C40YLRjCDQutC+0LPQtNCwINGG0LXQvdCwINC/0LXRgNC10YHQtdGH0LXRgiDRg9GA0L7QstC10L3RjDwvbGFiZWw+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PiAtLT5cblxuICA8ZGl2IGNsYXNzPVwicm93XCI+XG4gICAgPGRpdiBjbGFzcz1cImxlZnRpdGVtXCI+XG4gICAgICA8bGFiZWw+0J7QsdGK0LXQvCDQvtGA0LTQtdGA0LA8L2xhYmVsPlxuICAgICAgPGJyIC8+XG4gICAgICB+IHtvcmRlcnNpemVpbnF1b3RhfSB7Ym90c2V0dGluZ3MucXVvdGFjb2lufSwge29yZGVyc2l6ZWluYmFzZX0ge2JvdHNldHRpbmdzLmJhc2Vjb2lufVxuICAgIDwvZGl2PlxuICAgICZuYnNwOyZuYnNwO1xuICAgIDxkaXYgY2xhc3M9XCJyaWdodGl0ZW1cIj5cbiAgICAgIDxUZXh0RmllbGRcbiAgICAgICAgbGFiZWw9XCIlINC+0YIg0LTQtdC/0L5cIlxuICAgICAgICBvdXRsaW5lZFxuICAgICAgICBiaW5kOnZhbHVlPXtib3RzZXR0aW5ncy5vcmRlcnNpemV9XG4gICAgICAgIHNpemU9XCIxMFwiXG4gICAgICAvPlxuXG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuICA8ZGl2IGNsYXNzPVwicm93XCI+XG4gICAgPGRpdiBjbGFzcz1cImxlZnRpdGVtXCI+XG4gICAgICA8VGV4dEZpZWxkIGxhYmVsPVwiTUExLCDQvNC40L1cIiBvdXRsaW5lZCBiaW5kOnZhbHVlPXtib3RzZXR0aW5ncy5tYTF9IC8+XG4gICAgPC9kaXY+XG4gICAgJm5ic3A7Jm5ic3A7XG4gICAgPGRpdiBjbGFzcz1cInJpZ2h0aXRlbVwiPlxuICAgICAgPFRleHRGaWVsZCBsYWJlbD1cIk1BMiwg0LzQuNC9XCIgb3V0bGluZWQgYmluZDp2YWx1ZT17Ym90c2V0dGluZ3MubWEyfSAvPlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbiAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgIDxkaXYgY2xhc3M9XCJsZWZ0aXRlbSBwYWR0b3A1XCI+XG4gICAgICA8bGFiZWw+0J3QtSDQt9Cw0LrRg9C/0LDRgtGMLCDQtdGB0LvQuCDRhtC10L3QsCDQsdC+0LvRjNGI0LU8L2xhYmVsPlxuICAgIDwvZGl2PlxuICAgICZuYnNwOyZuYnNwO1xuICAgIDxkaXYgY2xhc3M9XCJyaWdodGl0ZW1cIj5cbiAgICAgIDxUZXh0RmllbGRcbiAgICAgICAgbGFiZWw9XCJcIlxuICAgICAgICBvdXRsaW5lZFxuICAgICAgICBiaW5kOnZhbHVlPXtib3RzZXR0aW5ncy5tYXhwcmljZWZvcnpha3VwfVxuICAgICAgICBzaXplPVwiMTBcIlxuICAgICAgLz5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG5cbiAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgIDxkaXYgY2xhc3M9XCJsZWZ0aXRlbSBwYWR0b3A1XCI+XG4gICAgICA8bGFiZWw+0J3QtSDQt9Cw0LrRg9C/0LDRgtGMLCDQtdGB0LvQuCDRhtC10L3QsCDQvNC10L3RjNGI0LU8L2xhYmVsPlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJyaWdodGl0ZW1cIj5cbiAgICAgIDxUZXh0RmllbGRcbiAgICAgICAgbGFiZWw9XCJcIlxuICAgICAgICBvdXRsaW5lZFxuICAgICAgICBiaW5kOnZhbHVlPXtib3RzZXR0aW5ncy5taW5wcmljZWZvcnpha3VwfVxuICAgICAgICBzaXplPVwiMTBcIlxuICAgICAgLz5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG4gIDxCdXR0b24gb246Y2xpY2s9e3NhdmVzZXR0aW5nc30gaHJlZj1cIi9cIj7QodC+0YXRgNCw0L3QuNGC0Yw8L0J1dHRvbj5cbiAgPGJyIC8+XG4gIDxiciAvPlxuICA8QnV0dG9uIGNvbG9yPVwiYWxlcnRcIiBvbjpjbGljaz17cGFuaWNzYWxlfT5QQU5JQ1NBTEU8L0J1dHRvbj5cbiAgPGJyIC8+XG4gIDxiciAvPlxuICA8QnV0dG9uIGNvbG9yPVwiYWxlcnRcIiBvbjpjbGljaz17cmVzZXRzZXR0aW5nc30+XG4gICAg0KHQsdGA0L7RgdC40YLRjCDQuiDRgdGC0LDRgNGC0L7QstGL0Lwg0L3QsNGB0YLRgNC+0LnQutCw0LxcbiAgPC9CdXR0b24+XG4gIDxiciAvPlxuICA8YnIgLz5cbiAgPEJ1dHRvbiBjb2xvcj1cImFsZXJ0XCIgb246Y2xpY2s9e2RlbGV0ZWJvdH0gaHJlZj1cIi9cIj7Qo9C00LDQu9C40YLRjDwvQnV0dG9uPlxuXG48L21haW4+XG5cbjxzdHlsZSB0eXBlPVwidGV4dC9zY3NzXCI+XG4gIC5mb29scm93IHtcbiAgICB3aWR0aDogNDAwcHg7XG4gIH1cbiAgLnBhZHRvcDUge1xuICAgIHBhZGRpbmctdG9wOiAxNHB4O1xuICB9XG4gIC55ZWxvd2tvYiB7XG4gICAgYm9yZGVyOiAxcHggc29saWQgcmdiYSgyMzMsIDIyOSwgMTMyLCAwLjc0KTtcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgIGJveC1zaGFkb3c6IDBweCAzcHggNXB4IHJnYmEoMjA5LCAxOTIsIDEwNCwgMC4wNik7XG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xuICAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xuICAgIG1hcmdpbi1yaWdodDogYXV0bztcbiAgICBtYXgtd2lkdGg6IDQzMHB4O1xuICAgIGxpbmUtaGVpZ2h0OiAxLjdlbTtcbiAgICBtYXJnaW4tdG9wOiAxNHB4O1xuICAgIHBhZGRpbmctdG9wOiA1cHg7XG4gICAgcGFkZGluZy1sZWZ0OiA3cHg7XG4gICAgcGFkZGluZy1yaWdodDogN3B4O1xuICB9XG4gIC55ZWxvd2tvYjpob3ZlciB7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xuICB9XG4gIHRhYmxlIHtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgd2lkdGg6IDQwMHB4O1xuICAgIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XG4gICAgYm9yZGVyOiAwcHggc29saWQ7XG4gICAgbWFyZ2luLXRvcDogMTRweDtcbiAgfVxuICB0ZCB7XG4gICAgcGFkZGluZzogN3B4IDdweCA3cHggMHB4O1xuICB9XG4gIHRkOmZpcnN0LWNoaWxkIHtcbiAgICBib3JkZXItcmlnaHQ6IDBweCBzb2xpZDtcbiAgfVxuICAuY2VsbGxlZnQge1xuICAgIHRleHQtYWxpZ246IGxlZnQ7XG4gIH1cbiAgLmJvcmRlcmJvb3RvbSB7XG4gICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkO1xuICB9XG4gIC5ib3JkZXJsZWZ0IHtcbiAgICBib3JkZXItbGVmdDogMXB4IHNvbGlkO1xuICB9XG4gIC5ib3JkZXJudWxsIHtcbiAgICBib3JkZXI6IDBweCBzb2xpZDtcbiAgfVxuICBsYWJlbCB7XG4gICAgbWFyZ2luLWJvdHRvbTogN3B4O1xuICAgIGNvbG9yOiByZ2IoMTI2LCAxMjYsIDEyNik7XG4gIH1cbiAgLmZvb2xyb3cge1xuICAgIHdpZHRoOiA0MDBweDtcbiAgfVxuXG4gIC5yb3cge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgbWF4LXdpZHRoOiA0MDBweDtcbiAgICBtYXJnaW46IGF1dG87XG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgIG1hcmdpbi1ib3R0b206IDVweDtcbiAgfVxuICAucm93YmFsYW5jZSB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBtYXgtd2lkdGg6IDQwMHB4O1xuICAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICBhbGlnbi1pdGVtczogZmxleC1lbmQ7XG4gIH1cbiAgLnJvd2JhbGFuY2VpdGVtIHtcbiAgICBwYWRkaW5nLWxlZnQ6IDEwcHg7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICB9XG4gIC5sZWZ0aXRlbSB7XG4gICAgYm9yZGVyOiAwcHggc29saWQ7XG4gICAgdGV4dC1hbGlnbjogbGVmdDtcbiAgfVxuICAucmlnaHRpdGVtIHtcbiAgICBib3JkZXI6IDBweCBzb2xpZDtcbiAgICB0ZXh0LWFsaWduOiByaWdodDtcbiAgfVxuICAuY2VudGVyZWRpdGVtIHtcbiAgICBib3JkZXI6IDBweCBzb2xpZDtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIH1cbiAgbWFpbiB7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIHBhZGRpbmc6IDBweDtcbiAgfVxuPC9zdHlsZT5cbiIsIjxzY3JpcHQ+XG4gICAgaW1wb3J0IEJ1dHRvbiBmcm9tICdzbWVsdGUvc3JjL2NvbXBvbmVudHMvQnV0dG9uJztcbiAgICBpbXBvcnQgTWVudVVzZXIgZnJvbSAnLi9NZW51VXNlci5zdmVsdGUnO1xuICAgIGltcG9ydCB7IHNpZ25PdXQgfSBmcm9tICcuLi9maXJlYmFzZSc7XG4gICAgLy8vaW1wb3J0IExpc3QgZnJvbSAnc21lbHRlL3NyYy9jb21wb25lbnRzL0xpc3QnO1xuXG4gICAgZXhwb3J0IGxldCBkaXNwbGF5TmFtZTtcbiAgICBleHBvcnQgbGV0IHBob3RvVVJMO1xuICAgIC8vZXhwb3J0IGxldCB1aWQ7XG5cbiAgICBsZXQgb3BlbiA9IGZhbHNlO1xuPC9zY3JpcHQ+XG5cbjxzdHlsZT5cbiAgICBidXR0b246YWN0aXZlLFxuICAgIGJ1dHRvbjpmb2N1cyB7XG4gICAgICAgIG91dGxpbmU6IG5vbmU7XG4gICAgfVxuICAgIGJ1dHRvbjo6LW1vei1mb2N1cy1pbm5lciB7XG4gICAgICAgIGJvcmRlcjogMDtcbiAgICB9XG5cbiAgICAubWVudSB7XG4gICAgICAgIHdpZHRoOiBhdXRvO1xuICAgICAgICBtaW4td2lkdGg6IGF1dG87XG4gICAgICAgIG1heC13aWR0aDogMTRyZW07XG4gICAgICAgIG1hcmdpbi1sZWZ0OiAtMTJyZW07XG5cbiAgICAgICAgei1pbmRleDogMTAwMDtcbiAgICAgICAgcGFkZGluZzogMC41cmVtO1xuXG4gICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICM4NTg5OGI7XG4gICAgICAgIGJveC1zaGFkb3c6IDAgMnB4IDhweCAwIHJnYmEoMCwgMCwgMCwgMC4xNSk7XG4gICAgICAgIC1tb3otYm94LXNoYWRvdzogMCAycHggOHB4IDAgcmdiYSgwLCAwLCAwLCAwLjE1KTtcbiAgICAgICAgLXdlYmtpdC1ib3gtc2hhZG93OiAwIDJweCA4cHggMCByZ2JhKDAsIDAsIDAsIDAuMTUpO1xuXG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDVweDtcbiAgICAgICAgY29sb3I6ICNlYmViZWI7XG4gICAgfVxuICAgIC5teS0xIHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcbiAgICB9XG4gICAgLmZpbGwtY3VycmVudDpob3ZlciB7XG4gICAgICAgIGZpbGw6ICNmMGI5MGI7XG4gICAgfVxuPC9zdHlsZT5cblxuPE1lbnVVc2VyIGJpbmQ6b3Blbj5cblxuICAgIDxkaXYgY2xhc3M9XCJiZy1kYXJrLTQwMCBkYXJrOmJnLWRhcmstNDAwIG1lbnVcIj5cblxuICAgICAgICA8aW1nIHNyYz17cGhvdG9VUkx9IGNsYXNzPVwiaC0xMCB3LTEwIHJvdW5kZWQtZnVsbCBteC01XCIgYWx0PVwidXNlciBhdmF0YXJcIiAvPlxuICAgICAgICB7ZGlzcGxheU5hbWV9XG4gICAgICAgIDxociBjbGFzcz1cInRleHQtZGFyay03MDAgbS0yXCIgLz5cblxuICAgICAgICA8cD7QkdCw0LvQsNC90YE6IDEwMDAwMCQ8L3A+XG4gICAgICAgIDxociBjbGFzcz1cInRleHQtZGFyay03MDAgbS0yXCIgLz5cbiAgICAgICAgPGEgaHJlZj1cInNldHRpbmdzXCI+0J3QsNGB0YLRgNC+0LnQutC4PC9hPlxuICAgICAgICA8YnIgLz5cbiAgICAgICAgPGJyIC8+XG4gICAgICAgIDxidXR0b24gY2xhc3M9XCJiZy1wcmltYXJ5LTUwMCBob3ZlcjpiZy1wcmltYXJ5LTMwMCByb3VuZGVkLWxnIHB4LTRcIiBvbjpjbGljaz17c2lnbk91dH0+XG4gICAgICAgICAgICBMb2dvdXRcbiAgICAgICAgPC9idXR0b24+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBzbG90PVwiYWN0aXZhdG9yXCIgY2xhc3M9XCJteS0xXCI+XG4gICAgICAgIDxidXR0b24gb246Y2xpY2s9eygpID0+IChvcGVuID0gIW9wZW4pfT5cbiAgICAgICAgICAgIDxzdmcgY2xhc3M9XCJmaWxsLWN1cnJlbnQgdy02IGgtNlwiIHZpZXdCb3g9XCIwIDAgMjAgMjBcIj5cbiAgICAgICAgICAgICAgICA8cGF0aFxuICAgICAgICAgICAgICAgICAgICBmaWxsLXJ1bGU9XCJldmVub2RkXCJcbiAgICAgICAgICAgICAgICAgICAgZD1cIk0xMCA5YTMgMyAwIDEwMC02IDMgMyAwIDAwMCA2em0tNyA5YTcgNyAwIDExMTQgMEgzelwiXG4gICAgICAgICAgICAgICAgICAgIGNsaXAtcnVsZT1cImV2ZW5vZGRcIiAvPlxuICAgICAgICAgICAgPC9zdmc+XG4gICAgICAgIDwvYnV0dG9uPlxuICAgIDwvZGl2PlxuPC9NZW51VXNlcj5cbiIsIjxzY3JpcHQ+XG4gICAgZXhwb3J0IGxldCBwcm9jdmxvemg7XG4gICAgZXhwb3J0IGxldCBpZDtcbiAgICBleHBvcnQgbGV0IHByY3ZzdHI7XG4gICAgZXhwb3J0IGxldCBvbm9mZjtcbiAgICAkOiBpZiAocHJvY3Zsb3poKSB7XG4gICAgICAgIHByY3ZzdHIgPSBwcm9jdmxvemggKyAnJSc7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcHJjdnN0ciA9ICcwJztcbiAgICB9XG5cbiAgICBsZXQgb3BhY2l0eTtcbiAgICBjb25zb2xlLmxvZyhvbm9mZik7XG4gICAgaWYgKG9ub2ZmID09IHRydWUgfHwgaWQgPT0gJ3N1bXByb2N2bG96aCcpIHtcbiAgICAgICAgb3BhY2l0eSA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgb3BhY2l0eSA9IDE7XG4gICAgfVxuPC9zY3JpcHQ+XG5cbjxzdHlsZT5cbiAgICBtYWluIHtcbiAgICAgICAgd2lkdGg6IGF1dG87XG4gICAgfVxuPC9zdHlsZT5cblxuPG1haW4+XG4gICAgPHN2Z1xuICAgICAgICB3aWR0aD1cIjEwMCVcIlxuICAgICAgICBoZWlnaHQ9XCIxMDAlXCJcbiAgICAgICAgdmlld0JveD1cIjAgMCA0NTIgMTI0XCJcbiAgICAgICAgZmlsbD1cIm5vbmVcIlxuICAgICAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgICAgICAgc3R5bGU9XCJmaWx0ZXI6IGdyYXlzY2FsZSh7b3BhY2l0eX0pXCI+XG5cbiAgICAgICAgPHBhdGhcbiAgICAgICAgICAgIGZpbGwtcnVsZT1cImV2ZW5vZGRcIlxuICAgICAgICAgICAgY2xpcC1ydWxlPVwiZXZlbm9kZFwiXG4gICAgICAgICAgICBkPVwiTTM1LjcyMjMgNS43NzIzNkMzNS43MjIzIDIuNTg0MzggMzMuMTM3OSAwIDI5Ljk0OTkgMFYwQzI2Ljc2MTkgMCAyNC4xNzc1IDIuNTg0MzdcbiAgICAgICAgICAgIDI0LjE3NzUgNS43NzIzNlYxMTguMjI4QzI0LjE3NzUgMTIxLjQxNiAyNi43NjE5IDEyNCAyOS45NDk5IDEyNFYxMjRDMzMuMTM3OSAxMjQgMzUuNzIyM1xuICAgICAgICAgICAgMTIxLjQxNiAzNS43MjIzIDExOC4yMjhWNS43NzIzNlpNNTMuMDM5IDBDNDkuODUxMSAwIDQ3LjI2NjggMi41ODQzMSA0Ny4yNjY4XG4gICAgICAgICAgICA1Ljc3MjIxVjExOC4yMjhDNDcuMjY2OCAxMjEuNDE2IDQ5Ljg1MTEgMTI0IDUzLjAzOSAxMjRWMTI0QzU2LjIyNjkgMTI0IDU4LjgxMTIgMTIxLjQxNlxuICAgICAgICAgICAgNTguODExMiAxMTguMjI4VjUuNzcyMjFDNTguODExMiAyLjU4NDMgNTYuMjI2OSAwIDUzLjAzOSAwVjBaTTgxLjkwMDUgMTE4LjIyOEM4MS45MDA1XG4gICAgICAgICAgICAxMjEuNDE2IDc5LjMxNjEgMTI0IDc2LjEyODEgMTI0VjEyNEM3Mi45NDAxIDEyNCA3MC4zNTU4IDEyMS40MTYgNzAuMzU1OFxuICAgICAgICAgICAgMTE4LjIyOFY1Ljc3MjM2QzcwLjM1NTggMi41ODQzOCA3Mi45NDAxIDAgNzYuMTI4MSAwVjBDNzkuMzE2MSAwIDgxLjkwMDUgMi41ODQzNyA4MS45MDA1XG4gICAgICAgICAgICA1Ljc3MjM2VjExOC4yMjhaTTkzLjQ0NTEgMTE4LjIyOEM5My40NDUxIDEyMS40MTYgOTYuMDI5NCAxMjQgOTkuMjE3MyAxMjRWMTI0QzEwMi40MDUgMTI0XG4gICAgICAgICAgICAxMDQuOTg5IDEyMS40MTYgMTA0Ljk4OSAxMTguMjI4VjUuNzcyMkMxMDQuOTg5IDIuNTg0MyAxMDIuNDA1IDAgOTkuMjE3MyAwVjBDOTYuMDI5NCAwXG4gICAgICAgICAgICA5My40NDUxIDIuNTg0MyA5My40NDUxIDUuNzcyMlYxMTguMjI4Wk0xMjguMDc5IDExOC4yMjhDMTI4LjA3OSAxMjEuNDE2IDEyNS40OTQgMTI0XG4gICAgICAgICAgICAxMjIuMzA2IDEyNFYxMjRDMTE5LjExOCAxMjQgMTE2LjUzNCAxMjEuNDE2IDExNi41MzQgMTE4LjIyOFY1Ljc3MjM2QzExNi41MzQgMi41ODQzOFxuICAgICAgICAgICAgMTE5LjExOCAwIDEyMi4zMDYgMFYwQzEyNS40OTQgMCAxMjguMDc5IDIuNTg0MzcgMTI4LjA3OSA1Ljc3MjM2VjExOC4yMjhaTTEzOS42MjNcbiAgICAgICAgICAgIDExOC4yMjhDMTM5LjYyMyAxMjEuNDE2IDE0Mi4yMDggMTI0IDE0NS4zOTYgMTI0VjEyNEMxNDguNTgzIDEyNCAxNTEuMTY4IDEyMS40MTYgMTUxLjE2OFxuICAgICAgICAgICAgMTE4LjIyOFY1Ljc3MjIxQzE1MS4xNjggMi41ODQzMSAxNDguNTgzIDAgMTQ1LjM5NiAwVjBDMTQyLjIwOCAwIDEzOS42MjMgMi41ODQzMSAxMzkuNjIzXG4gICAgICAgICAgICA1Ljc3MjIxVjExOC4yMjhaTTE3NC4yNTcgMTE4LjIyOEMxNzQuMjU3IDEyMS40MTYgMTcxLjY3MyAxMjQgMTY4LjQ4NSAxMjRWMTI0QzE2NS4yOTcgMTI0XG4gICAgICAgICAgICAxNjIuNzEyIDEyMS40MTYgMTYyLjcxMiAxMTguMjI4VjUuNzcyMzdDMTYyLjcxMiAyLjU4NDM4IDE2NS4yOTcgMCAxNjguNDg1IDBWMEMxNzEuNjczIDBcbiAgICAgICAgICAgIDE3NC4yNTcgMi41ODQzOCAxNzQuMjU3IDUuNzcyMzdWMTE4LjIyOFpNMTg1LjgwMiAxMTguMjI4QzE4NS44MDIgMTIxLjQxNiAxODguMzg2IDEyNFxuICAgICAgICAgICAgMTkxLjU3NCAxMjRWMTI0QzE5NC43NjIgMTI0IDE5Ny4zNDYgMTIxLjQxNiAxOTcuMzQ2IDExOC4yMjhWNS43NzIyMUMxOTcuMzQ2IDIuNTg0MzFcbiAgICAgICAgICAgIDE5NC43NjIgMCAxOTEuNTc0IDBWMEMxODguMzg2IDAgMTg1LjgwMiAyLjU4NDMxIDE4NS44MDIgNS43NzIyMVYxMTguMjI4Wk0yMjAuNDM1XG4gICAgICAgICAgICAxMTguMjI4QzIyMC40MzUgMTIxLjQxNiAyMTcuODUxIDEyNCAyMTQuNjYzIDEyNFYxMjRDMjExLjQ3NSAxMjQgMjA4Ljg5MSAxMjEuNDE2IDIwOC44OTFcbiAgICAgICAgICAgIDExOC4yMjhWNS43NzIyMUMyMDguODkxIDIuNTg0MzEgMjExLjQ3NSAwIDIxNC42NjMgMFYwQzIxNy44NTEgMCAyMjAuNDM1IDIuNTg0MzEgMjIwLjQzNVxuICAgICAgICAgICAgNS43NzIyMVYxMTguMjI4Wk0yMzEuOTc5IDExOC4yMjhDMjMxLjk3OSAxMjEuNDE2IDIzNC41NjQgMTI0IDIzNy43NTIgMTI0VjEyNEMyNDAuOTQgMTI0XG4gICAgICAgICAgICAyNDMuNTI0IDEyMS40MTYgMjQzLjUyNCAxMTguMjI4VjUuNzcyMzdDMjQzLjUyNCAyLjU4NDM4IDI0MC45NCAwIDIzNy43NTIgMFYwQzIzNC41NjQgMFxuICAgICAgICAgICAgMjMxLjk3OSAyLjU4NDM4IDIzMS45NzkgNS43NzIzN1YxMTguMjI4Wk0yNjYuNjEzIDExOC4yMjhDMjY2LjYxMyAxMjEuNDE2IDI2NC4wMjkgMTI0XG4gICAgICAgICAgICAyNjAuODQxIDEyNFYxMjRDMjU3LjY1MyAxMjQgMjU1LjA2OSAxMjEuNDE2IDI1NS4wNjkgMTE4LjIyOFY1Ljc3MjIyQzI1NS4wNjkgMi41ODQzMVxuICAgICAgICAgICAgMjU3LjY1MyAwIDI2MC44NDEgMFYwQzI2NC4wMjkgMCAyNjYuNjEzIDIuNTg0MzEgMjY2LjYxMyA1Ljc3MjIyVjYyVjExOC4yMjhaTTI3OC4xNThcbiAgICAgICAgICAgIDExOC4yMjhDMjc4LjE1OCAxMjEuNDE2IDI4MC43NDIgMTI0IDI4My45MyAxMjRWMTI0QzI4Ny4xMTggMTI0IDI4OS43MDIgMTIxLjQxNiAyODkuNzAyXG4gICAgICAgICAgICAxMTguMjI4VjUuNzcyMzdDMjg5LjcwMiAyLjU4NDM4IDI4Ny4xMTggMCAyODMuOTMgMFYwQzI4MC43NDIgMCAyNzguMTU4IDIuNTg0MzggMjc4LjE1OFxuICAgICAgICAgICAgNS43NzIzN1YxMTguMjI4Wk0zMTIuNzkxIDExOC4yMjhDMzEyLjc5MSAxMjEuNDE2IDMxMC4yMDcgMTI0IDMwNy4wMTkgMTI0VjEyNEMzMDMuODMxIDEyNFxuICAgICAgICAgICAgMzAxLjI0NyAxMjEuNDE2IDMwMS4yNDcgMTE4LjIyOFY1Ljc3MjE5QzMwMS4yNDcgMi41ODQzIDMwMy44MzEgMCAzMDcuMDE5IDBWMEMzMTAuMjA3IDBcbiAgICAgICAgICAgIDMxMi43OTEgMi41ODQzIDMxMi43OTEgNS43NzIxOVYxMTguMjI4Wk0zMjQuMzM2IDExOC4yMjhDMzI0LjMzNiAxMjEuNDE2IDMyNi45MiAxMjRcbiAgICAgICAgICAgIDMzMC4xMDggMTI0VjEyNEMzMzMuMjk2IDEyNCAzMzUuODggMTIxLjQxNiAzMzUuODggMTE4LjIyOFY1Ljc3MjJDMzM1Ljg4IDIuNTg0MyAzMzMuMjk2IDBcbiAgICAgICAgICAgIDMzMC4xMDggMFYwQzMyNi45MiAwIDMyNC4zMzYgMi41ODQzMSAzMjQuMzM2IDUuNzcyMlYxMTguMjI4Wk0zNTguOTcgMTE4LjIyOEMzNTguOTdcbiAgICAgICAgICAgIDEyMS40MTYgMzU2LjM4NSAxMjQgMzUzLjE5NyAxMjRWMTI0QzM1MC4wMDkgMTI0IDM0Ny40MjUgMTIxLjQxNiAzNDcuNDI1XG4gICAgICAgICAgICAxMTguMjI4VjUuNzcyMzdDMzQ3LjQyNSAyLjU4NDM4IDM1MC4wMDkgMCAzNTMuMTk3IDBWMEMzNTYuMzg1IDAgMzU4Ljk3IDIuNTg0MzggMzU4Ljk3XG4gICAgICAgICAgICA1Ljc3MjM3VjExOC4yMjhaTTM3MC41MTQgMTE4LjIyOEMzNzAuNTE0IDEyMS40MTYgMzczLjA5OCAxMjQgMzc2LjI4NiAxMjRWMTI0QzM3OS40NzQgMTI0XG4gICAgICAgICAgICAzODIuMDU5IDEyMS40MTYgMzgyLjA1OSAxMTguMjI4VjUuNzcyMkMzODIuMDU5IDIuNTg0MyAzNzkuNDc0IDAgMzc2LjI4NiAwVjBDMzczLjA5OCAwXG4gICAgICAgICAgICAzNzAuNTE0IDIuNTg0MzEgMzcwLjUxNCA1Ljc3MjJWMTE4LjIyOFpNNDA1LjE0OCAxMTguMjI4QzQwNS4xNDggMTIxLjQxNiA0MDIuNTY0IDEyNFxuICAgICAgICAgICAgMzk5LjM3NiAxMjRWMTI0QzM5Ni4xODggMTI0IDM5My42MDMgMTIxLjQxNiAzOTMuNjAzIDExOC4yMjhWNS43NzIzN0MzOTMuNjAzIDIuNTg0MzhcbiAgICAgICAgICAgIDM5Ni4xODggMCAzOTkuMzc2IDBWMEM0MDIuNTY0IDAgNDA1LjE0OCAyLjU4NDM4IDQwNS4xNDggNS43NzIzN1YxMTguMjI4Wk00MTYuNjkyXG4gICAgICAgICAgICAxMTguMjI4QzQxNi42OTIgMTIxLjQxNiA0MTkuMjc3IDEyNCA0MjIuNDY1IDEyNFYxMjRDNDI1LjY1MyAxMjQgNDI4LjIzNyAxMjEuNDE2IDQyOC4yMzdcbiAgICAgICAgICAgIDExOC4yMjhWNS43NzIxOUM0MjguMjM3IDIuNTg0MyA0MjUuNjUzIDAgNDIyLjQ2NSAwVjBDNDE5LjI3NyAwIDQxNi42OTIgMi41ODQzIDQxNi42OTJcbiAgICAgICAgICAgIDUuNzcyMTlWMTE4LjIyOFpNNDUxLjMyNiAxMTguMjI4QzQ1MS4zMjYgMTIxLjQxNiA0NDguNzQyIDEyNCA0NDUuNTU0IDEyNFYxMjRDNDQyLjM2NiAxMjRcbiAgICAgICAgICAgIDQzOS43ODEgMTIxLjQxNiA0MzkuNzgxIDExOC4yMjhWNS43NzIzN0M0MzkuNzgxIDIuNTg0MzggNDQyLjM2NiAwIDQ0NS41NTQgMFYwQzQ0OC43NDIgMFxuICAgICAgICAgICAgNDUxLjMyNiAyLjU4NDM4IDQ1MS4zMjYgNS43NzIzN1YxMTguMjI4Wk0xLjA4ODYyIDUuNzcyMThDMS4wODg2MiAyLjU4NDI5IDMuNjcyOTIgMFxuICAgICAgICAgICAgNi44NjA4IDBWMEMxMC4wNDg3IDAgMTIuNjMzIDIuNTg0MyAxMi42MzMgNS43NzIxOFYxMTguMjI4QzEyLjYzMyAxMjEuNDE2IDEwLjA0ODcgMTI0XG4gICAgICAgICAgICA2Ljg2MDggMTI0VjEyNEMzLjY3MjkyIDEyNCAxLjA4ODYyIDEyMS40MTYgMS4wODg2MiAxMTguMjI4VjUuNzcyMThaXCJcbiAgICAgICAgICAgIGZpbGw9XCIjRTAyOTRBXCIgLz5cbiAgICAgICAgPG1hc2tcbiAgICAgICAgICAgIGlkPVwibWFza3tpZH1cIlxuICAgICAgICAgICAgbWFzay10eXBlPVwiYWxwaGFcIlxuICAgICAgICAgICAgbWFza1VuaXRzPVwidXNlclNwYWNlT25Vc2VcIlxuICAgICAgICAgICAgeD1cIjBcIlxuICAgICAgICAgICAgeT1cIjBcIlxuICAgICAgICAgICAgd2lkdGg9XCIxMDAlXCJcbiAgICAgICAgICAgIGhlaWdodD1cIjEwMCVcIj5cbiAgICAgICAgICAgIDxyZWN0IHdpZHRoPXtwcmN2c3RyfSBoZWlnaHQ9XCIxMjRcIiBmaWxsPVwid2hpdGVcIiAvPlxuICAgICAgICA8L21hc2s+XG4gICAgICAgIDxnIG1hc2s9XCJ1cmwoI21hc2t7aWR9KVwiPlxuICAgICAgICAgICAgPHBhdGhcbiAgICAgICAgICAgICAgICBmaWxsLXJ1bGU9XCJldmVub2RkXCJcbiAgICAgICAgICAgICAgICBjbGlwLXJ1bGU9XCJldmVub2RkXCJcbiAgICAgICAgICAgICAgICBkPVwiTTM1LjcyMjMgNS43NzIzNkMzNS43MjIzIDIuNTg0MzggMzMuMTM3OSAwIDI5Ljk0OTkgMFYwQzI2Ljc2MTkgMCAyNC4xNzc1IDIuNTg0MzdcbiAgICAgICAgICAgICAgICAyNC4xNzc1IDUuNzcyMzZWMTE4LjIyOEMyNC4xNzc1IDEyMS40MTYgMjYuNzYxOSAxMjQgMjkuOTQ5OSAxMjRWMTI0QzMzLjEzNzkgMTI0XG4gICAgICAgICAgICAgICAgMzUuNzIyMyAxMjEuNDE2IDM1LjcyMjMgMTE4LjIyOFY1Ljc3MjM2Wk01My4wMzkgMEM0OS44NTExIDAgNDcuMjY2OCAyLjU4NDMxIDQ3LjI2NjhcbiAgICAgICAgICAgICAgICA1Ljc3MjIxVjExOC4yMjhDNDcuMjY2OCAxMjEuNDE2IDQ5Ljg1MTEgMTI0IDUzLjAzOSAxMjRWMTI0QzU2LjIyNjkgMTI0IDU4LjgxMTJcbiAgICAgICAgICAgICAgICAxMjEuNDE2IDU4LjgxMTIgMTE4LjIyOFY1Ljc3MjIxQzU4LjgxMTIgMi41ODQzIDU2LjIyNjkgMCA1My4wMzkgMFYwWk04MS45MDA1XG4gICAgICAgICAgICAgICAgMTE4LjIyOEM4MS45MDA1IDEyMS40MTYgNzkuMzE2MSAxMjQgNzYuMTI4MSAxMjRWMTI0QzcyLjk0MDEgMTI0IDcwLjM1NTggMTIxLjQxNlxuICAgICAgICAgICAgICAgIDcwLjM1NTggMTE4LjIyOFY1Ljc3MjM2QzcwLjM1NTggMi41ODQzOCA3Mi45NDAxIDAgNzYuMTI4MSAwVjBDNzkuMzE2MSAwIDgxLjkwMDVcbiAgICAgICAgICAgICAgICAyLjU4NDM3IDgxLjkwMDUgNS43NzIzNlYxMTguMjI4Wk05My40NDUxIDExOC4yMjhDOTMuNDQ1MSAxMjEuNDE2IDk2LjAyOTQgMTI0IDk5LjIxNzNcbiAgICAgICAgICAgICAgICAxMjRWMTI0QzEwMi40MDUgMTI0IDEwNC45ODkgMTIxLjQxNiAxMDQuOTg5IDExOC4yMjhWNS43NzIyQzEwNC45ODkgMi41ODQzIDEwMi40MDUgMFxuICAgICAgICAgICAgICAgIDk5LjIxNzMgMFYwQzk2LjAyOTQgMCA5My40NDUxIDIuNTg0MyA5My40NDUxIDUuNzcyMlYxMTguMjI4Wk0xMjguMDc5IDExOC4yMjhDMTI4LjA3OVxuICAgICAgICAgICAgICAgIDEyMS40MTYgMTI1LjQ5NCAxMjQgMTIyLjMwNiAxMjRWMTI0QzExOS4xMTggMTI0IDExNi41MzQgMTIxLjQxNiAxMTYuNTM0XG4gICAgICAgICAgICAgICAgMTE4LjIyOFY1Ljc3MjM2QzExNi41MzQgMi41ODQzOCAxMTkuMTE4IDAgMTIyLjMwNiAwVjBDMTI1LjQ5NCAwIDEyOC4wNzkgMi41ODQzN1xuICAgICAgICAgICAgICAgIDEyOC4wNzkgNS43NzIzNlYxMTguMjI4Wk0xMzkuNjIzIDExOC4yMjhDMTM5LjYyMyAxMjEuNDE2IDE0Mi4yMDggMTI0IDE0NS4zOTZcbiAgICAgICAgICAgICAgICAxMjRWMTI0QzE0OC41ODMgMTI0IDE1MS4xNjggMTIxLjQxNiAxNTEuMTY4IDExOC4yMjhWNS43NzIyMUMxNTEuMTY4IDIuNTg0MzEgMTQ4LjU4M1xuICAgICAgICAgICAgICAgIDAgMTQ1LjM5NiAwVjBDMTQyLjIwOCAwIDEzOS42MjMgMi41ODQzMSAxMzkuNjIzIDUuNzcyMjFWMTE4LjIyOFpNMTc0LjI1N1xuICAgICAgICAgICAgICAgIDExOC4yMjhDMTc0LjI1NyAxMjEuNDE2IDE3MS42NzMgMTI0IDE2OC40ODUgMTI0VjEyNEMxNjUuMjk3IDEyNCAxNjIuNzEyIDEyMS40MTZcbiAgICAgICAgICAgICAgICAxNjIuNzEyIDExOC4yMjhWNS43NzIzN0MxNjIuNzEyIDIuNTg0MzggMTY1LjI5NyAwIDE2OC40ODUgMFYwQzE3MS42NzMgMCAxNzQuMjU3XG4gICAgICAgICAgICAgICAgMi41ODQzOCAxNzQuMjU3IDUuNzcyMzdWMTE4LjIyOFpNMTg1LjgwMiAxMTguMjI4QzE4NS44MDIgMTIxLjQxNiAxODguMzg2IDEyNCAxOTEuNTc0XG4gICAgICAgICAgICAgICAgMTI0VjEyNEMxOTQuNzYyIDEyNCAxOTcuMzQ2IDEyMS40MTYgMTk3LjM0NiAxMTguMjI4VjUuNzcyMjFDMTk3LjM0NiAyLjU4NDMxIDE5NC43NjJcbiAgICAgICAgICAgICAgICAwIDE5MS41NzQgMFYwQzE4OC4zODYgMCAxODUuODAyIDIuNTg0MzEgMTg1LjgwMiA1Ljc3MjIxVjExOC4yMjhaTTIyMC40MzVcbiAgICAgICAgICAgICAgICAxMTguMjI4QzIyMC40MzUgMTIxLjQxNiAyMTcuODUxIDEyNCAyMTQuNjYzIDEyNFYxMjRDMjExLjQ3NSAxMjQgMjA4Ljg5MSAxMjEuNDE2XG4gICAgICAgICAgICAgICAgMjA4Ljg5MSAxMTguMjI4VjUuNzcyMjFDMjA4Ljg5MSAyLjU4NDMxIDIxMS40NzUgMCAyMTQuNjYzIDBWMEMyMTcuODUxIDAgMjIwLjQzNVxuICAgICAgICAgICAgICAgIDIuNTg0MzEgMjIwLjQzNSA1Ljc3MjIxVjExOC4yMjhaTTIzMS45NzkgMTE4LjIyOEMyMzEuOTc5IDEyMS40MTYgMjM0LjU2NCAxMjQgMjM3Ljc1MlxuICAgICAgICAgICAgICAgIDEyNFYxMjRDMjQwLjk0IDEyNCAyNDMuNTI0IDEyMS40MTYgMjQzLjUyNCAxMTguMjI4VjUuNzcyMzdDMjQzLjUyNCAyLjU4NDM4IDI0MC45NCAwXG4gICAgICAgICAgICAgICAgMjM3Ljc1MiAwVjBDMjM0LjU2NCAwIDIzMS45NzkgMi41ODQzOCAyMzEuOTc5IDUuNzcyMzdWMTE4LjIyOFpNMjY2LjYxM1xuICAgICAgICAgICAgICAgIDExOC4yMjhDMjY2LjYxMyAxMjEuNDE2IDI2NC4wMjkgMTI0IDI2MC44NDEgMTI0VjEyNEMyNTcuNjUzIDEyNCAyNTUuMDY5IDEyMS40MTZcbiAgICAgICAgICAgICAgICAyNTUuMDY5IDExOC4yMjhWNS43NzIyMkMyNTUuMDY5IDIuNTg0MzEgMjU3LjY1MyAwIDI2MC44NDEgMFYwQzI2NC4wMjkgMCAyNjYuNjEzXG4gICAgICAgICAgICAgICAgMi41ODQzMiAyNjYuNjEzIDUuNzcyMjNWMTE4LjIyOFpNMjc4LjE1OCAxMTguMjI4QzI3OC4xNTggMTIxLjQxNiAyODAuNzQyIDEyNCAyODMuOTNcbiAgICAgICAgICAgICAgICAxMjRWMTI0QzI4Ny4xMTggMTI0IDI4OS43MDIgMTIxLjQxNiAyODkuNzAyIDExOC4yMjhWNS43NzIzN0MyODkuNzAyIDIuNTg0MzggMjg3LjExOFxuICAgICAgICAgICAgICAgIDAgMjgzLjkzIDBWMEMyODAuNzQyIDAgMjc4LjE1OCAyLjU4NDM4IDI3OC4xNTggNS43NzIzN1YxMTguMjI4Wk0zMTIuNzkxXG4gICAgICAgICAgICAgICAgMTE4LjIyOEMzMTIuNzkxIDEyMS40MTYgMzEwLjIwNyAxMjQgMzA3LjAxOSAxMjRWMTI0QzMwMy44MzEgMTI0IDMwMS4yNDcgMTIxLjQxNlxuICAgICAgICAgICAgICAgIDMwMS4yNDcgMTE4LjIyOFY1Ljc3MjE5QzMwMS4yNDcgMi41ODQzIDMwMy44MzEgMCAzMDcuMDE5IDBWMEMzMTAuMjA3IDAgMzEyLjc5MVxuICAgICAgICAgICAgICAgIDIuNTg0MyAzMTIuNzkxIDUuNzcyMTlWMTE4LjIyOFpNMzI0LjMzNiAxMTguMjI4QzMyNC4zMzYgMTIxLjQxNiAzMjYuOTIgMTI0IDMzMC4xMDhcbiAgICAgICAgICAgICAgICAxMjRWMTI0QzMzMy4yOTYgMTI0IDMzNS44OCAxMjEuNDE2IDMzNS44OCAxMTguMjI4VjUuNzcyMkMzMzUuODggMi41ODQzIDMzMy4yOTYgMFxuICAgICAgICAgICAgICAgIDMzMC4xMDggMFYwQzMyNi45MiAwIDMyNC4zMzYgMi41ODQzMSAzMjQuMzM2IDUuNzcyMlYxMTguMjI4Wk0zNTguOTcgMTE4LjIyOEMzNTguOTdcbiAgICAgICAgICAgICAgICAxMjEuNDE2IDM1Ni4zODUgMTI0IDM1My4xOTcgMTI0VjEyNEMzNTAuMDA5IDEyNCAzNDcuNDI1IDEyMS40MTYgMzQ3LjQyNVxuICAgICAgICAgICAgICAgIDExOC4yMjhWNS43NzIzN0MzNDcuNDI1IDIuNTg0MzggMzUwLjAwOSAwIDM1My4xOTcgMFYwQzM1Ni4zODUgMCAzNTguOTcgMi41ODQzOFxuICAgICAgICAgICAgICAgIDM1OC45NyA1Ljc3MjM3VjExOC4yMjhaTTM3MC41MTQgMTE4LjIyOEMzNzAuNTE0IDEyMS40MTYgMzczLjA5OCAxMjQgMzc2LjI4NlxuICAgICAgICAgICAgICAgIDEyNFYxMjRDMzc5LjQ3NCAxMjQgMzgyLjA1OSAxMjEuNDE2IDM4Mi4wNTkgMTE4LjIyOFY1Ljc3MjJDMzgyLjA1OSAyLjU4NDMgMzc5LjQ3NCAwXG4gICAgICAgICAgICAgICAgMzc2LjI4NiAwVjBDMzczLjA5OCAwIDM3MC41MTQgMi41ODQzMSAzNzAuNTE0IDUuNzcyMlYxMTguMjI4Wk00MDUuMTQ4XG4gICAgICAgICAgICAgICAgMTE4LjIyOEM0MDUuMTQ4IDEyMS40MTYgNDAyLjU2NCAxMjQgMzk5LjM3NiAxMjRWMTI0QzM5Ni4xODggMTI0IDM5My42MDMgMTIxLjQxNlxuICAgICAgICAgICAgICAgIDM5My42MDMgMTE4LjIyOFY1Ljc3MjM3QzM5My42MDMgMi41ODQzOCAzOTYuMTg4IDAgMzk5LjM3NiAwVjBDNDAyLjU2NCAwIDQwNS4xNDhcbiAgICAgICAgICAgICAgICAyLjU4NDM4IDQwNS4xNDggNS43NzIzN1YxMTguMjI4Wk00MTYuNjkyIDExOC4yMjhDNDE2LjY5MiAxMjEuNDE2IDQxOS4yNzcgMTI0IDQyMi40NjVcbiAgICAgICAgICAgICAgICAxMjRWMTI0QzQyNS42NTMgMTI0IDQyOC4yMzcgMTIxLjQxNiA0MjguMjM3IDExOC4yMjhWNS43NzIxOUM0MjguMjM3IDIuNTg0MyA0MjUuNjUzIDBcbiAgICAgICAgICAgICAgICA0MjIuNDY1IDBWMEM0MTkuMjc3IDAgNDE2LjY5MiAyLjU4NDMgNDE2LjY5MiA1Ljc3MjE5VjExOC4yMjhaTTQ1MS4zMjZcbiAgICAgICAgICAgICAgICAxMTguMjI4QzQ1MS4zMjYgMTIxLjQxNiA0NDguNzQyIDEyNCA0NDUuNTU0IDEyNFYxMjRDNDQyLjM2NiAxMjQgNDM5Ljc4MSAxMjEuNDE2XG4gICAgICAgICAgICAgICAgNDM5Ljc4MSAxMTguMjI4VjUuNzcyMzdDNDM5Ljc4MSAyLjU4NDM4IDQ0Mi4zNjYgMCA0NDUuNTU0IDBWMEM0NDguNzQyIDAgNDUxLjMyNlxuICAgICAgICAgICAgICAgIDIuNTg0MzggNDUxLjMyNiA1Ljc3MjM3VjExOC4yMjhaTTEuMDg4NjIgNS43NzIxOEMxLjA4ODYyIDIuNTg0MjkgMy42NzI5MiAwIDYuODYwOFxuICAgICAgICAgICAgICAgIDBWMEMxMC4wNDg3IDAgMTIuNjMzIDIuNTg0MyAxMi42MzMgNS43NzIxOFYxMTguMjI4QzEyLjYzMyAxMjEuNDE2IDEwLjA0ODcgMTI0IDYuODYwOFxuICAgICAgICAgICAgICAgIDEyNFYxMjRDMy42NzI5MiAxMjQgMS4wODg2MiAxMjEuNDE2IDEuMDg4NjIgMTE4LjIyOFY1Ljc3MjE4WlwiXG4gICAgICAgICAgICAgICAgZmlsbD1cIiMwMkMwNzZcIiAvPlxuICAgICAgICA8L2c+XG5cbiAgICA8L3N2Zz5cblxuPC9tYWluPlxuIiwiPHNjcmlwdD5cbiAgaW1wb3J0IHsgY3JlYXRlRXZlbnREaXNwYXRjaGVyIH0gZnJvbSAnc3ZlbHRlJztcbiAgLy9pbXBvcnQgeyBmbHkgfSBmcm9tIFwic3ZlbHRlL3RyYW5zaXRpb25cIjtcbiAgaW1wb3J0IHsgcXVhZE91dCwgcXVhZEluIH0gZnJvbSAnc3ZlbHRlL2Vhc2luZyc7XG4gIC8vaW1wb3J0IExpc3QgZnJvbSBcIi4uL0xpc3RcIjtcbiAgLy9pbXBvcnQgVGV4dEZpZWxkIGZyb20gXCIuLi9UZXh0RmllbGRcIjtcbiAgaW1wb3J0IHsgQ2xhc3NCdWlsZGVyIH0gZnJvbSAnc21lbHRlL3NyYy91dGlscy9jbGFzc2VzLmpzJztcblxuICBjb25zdCBjbGFzc2VzRGVmYXVsdCA9IFwiYWJzb2x1dGUgY3Vyc29yLXBvaW50ZXJcIjtcbiAgY29uc3QgbGlzdENsYXNzZXNEZWZhdWx0ID0gXCJhYnNvbHV0ZSB0b3AtMyByb3VuZGVkIGVsZXZhdGlvbi0zIHotMjAgZGFyazpiZy1kYXJrLTUwMFwiO1xuXG5cbiAgZXhwb3J0IGxldCBvcGVuID0gZmFsc2U7XG5cbiAgZXhwb3J0IGxldCBjbGFzc2VzID0gY2xhc3Nlc0RlZmF1bHQ7XG4gIGV4cG9ydCBsZXQgbGlzdENsYXNzZXMgPSBsaXN0Q2xhc3Nlc0RlZmF1bHQ7XG5cblxuXG5cbiAgY29uc3QgY2IgPSBuZXcgQ2xhc3NCdWlsZGVyKCQkcHJvcHMuY2xhc3MpO1xuXG4gICQ6IGMgPSBjYlxuICAgIC5mbHVzaCgpXG4gICAgLmFkZChjbGFzc2VzLCB0cnVlLCBjbGFzc2VzRGVmYXVsdClcbiAgICAuYWRkKCQkcHJvcHMuY2xhc3MpXG4gICAgLmdldCgpO1xuXG4gIGNvbnN0IGxjYiA9IG5ldyBDbGFzc0J1aWxkZXIobGlzdENsYXNzZXMsIGxpc3RDbGFzc2VzRGVmYXVsdCk7XG5cbiAgJDogbCA9IGxjYlxuICAgICAgLmZsdXNoKClcbiAgICAgIC5nZXQoKTtcblxuICBjb25zdCBkaXNwYXRjaCA9IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlcigpO1xuXG4gIGNvbnN0IGluUHJvcHMgPSB7IHk6IDEwLCBkdXJhdGlvbjogMjAwLCBlYXNpbmc6IHF1YWRJbiB9O1xuICBjb25zdCBvdXRQcm9wcyA9IHsgeTogLTEwLCBkdXJhdGlvbjogMTAwLCBlYXNpbmc6IHF1YWRPdXQsIGRlbGF5OiAxMDAgfTtcbjwvc2NyaXB0PlxuXG48c3R5bGU+XG4uYWJzbWVudXtcbiAgcG9zaXRpb246IGFic29sdXRlO1xufVxuPC9zdHlsZT5cblxuPHN2ZWx0ZTp3aW5kb3cgb246Y2xpY2s9eygpID0+IChvcGVuID0gZmFsc2UpfSAvPlxuXG48ZGl2IGNsYXNzPXtjfSBvbjpjbGlja3xzdG9wUHJvcGFnYXRpb24+XG4gIDxzbG90IG5hbWU9XCJhY3RpdmF0b3JcIiAvPlxuICB7I2lmIG9wZW59XG4gIDxzbG90IC8+XG5cbiAgICAgIHsvaWZ9XG48L2Rpdj5cbiIsIjxzY3JpcHQ+XG4gIGltcG9ydCB7IGZseSB9IGZyb20gXCJzdmVsdGUvdHJhbnNpdGlvblwiO1xuICBpbXBvcnQgeyBxdWFkSW4gfSBmcm9tIFwic3ZlbHRlL2Vhc2luZ1wiO1xuICBpbXBvcnQgeyBTY3JpbSB9IGZyb20gXCIuLi9VdGlsXCI7XG4gIGltcG9ydCBicmVha3BvaW50cyBmcm9tIFwiLi4vLi4vYnJlYWtwb2ludHNcIjtcbiAgaW1wb3J0IHsgQ2xhc3NCdWlsZGVyIH0gZnJvbSBcIi4uLy4uL3V0aWxzL2NsYXNzZXMuanNcIjtcblxuICBjb25zdCBicCA9IGJyZWFrcG9pbnRzKCk7XG5cbiAgY29uc3QgY2xhc3Nlc0RlZmF1bHQgPSBcImZpeGVkIHRvcC0wIG1kOm10LTE2IHctYXV0byBkcmF3ZXIgb3ZlcmZsb3ctaGlkZGVuIGgtZnVsbFwiO1xuICBjb25zdCBuYXZDbGFzc2VzRGVmYXVsdCA9IGBoLWZ1bGwgdy1mdWxsIGJnLXdoaXRlIGRhcms6YmctZ3JheS05MDAgZGFyazp0ZXh0LWdyYXktMjAwIGFic29sdXRlIGZsZXggdy1hdXRvIHotMjAgZHJhd2VyXG4gICAgcG9pbnRlci1ldmVudHMtYXV0byBvdmVyZmxvdy15LWF1dG9gO1xuXG4gIGV4cG9ydCBsZXQgcmlnaHQgPSBmYWxzZTtcbiAgZXhwb3J0IGxldCBwZXJzaXN0ZW50ID0gZmFsc2U7XG4gIGV4cG9ydCBsZXQgZWxldmF0aW9uID0gdHJ1ZTtcbiAgZXhwb3J0IGxldCBzaG93ID0gdHJ1ZTtcbiAgZXhwb3J0IGxldCBjbGFzc2VzID0gY2xhc3Nlc0RlZmF1bHQ7XG4gIGV4cG9ydCBsZXQgbmF2Q2xhc3NlcyA9IG5hdkNsYXNzZXNEZWZhdWx0O1xuICBleHBvcnQgbGV0IGJvcmRlckNsYXNzZXMgPSBgYm9yZGVyLWdyYXktNjAwICR7cmlnaHQgPyBcImJvcmRlci1sXCIgOiBcImJvcmRlci1yXCJ9YDtcblxuXG5cblxuICBleHBvcnQgbGV0IHRyYW5zaXRpb25Qcm9wcyA9IHtcbiAgICBkdXJhdGlvbjogMjAwLFxuICAgIHg6IC0zMDAsXG4gICAgZWFzaW5nOiBxdWFkSW4sXG4gICAgb3BhY2l0eTogMSxcbiAgfTtcblxuICAkOiB0cmFuc2l0aW9uUHJvcHMueCA9IHJpZ2h0ID8gMzAwIDogLTMwMDtcbiAgJDogcGVyc2lzdGVudCA9IHNob3cgPSAkYnAgIT09IFwic21cIjtcblxuICBjb25zdCBjYiA9IG5ldyBDbGFzc0J1aWxkZXIoY2xhc3NlcywgY2xhc3Nlc0RlZmF1bHQpO1xuXG4gIGlmICgkYnAgPT09ICdzbScpIHNob3cgPSBmYWxzZTtcblxuICAkOiBjID0gY2JcbiAgICAuZmx1c2goKVxuICAgIC5hZGQoY2xhc3NlcywgdHJ1ZSwgY2xhc3Nlc0RlZmF1bHQpXG4gICAgLmFkZChib3JkZXJDbGFzc2VzLCAhZWxldmF0aW9uICYmIHBlcnNpc3RlbnQpXG4gICAgLmFkZCgkJHByb3BzLmNsYXNzKVxuICAgIC5hZGQoXCJyaWdodC0wXCIsIHJpZ2h0KVxuICAgIC5hZGQoXCJsZWZ0LTBcIiwgIXJpZ2h0KVxuICAgIC5hZGQoXCJwb2ludGVyLWV2ZW50cy1ub25lXCIsIHBlcnNpc3RlbnQpXG4gICAgLmFkZChcInotNTBcIiwgIXBlcnNpc3RlbnQpXG4gICAgLmFkZChcImVsZXZhdGlvbi00XCIsIGVsZXZhdGlvbilcbiAgICAuYWRkKFwiei0yMFwiLCBwZXJzaXN0ZW50KVxuICAgIC5nZXQoKTtcblxuICBjb25zdCBuY2IgPSBuZXcgQ2xhc3NCdWlsZGVyKG5hdkNsYXNzZXMsIG5hdkNsYXNzZXNEZWZhdWx0KTtcblxuICAkOiBuID0gbmNiXG4gICAgLmZsdXNoKClcbiAgICAuZ2V0KCk7XG5cbjwvc2NyaXB0PlxuXG48c3R5bGU+XG4gIC5kcmF3ZXIge1xuICAgIG1pbi13aWR0aDogMjUwcHg7XG4gIH1cblxuICBhc2lkZSB7XG4gICAgaGVpZ2h0OiAxMDB2aDtcbiAgfVxuPC9zdHlsZT5cblxueyNpZiBzaG93fVxuICA8YXNpZGVcbiAgICBjbGFzcz17Y31cbiAgICB0cmFuc2l0aW9uOmZseT17dHJhbnNpdGlvblByb3BzfVxuICA+XG4gICAgeyNpZiAhcGVyc2lzdGVudH1cbiAgICAgIDxTY3JpbSBvbjpjbGljaz17KCkgPT4gc2hvdyA9IGZhbHNlfSAvPlxuICAgIHsvaWZ9XG4gICAgPG5hdlxuICAgICAgcm9sZT1cIm5hdmlnYXRpb25cIlxuICAgICAgY2xhc3M9e259XG4gICAgPlxuICAgICAgPGRpdiBjbGFzcz1cInctZnVsbFwiPlxuICAgICAgICA8c2xvdCAvPlxuICAgICAgPC9kaXY+XG4gICAgPC9uYXY+XG4gIDwvYXNpZGU+XG57L2lmfVxuIiwiPHNjcmlwdD5cbiAgaW1wb3J0IHV0aWxzLCB7IENsYXNzQnVpbGRlciwgZmlsdGVyUHJvcHMgfSBmcm9tIFwiLi4vLi4vdXRpbHMvY2xhc3Nlcy5qc1wiO1xuXG5cblxuICBleHBvcnQgbGV0IGZvY3VzZWQgPSBmYWxzZTtcbiAgZXhwb3J0IGxldCBlcnJvciA9IGZhbHNlO1xuICBleHBvcnQgbGV0IG91dGxpbmVkID0gZmFsc2U7XG4gIGV4cG9ydCBsZXQgbGFiZWxPblRvcCA9IGZhbHNlO1xuICBleHBvcnQgbGV0IHByZXBlbmQgPSBmYWxzZTtcbiAgZXhwb3J0IGxldCBjb2xvciA9IFwicHJpbWFyeVwiO1xuICAvLyBmb3Igb3V0bGluZWQgYnV0dG9uIGxhYmVsXG4gIGV4cG9ydCBsZXQgYmdDb2xvciA9IFwid2hpdGVcIjtcbiAgZXhwb3J0IGxldCBkZW5zZSA9IGZhbHNlO1xuXG4gIGxldCBsYWJlbERlZmF1bHQgPSBgcHQtNCBhYnNvbHV0ZSB0b3AtMCBsYWJlbC10cmFuc2l0aW9uIGJsb2NrIHBiLTIgcHgtNCBwb2ludGVyLWV2ZW50cy1ub25lIGN1cnNvci10ZXh0YDtcblxuICBleHBvcnQgbGV0IGFkZCA9IFwiXCI7XG4gIGV4cG9ydCBsZXQgcmVtb3ZlID0gXCJcIjtcbiAgZXhwb3J0IGxldCByZXBsYWNlID0gXCJcIjtcblxuICBleHBvcnQgbGV0IGxhYmVsQ2xhc3NlcyA9IGxhYmVsRGVmYXVsdDtcblxuICBjb25zdCB7XG4gICAgYmcsXG4gICAgYm9yZGVyLFxuICAgIHR4dCxcbiAgICBjYXJldCxcbiAgfSA9IHV0aWxzKGNvbG9yKTtcblxuICBjb25zdCBsID0gbmV3IENsYXNzQnVpbGRlcihsYWJlbENsYXNzZXMsIGxhYmVsRGVmYXVsdCk7XG5cbiAgbGV0IGxDbGFzc2VzID0gaSA9PiBpO1xuXG4gICQ6IGxDbGFzc2VzID0gbFxuICAgICAgLmZsdXNoKClcbiAgICAgIC5hZGQodHh0KCksIGZvY3VzZWQgJiYgIWVycm9yKVxuICAgICAgLmFkZCgndGV4dC1lcnJvci01MDAnLCBmb2N1c2VkICYmIGVycm9yKVxuICAgICAgLmFkZCgnbGFiZWwtdG9wIHRleHQteHMnLCBsYWJlbE9uVG9wKVxuICAgICAgLmFkZCgndGV4dC14cycsIGZvY3VzZWQpXG4gICAgICAucmVtb3ZlKCdwdC00IHBiLTIgcHgtNCBweC0xIHB0LTAnLCBsYWJlbE9uVG9wICYmIG91dGxpbmVkKVxuICAgICAgLmFkZChgbWwtMyBwLTEgcHQtMCBtdC0wIGJnLSR7YmdDb2xvcn0gZGFyazpiZy1kYXJrLTUwMGAsIGxhYmVsT25Ub3AgJiYgb3V0bGluZWQpXG4gICAgICAucmVtb3ZlKCdweC00JywgcHJlcGVuZClcbiAgICAgIC5hZGQoJ3ByLTQgcGwtMTAnLCBwcmVwZW5kKVxuICAgICAgLnJlbW92ZSgncHQtNCcsIGRlbnNlKVxuICAgICAgLmFkZCgncHQtMycsIGRlbnNlKVxuICAgICAgLmFkZChhZGQpXG4gICAgICAucmVtb3ZlKHJlbW92ZSlcbiAgICAgIC5yZXBsYWNlKHJlcGxhY2UpXG4gICAgICAuZ2V0KCk7XG5cbiAgY29uc3QgcHJvcHMgPSBmaWx0ZXJQcm9wcyhbXG4gICAgJ2ZvY3VzZWQnLFxuICAgICdlcnJvcicsXG4gICAgJ291dGxpbmVkJyxcbiAgICAnbGFiZWxPblRvcCcsXG4gICAgJ3ByZXBlbmQnLFxuICAgICdjb2xvcicsXG4gICAgJ2RlbnNlJ1xuICBdLCAkJHByb3BzKTtcbjwvc2NyaXB0PlxuXG48c3R5bGU+XG4ubGFiZWwtdG9wIHtcbiAgbGluZS1oZWlnaHQ6IDAuMDU7XG59XG4ubGFiZWwtdHJhbnNpdGlvbiB7XG4gIHRyYW5zaXRpb246IGZvbnQtc2l6ZSAwLjA1cywgbGluZS1oZWlnaHQgMC4xcztcbn1cbjpnbG9iYWwobGFiZWwudGV4dC14cykge1xuICBmb250LXNpemU6IDAuN3JlbTtcbn1cbjwvc3R5bGU+XG5cbjxsYWJlbCBjbGFzcz1cIntsQ2xhc3Nlc30geyQkcHJvcHMuY2xhc3N9XCIgey4uLnByb3BzfT5cbiAgPHNsb3QgLz5cbjwvbGFiZWw+XG4iLCI8c2NyaXB0PlxuICBpbXBvcnQgdXRpbHMsIHsgQ2xhc3NCdWlsZGVyLCBmaWx0ZXJQcm9wcyB9IGZyb20gXCIuLi8uLi91dGlscy9jbGFzc2VzLmpzXCI7XG5cblxuXG4gIGV4cG9ydCBsZXQgbm9VbmRlcmxpbmUgPSBmYWxzZTtcbiAgZXhwb3J0IGxldCBvdXRsaW5lZCA9IGZhbHNlO1xuICBleHBvcnQgbGV0IGZvY3VzZWQgPSBmYWxzZTtcbiAgZXhwb3J0IGxldCBlcnJvciA9IGZhbHNlO1xuICBleHBvcnQgbGV0IGNvbG9yID0gXCJwcmltYXJ5XCI7XG5cbiAgbGV0IGRlZmF1bHRDbGFzc2VzID0gYG14LWF1dG8gdy0wYDtcblxuICBleHBvcnQgbGV0IGFkZCA9IFwiXCI7XG4gIGV4cG9ydCBsZXQgcmVtb3ZlID0gXCJcIjtcbiAgZXhwb3J0IGxldCByZXBsYWNlID0gXCJcIjtcblxuICBleHBvcnQgbGV0IGxpbmVDbGFzc2VzID0gZGVmYXVsdENsYXNzZXM7XG5cbiAgY29uc3Qge1xuICAgIGJnLFxuICAgIGJvcmRlcixcbiAgICB0eHQsXG4gICAgY2FyZXQsXG4gIH0gPSB1dGlscyhjb2xvcik7XG5cbiAgY29uc3QgbCA9IG5ldyBDbGFzc0J1aWxkZXIobGluZUNsYXNzZXMsIGRlZmF1bHRDbGFzc2VzKTtcblxuICBsZXQgQ2xhc3NlcyA9IGkgPT4gaTtcblxuICAkOiBjbGFzc2VzID0gbFxuICAgICAgLmZsdXNoKClcbiAgICAgIC5hZGQodHh0KCksIGZvY3VzZWQgJiYgIWVycm9yKVxuICAgICAgLmFkZCgnYmctZXJyb3ItNTAwJywgZXJyb3IpXG4gICAgICAuYWRkKCd3LWZ1bGwnLCBmb2N1c2VkIHx8IGVycm9yKVxuICAgICAgLmFkZChiZygpLCBmb2N1c2VkKVxuICAgICAgLmFkZChhZGQpXG4gICAgICAucmVtb3ZlKHJlbW92ZSlcbiAgICAgIC5yZXBsYWNlKHJlcGxhY2UpXG4gICAgICAuZ2V0KCk7XG5cbiAgY29uc3QgcHJvcHMgPSBmaWx0ZXJQcm9wcyhbXG4gICAgJ2ZvY3VzZWQnLFxuICAgICdlcnJvcicsXG4gICAgJ291dGxpbmVkJyxcbiAgICAnbGFiZWxPblRvcCcsXG4gICAgJ3ByZXBlbmQnLFxuICAgICdiZ2NvbG9yJyxcbiAgICAnY29sb3InXG4gIF0sICQkcHJvcHMpO1xuPC9zY3JpcHQ+XG5cbjxzdHlsZT5cbi5saW5lIHtcbiAgaGVpZ2h0OiAxcHg7XG59XG48L3N0eWxlPlxuXG48ZGl2XG4gIGNsYXNzPVwibGluZSBhYnNvbHV0ZSBib3R0b20tMCBsZWZ0LTAgdy1mdWxsIGJnLWdyYXktNjAwIHskJHByb3BzLmNsYXNzfVwiXG4gIGNsYXNzOmhpZGRlbj17bm9VbmRlcmxpbmUgfHwgb3V0bGluZWR9PlxuICA8ZGl2XG4gICAgY2xhc3M9XCJ7Y2xhc3Nlc31cIlxuICAgIHN0eWxlPVwiaGVpZ2h0OiAycHg7IHRyYW5zaXRpb246IHdpZHRoIC4ycyBlYXNlXCIgLz5cbjwvZGl2PlxuIiwiPHNjcmlwdD5cbiAgaW1wb3J0IHsgb25Nb3VudCB9IGZyb20gXCJzdmVsdGVcIjtcbiAgaW1wb3J0IHsgc2xpZGUgfSBmcm9tIFwic3ZlbHRlL3RyYW5zaXRpb25cIjtcblxuICBleHBvcnQgbGV0IGFwcCA9IGZhbHNlO1xuICBleHBvcnQgbGV0IHByb2dyZXNzID0gMDtcbiAgZXhwb3J0IGxldCBjb2xvciA9IFwicHJpbWFyeVwiO1xuXG4gIGxldCBpbml0aWFsaXplZCA9IGZhbHNlO1xuXG4gIG9uTW91bnQoKCkgPT4ge1xuICAgIGlmICghYXBwKSByZXR1cm47XG5cbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICB9LCAyMDApO1xuICB9KTtcbjwvc2NyaXB0PlxuXG48c3R5bGU+XG4gIC8qIGt1ZG9zIGh0dHBzOi8vY29kZXBlbi5pby9zaGFsaW1hbm8vcGVuL3dCbU5HSiAqL1xuICAuaW5jIHtcbiAgICBhbmltYXRpb246IGluY3JlYXNlIDJzIGVhc2UtaW4tb3V0IGluZmluaXRlO1xuICB9XG4gIC5kZWMge1xuICAgIGFuaW1hdGlvbjogZGVjcmVhc2UgMnMgMC45cyBlYXNlLWluLW91dCBpbmZpbml0ZTtcbiAgfVxuXG4gIEBrZXlmcmFtZXMgaW5jcmVhc2Uge1xuICAgIGZyb20ge1xuICAgICAgbGVmdDogLTUlO1xuICAgICAgd2lkdGg6IDUlO1xuICAgIH1cbiAgICB0byB7XG4gICAgICBsZWZ0OiAxMzAlO1xuICAgICAgd2lkdGg6IDE1MCU7XG4gICAgfVxuICB9XG4gIEBrZXlmcmFtZXMgZGVjcmVhc2Uge1xuICAgIGZyb20ge1xuICAgICAgbGVmdDogLTkwJTtcbiAgICAgIHdpZHRoOiA5MCU7XG4gICAgfVxuICAgIHRvIHtcbiAgICAgIGxlZnQ6IDExMCU7XG4gICAgICB3aWR0aDogMTAlO1xuICAgIH1cbiAgfVxuPC9zdHlsZT5cblxuPGRpdlxuICBjbGFzczpmaXhlZD17YXBwfVxuICBjbGFzczp6LTUwPXthcHB9XG4gIGNsYXNzPVwidG9wLTAgbGVmdC0wIHctZnVsbCBoLTEgYmcte2NvbG9yfS0xMDAgb3ZlcmZsb3ctaGlkZGVuIHJlbGF0aXZlXCJcbiAgY2xhc3M6aGlkZGVuPXthcHAgJiYgIWluaXRpYWxpemVkfVxuICB0cmFuc2l0aW9uOnNsaWRlPXt7IGR1cmF0aW9uOiAzMDAgfX0+XG4gIDxkaXZcbiAgICBjbGFzcz1cImJnLXtjb2xvcn0tNTAwIGgtMSBhYnNvbHV0ZVwiXG4gICAgY2xhc3M6aW5jPXshcHJvZ3Jlc3N9XG4gICAgY2xhc3M6dHJhbnNpdGlvbj17cHJvZ3Jlc3N9XG4gICAgc3R5bGU9e3Byb2dyZXNzID8gYHdpZHRoOiAke3Byb2dyZXNzfSVgIDogXCJcIn0gLz5cbiAgPGRpdiBjbGFzcz1cImJnLXtjb2xvcn0tNTAwIGgtMSBhYnNvbHV0ZSBkZWNcIiBjbGFzczpoaWRkZW49e3Byb2dyZXNzfSAvPlxuPC9kaXY+XG4iLCI8c2NyaXB0PlxuXG5cbiAgZXhwb3J0IGxldCBzbWFsbCA9IGZhbHNlO1xuICBleHBvcnQgbGV0IHhzID0gZmFsc2U7XG4gIGV4cG9ydCBsZXQgcmV2ZXJzZSA9IGZhbHNlO1xuICBleHBvcnQgbGV0IHRpcCA9IGZhbHNlO1xuICBleHBvcnQgbGV0IGNvbG9yID0gXCJkZWZhdWx0XCI7XG48L3NjcmlwdD5cblxuPHN0eWxlPlxuICAucmV2ZXJzZSB7XG4gICAgdHJhbnNmb3JtOiByb3RhdGUoMTgwZGVnKTtcbiAgfVxuXG4gIC50aXAge1xuICAgIHRyYW5zZm9ybTogcm90YXRlKDkwZGVnKTtcbiAgfVxuPC9zdHlsZT5cblxuPGlcbiAgYXJpYS1oaWRkZW49XCJ0cnVlXCJcbiAgY2xhc3M9XCJtYXRlcmlhbC1pY29ucyBpY29uIHRleHQteGwgeyQkcHJvcHMuY2xhc3N9IGR1cmF0aW9uLTIwMCBlYXNlLWluXCJcbiAgY2xhc3M6cmV2ZXJzZVxuICBjbGFzczp0aXBcbiAgb246Y2xpY2tcbiAgY2xhc3M6dGV4dC1iYXNlPXtzbWFsbH1cbiAgY2xhc3M6dGV4dC14cz17eHN9XG4gIHN0eWxlPXtjb2xvciA/IGBjb2xvcjogJHtjb2xvcn1gIDogJyd9PlxuICA8c2xvdCAvPlxuPC9pPlxuIiwiPHNjcmlwdD5cbiAgZXhwb3J0IGxldCBjb2xvciA9IFwicHJpbWFyeVwiO1xuICBleHBvcnQgbGV0IG5vSG92ZXIgPSBmYWxzZTtcbiAgaW1wb3J0IGNyZWF0ZVJpcHBsZSBmcm9tIFwiLi4vUmlwcGxlL3JpcHBsZS5qc1wiO1xuXG4gICQ6IHJpcHBsZSA9IGNyZWF0ZVJpcHBsZShjb2xvciwgdHJ1ZSk7XG4gICQ6IGhvdmVyQ2xhc3MgPSBgaG92ZXI6YmctJHtjb2xvcn0tdHJhbnNMaWdodGA7XG48L3NjcmlwdD5cblxuPHN0eWxlPlxuICAucmlwcGxlIHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGUgIWltcG9ydGFudDtcbiAgfVxuPC9zdHlsZT5cblxuPHNwYW5cbiAgdXNlOnJpcHBsZVxuICBjbGFzcz1cInotNDAgeyQkcHJvcHMuY2xhc3N9IHAtMiByb3VuZGVkLWZ1bGwgZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXIgdG9wLTAgbGVmdC0wIHtub0hvdmVyID8gXCJcIiA6IGhvdmVyQ2xhc3N9XCI+XG4gIDxzbG90IC8+XG48L3NwYW4+XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBOENJLEtBQUssZUFBQyxDQUFDLEFBQ0gsT0FBTyxDQUFFLElBQUksQ0FDYixjQUFjLENBQUUsTUFBTSxDQUN0QixlQUFlLENBQUUsYUFBYSxDQUM5QixNQUFNLENBQUUsS0FBSyxDQUNiLFlBQVksQ0FBRSxHQUFHLENBQUMsS0FBSyxDQUFDLE9BQU8sQUFDbkMsQ0FBQyxBQUNELFNBQVMsZUFBQyxDQUFDLEFBQ1AsSUFBSSxDQUFFLElBQUksQ0FDVixVQUFVLENBQUUsTUFBTSxDQUNsQixhQUFhLENBQUUsSUFBSSxBQUN2QixDQUFDLEFBQ0QsWUFBWSxlQUFDLENBQUMsQUFDWCxPQUFPLENBQUUsV0FBVyxDQUNuQixTQUFTLENBQUUsQ0FBQyxDQUNaLFVBQVUsQ0FBRSxNQUFNLENBQ2xCLE1BQU0sQ0FBRSxHQUFHLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FDekIsYUFBYSxDQUFFLEdBQUcsQ0FDbEIsTUFBTSxDQUFHLElBQUksQUFDakIsQ0FBQyxBQUNELFNBQVMsZUFBQyxDQUFDLEFBQ1AsV0FBVyxDQUFFLE9BQU8sQUFDeEIsQ0FBQyxBQUNELFdBQVcsZUFBQyxDQUFDLEFBQ1QsT0FBTyxDQUFFLFdBQVcsQ0FDcEIsU0FBUyxDQUFFLENBQUMsQUFDaEIsQ0FBQyxBQUNELFNBQVMsZUFBQyxDQUFDLEFBQ1AsVUFBVSxDQUFFLElBQUksQ0FDaEIsWUFBWSxDQUFFLElBQUksQUFDdEIsQ0FBQyxBQUVELEtBQUssZUFBQyxDQUFDLEFBQ0gsS0FB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 */