import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, W as create_slot, v as validate_slots, T as assign, X as exclude_internal_props, Y as r, e as element, c as claim_element, b as children, f as detach_dev, h as attr_dev, j as add_location, l as insert_dev, Z as action_destroyer, _ as update_slot, H as transition_in, I as transition_out, $ as ClassBuilder, z as space, A as create_component, x as text, C as claim_space, D as claim_component, y as claim_text, m as append_dev, a0 as set_input_value, E as mount_component, F as listen_dev, G as set_data_dev, J as destroy_component, a1 as run_all, a2 as bubble, a3 as filterProps, a4 as utils, a5 as set_attributes, a6 as toggle_class, U as get_spread_update, a7 as fly, a8 as quadOut, a9 as add_render_callback, aa as create_bidirectional_transition, ab as null_to_empty, k as set_style, n as noop, ac as createEventDispatcher, ad as Icon, K as group_outros, L as check_outros, ae as prop_dev } from './client.702590eb.js';

/* node_modules/smelte/src/components/Ripple/Ripple.svelte generated by Svelte v3.24.0 */
const file = "node_modules/smelte/src/components/Ripple/Ripple.svelte";

function create_fragment(ctx) {
	let span;
	let span_class_value;
	let ripple_action;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*$$slots*/ ctx[6].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);

	const block = {
		c: function create() {
			span = element("span");
			if (default_slot) default_slot.c();
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			if (default_slot) default_slot.l(span_nodes);
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "class", span_class_value = "z-40 " + /*$$props*/ ctx[3].class + " p-2 rounded-full flex items-center justify-center top-0 left-0 " + (/*noHover*/ ctx[0] ? "" : /*hoverClass*/ ctx[2]) + " svelte-1o8z87d");
			add_location(span, file, 15, 0, 293);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);

			if (default_slot) {
				default_slot.m(span, null);
			}

			current = true;

			if (!mounted) {
				dispose = action_destroyer(ripple_action = /*ripple*/ ctx[1].call(null, span));
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 32) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[5], dirty, null, null);
				}
			}

			if (!current || dirty & /*$$props, noHover, hoverClass*/ 13 && span_class_value !== (span_class_value = "z-40 " + /*$$props*/ ctx[3].class + " p-2 rounded-full flex items-center justify-center top-0 left-0 " + (/*noHover*/ ctx[0] ? "" : /*hoverClass*/ ctx[2]) + " svelte-1o8z87d")) {
				attr_dev(span, "class", span_class_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { color = "primary" } = $$props;
	let { noHover = false } = $$props;
	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Ripple", $$slots, ['default']);

	$$self.$set = $$new_props => {
		$$invalidate(3, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("color" in $$new_props) $$invalidate(4, color = $$new_props.color);
		if ("noHover" in $$new_props) $$invalidate(0, noHover = $$new_props.noHover);
		if ("$$scope" in $$new_props) $$invalidate(5, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({
		color,
		noHover,
		createRipple: r,
		ripple,
		hoverClass
	});

	$$self.$inject_state = $$new_props => {
		$$invalidate(3, $$props = assign(assign({}, $$props), $$new_props));
		if ("color" in $$props) $$invalidate(4, color = $$new_props.color);
		if ("noHover" in $$props) $$invalidate(0, noHover = $$new_props.noHover);
		if ("ripple" in $$props) $$invalidate(1, ripple = $$new_props.ripple);
		if ("hoverClass" in $$props) $$invalidate(2, hoverClass = $$new_props.hoverClass);
	};

	let ripple;
	let hoverClass;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*color*/ 16) {
			 $$invalidate(1, ripple = r(color, true));
		}

		if ($$self.$$.dirty & /*color*/ 16) {
			 $$invalidate(2, hoverClass = `hover:bg-${color}-transLight`);
		}
	};

	$$props = exclude_internal_props($$props);
	return [noHover, ripple, hoverClass, $$props, color, $$scope, $$slots];
}

class Ripple extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { color: 4, noHover: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Ripple",
			options,
			id: create_fragment.name
		});
	}

	get color() {
		throw new Error("<Ripple>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set color(value) {
		throw new Error("<Ripple>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get noHover() {
		throw new Error("<Ripple>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set noHover(value) {
		throw new Error("<Ripple>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/smelte/src/components/Switch/Switch.svelte generated by Svelte v3.24.0 */
const file$1 = "node_modules/smelte/src/components/Switch/Switch.svelte";

// (63:4) <Ripple color={value && !disabled ? color : 'gray'} noHover>
function create_default_slot(ctx) {
	let div;
	let div_style_value;

	const block = {
		c: function create() {
			div = element("div");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true, style: true });
			children(div).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", /*th*/ ctx[6]);
			attr_dev(div, "style", div_style_value = /*value*/ ctx[0] ? "left: 1.25rem" : "");
			add_location(div, file$1, 63, 6, 1907);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*th*/ 64) {
				attr_dev(div, "class", /*th*/ ctx[6]);
			}

			if (dirty & /*value*/ 1 && div_style_value !== (div_style_value = /*value*/ ctx[0] ? "left: 1.25rem" : "")) {
				attr_dev(div, "style", div_style_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(63:4) <Ripple color={value && !disabled ? color : 'gray'} noHover>",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let div2;
	let input;
	let t0;
	let div1;
	let div0;
	let t1;
	let ripple;
	let t2;
	let label_1;
	let t3;
	let current;
	let mounted;
	let dispose;

	ripple = new Ripple({
			props: {
				color: /*value*/ ctx[0] && !/*disabled*/ ctx[3]
				? /*color*/ ctx[2]
				: "gray",
				noHover: true,
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div2 = element("div");
			input = element("input");
			t0 = space();
			div1 = element("div");
			div0 = element("div");
			t1 = space();
			create_component(ripple.$$.fragment);
			t2 = space();
			label_1 = element("label");
			t3 = text(/*label*/ ctx[1]);
			this.h();
		},
		l: function claim(nodes) {
			div2 = claim_element(nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			input = claim_element(div2_nodes, "INPUT", { class: true, type: true });
			t0 = claim_space(div2_nodes);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			children(div0).forEach(detach_dev);
			t1 = claim_space(div1_nodes);
			claim_component(ripple.$$.fragment, div1_nodes);
			div1_nodes.forEach(detach_dev);
			t2 = claim_space(div2_nodes);
			label_1 = claim_element(div2_nodes, "LABEL", { "aria-hidden": true, class: true });
			var label_1_nodes = children(label_1);
			t3 = claim_text(label_1_nodes, /*label*/ ctx[1]);
			label_1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(input, "class", "hidden");
			attr_dev(input, "type", "checkbox");
			add_location(input, file$1, 59, 2, 1712);
			attr_dev(div0, "class", "w-full h-full absolute");
			add_location(div0, file$1, 61, 4, 1797);
			attr_dev(div1, "class", /*tr*/ ctx[5]);
			add_location(div1, file$1, 60, 2, 1776);
			attr_dev(label_1, "aria-hidden", "true");
			attr_dev(label_1, "class", /*l*/ ctx[7]);
			add_location(label_1, file$1, 68, 2, 2004);
			attr_dev(div2, "class", /*c*/ ctx[4]);
			add_location(div2, file$1, 58, 0, 1677);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div2, anchor);
			append_dev(div2, input);
			set_input_value(input, /*value*/ ctx[0]);
			append_dev(div2, t0);
			append_dev(div2, div1);
			append_dev(div1, div0);
			append_dev(div1, t1);
			mount_component(ripple, div1, null);
			append_dev(div2, t2);
			append_dev(div2, label_1);
			append_dev(label_1, t3);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(input, "change", /*input_change_handler*/ ctx[14]),
					listen_dev(input, "change", /*change_handler*/ ctx[13], false, false, false),
					listen_dev(div2, "click", /*check*/ ctx[8], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*value*/ 1) {
				set_input_value(input, /*value*/ ctx[0]);
			}

			const ripple_changes = {};

			if (dirty & /*value, disabled, color*/ 13) ripple_changes.color = /*value*/ ctx[0] && !/*disabled*/ ctx[3]
			? /*color*/ ctx[2]
			: "gray";

			if (dirty & /*$$scope, th, value*/ 2097217) {
				ripple_changes.$$scope = { dirty, ctx };
			}

			ripple.$set(ripple_changes);

			if (!current || dirty & /*tr*/ 32) {
				attr_dev(div1, "class", /*tr*/ ctx[5]);
			}

			if (!current || dirty & /*label*/ 2) set_data_dev(t3, /*label*/ ctx[1]);

			if (!current || dirty & /*l*/ 128) {
				attr_dev(label_1, "class", /*l*/ ctx[7]);
			}

			if (!current || dirty & /*c*/ 16) {
				attr_dev(div2, "class", /*c*/ ctx[4]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(ripple.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(ripple.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div2);
			destroy_component(ripple);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

const trackClassesDefault = "relative w-10 h-auto z-0 rounded-full overflow-visible flex items-center justify-center";
const thumbClassesDefault = "rounded-full p-2 w-5 h-5 absolute elevation-3 duration-100";
const labelClassesDefault = "pl-2 cursor-pointer";

function instance$1($$self, $$props, $$invalidate) {
	const classesDefault = `inline-flex items-center mb-2 cursor-pointer z-10`;
	let { value = false } = $$props;
	let { label = "" } = $$props;
	let { color = "primary" } = $$props;
	let { disabled = false } = $$props;
	let { trackClasses = trackClassesDefault } = $$props;
	let { thumbClasses = thumbClassesDefault } = $$props;
	let { labelClasses = labelClassesDefault } = $$props;
	let { classes = classesDefault } = $$props;
	const cb = new ClassBuilder(classes, classesDefault);
	const trcb = new ClassBuilder(trackClasses, trackClassesDefault);
	const thcb = new ClassBuilder(thumbClasses, thumbClassesDefault);
	const lcb = new ClassBuilder(labelClasses, labelClassesDefault);

	function check() {
		if (disabled) return;
		$$invalidate(0, value = !value);
	}

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Switch", $$slots, []);

	function change_handler(event) {
		bubble($$self, event);
	}

	function input_change_handler() {
		value = this.value;
		$$invalidate(0, value);
	}

	$$self.$set = $$new_props => {
		$$invalidate(20, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("value" in $$new_props) $$invalidate(0, value = $$new_props.value);
		if ("label" in $$new_props) $$invalidate(1, label = $$new_props.label);
		if ("color" in $$new_props) $$invalidate(2, color = $$new_props.color);
		if ("disabled" in $$new_props) $$invalidate(3, disabled = $$new_props.disabled);
		if ("trackClasses" in $$new_props) $$invalidate(9, trackClasses = $$new_props.trackClasses);
		if ("thumbClasses" in $$new_props) $$invalidate(10, thumbClasses = $$new_props.thumbClasses);
		if ("labelClasses" in $$new_props) $$invalidate(11, labelClasses = $$new_props.labelClasses);
		if ("classes" in $$new_props) $$invalidate(12, classes = $$new_props.classes);
	};

	$$self.$capture_state = () => ({
		Ripple,
		ClassBuilder,
		classesDefault,
		trackClassesDefault,
		thumbClassesDefault,
		labelClassesDefault,
		value,
		label,
		color,
		disabled,
		trackClasses,
		thumbClasses,
		labelClasses,
		classes,
		cb,
		trcb,
		thcb,
		lcb,
		check,
		c,
		tr,
		th,
		l
	});

	$$self.$inject_state = $$new_props => {
		$$invalidate(20, $$props = assign(assign({}, $$props), $$new_props));
		if ("value" in $$props) $$invalidate(0, value = $$new_props.value);
		if ("label" in $$props) $$invalidate(1, label = $$new_props.label);
		if ("color" in $$props) $$invalidate(2, color = $$new_props.color);
		if ("disabled" in $$props) $$invalidate(3, disabled = $$new_props.disabled);
		if ("trackClasses" in $$props) $$invalidate(9, trackClasses = $$new_props.trackClasses);
		if ("thumbClasses" in $$props) $$invalidate(10, thumbClasses = $$new_props.thumbClasses);
		if ("labelClasses" in $$props) $$invalidate(11, labelClasses = $$new_props.labelClasses);
		if ("classes" in $$props) $$invalidate(12, classes = $$new_props.classes);
		if ("c" in $$props) $$invalidate(4, c = $$new_props.c);
		if ("tr" in $$props) $$invalidate(5, tr = $$new_props.tr);
		if ("th" in $$props) $$invalidate(6, th = $$new_props.th);
		if ("l" in $$props) $$invalidate(7, l = $$new_props.l);
	};

	let c;
	let tr;
	let th;
	let l;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		 $$invalidate(4, c = cb.flush().add(classes, true, classesDefault).add($$props.class).get());

		if ($$self.$$.dirty & /*value, color, trackClasses*/ 517) {
			 $$invalidate(5, tr = trcb.flush().add("bg-gray-700", !value).add(`bg-${color}-200`, value).add(trackClasses, true, trackClassesDefault).get());
		}

		if ($$self.$$.dirty & /*thumbClasses, value, color*/ 1029) {
			 $$invalidate(6, th = thcb.flush().add(thumbClasses, true, thumbClassesDefault).add("bg-white left-0", !value).add(`bg-${color}-400`, value).get());
		}

		if ($$self.$$.dirty & /*labelClasses, disabled*/ 2056) {
			 $$invalidate(7, l = lcb.flush().add(labelClasses, true, labelClassesDefault).add("text-gray-500", disabled).add("text-gray-700", !disabled).get());
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		value,
		label,
		color,
		disabled,
		c,
		tr,
		th,
		l,
		check,
		trackClasses,
		thumbClasses,
		labelClasses,
		classes,
		change_handler,
		input_change_handler
	];
}

class Switch extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$1, create_fragment$1, safe_not_equal, {
			value: 0,
			label: 1,
			color: 2,
			disabled: 3,
			trackClasses: 9,
			thumbClasses: 10,
			labelClasses: 11,
			classes: 12
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Switch",
			options,
			id: create_fragment$1.name
		});
	}

	get value() {
		throw new Error("<Switch>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<Switch>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<Switch>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<Switch>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get color() {
		throw new Error("<Switch>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set color(value) {
		throw new Error("<Switch>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get disabled() {
		throw new Error("<Switch>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set disabled(value) {
		throw new Error("<Switch>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get trackClasses() {
		throw new Error("<Switch>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set trackClasses(value) {
		throw new Error("<Switch>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get thumbClasses() {
		throw new Error("<Switch>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set thumbClasses(value) {
		throw new Error("<Switch>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get labelClasses() {
		throw new Error("<Switch>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set labelClasses(value) {
		throw new Error("<Switch>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get classes() {
		throw new Error("<Switch>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set classes(value) {
		throw new Error("<Switch>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/smelte/src/components/TextField/Label.svelte generated by Svelte v3.24.0 */
const file$2 = "node_modules/smelte/src/components/TextField/Label.svelte";

function create_fragment$2(ctx) {
	let label;
	let label_class_value;
	let current;
	const default_slot_template = /*$$slots*/ ctx[16].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[15], null);

	let label_levels = [
		{
			class: label_class_value = "" + (/*lClasses*/ ctx[0] + " " + /*$$props*/ ctx[2].class)
		},
		/*props*/ ctx[1]
	];

	let label_data = {};

	for (let i = 0; i < label_levels.length; i += 1) {
		label_data = assign(label_data, label_levels[i]);
	}

	const block = {
		c: function create() {
			label = element("label");
			if (default_slot) default_slot.c();
			this.h();
		},
		l: function claim(nodes) {
			label = claim_element(nodes, "LABEL", { class: true });
			var label_nodes = children(label);
			if (default_slot) default_slot.l(label_nodes);
			label_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_attributes(label, label_data);
			toggle_class(label, "svelte-r33x2y", true);
			add_location(label, file$2, 74, 0, 1625);
		},
		m: function mount(target, anchor) {
			insert_dev(target, label, anchor);

			if (default_slot) {
				default_slot.m(label, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 32768) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[15], dirty, null, null);
				}
			}

			set_attributes(label, label_data = get_spread_update(label_levels, [
				(!current || dirty & /*lClasses, $$props*/ 5 && label_class_value !== (label_class_value = "" + (/*lClasses*/ ctx[0] + " " + /*$$props*/ ctx[2].class))) && { class: label_class_value },
				/*props*/ ctx[1]
			]));

			toggle_class(label, "svelte-r33x2y", true);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(label);
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	let { focused = false } = $$props;
	let { error = false } = $$props;
	let { outlined = false } = $$props;
	let { labelOnTop = false } = $$props;
	let { prepend = false } = $$props;
	let { color = "primary" } = $$props;
	let { bgColor = "white" } = $$props;
	let { dense = false } = $$props;
	let labelDefault = `pt-4 absolute top-0 label-transition block pb-2 px-4 pointer-events-none cursor-text`;
	let { add = "" } = $$props;
	let { remove = "" } = $$props;
	let { replace = "" } = $$props;
	let { labelClasses = labelDefault } = $$props;
	const { bg, border, txt, caret } = utils(color);
	const l = new ClassBuilder(labelClasses, labelDefault);
	let lClasses = i => i;
	const props = filterProps(["focused", "error", "outlined", "labelOnTop", "prepend", "color", "dense"], $$props);
	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Label", $$slots, ['default']);

	$$self.$set = $$new_props => {
		$$invalidate(2, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("focused" in $$new_props) $$invalidate(3, focused = $$new_props.focused);
		if ("error" in $$new_props) $$invalidate(4, error = $$new_props.error);
		if ("outlined" in $$new_props) $$invalidate(5, outlined = $$new_props.outlined);
		if ("labelOnTop" in $$new_props) $$invalidate(6, labelOnTop = $$new_props.labelOnTop);
		if ("prepend" in $$new_props) $$invalidate(7, prepend = $$new_props.prepend);
		if ("color" in $$new_props) $$invalidate(8, color = $$new_props.color);
		if ("bgColor" in $$new_props) $$invalidate(9, bgColor = $$new_props.bgColor);
		if ("dense" in $$new_props) $$invalidate(10, dense = $$new_props.dense);
		if ("add" in $$new_props) $$invalidate(11, add = $$new_props.add);
		if ("remove" in $$new_props) $$invalidate(12, remove = $$new_props.remove);
		if ("replace" in $$new_props) $$invalidate(13, replace = $$new_props.replace);
		if ("labelClasses" in $$new_props) $$invalidate(14, labelClasses = $$new_props.labelClasses);
		if ("$$scope" in $$new_props) $$invalidate(15, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({
		utils,
		ClassBuilder,
		filterProps,
		focused,
		error,
		outlined,
		labelOnTop,
		prepend,
		color,
		bgColor,
		dense,
		labelDefault,
		add,
		remove,
		replace,
		labelClasses,
		bg,
		border,
		txt,
		caret,
		l,
		lClasses,
		props
	});

	$$self.$inject_state = $$new_props => {
		$$invalidate(2, $$props = assign(assign({}, $$props), $$new_props));
		if ("focused" in $$props) $$invalidate(3, focused = $$new_props.focused);
		if ("error" in $$props) $$invalidate(4, error = $$new_props.error);
		if ("outlined" in $$props) $$invalidate(5, outlined = $$new_props.outlined);
		if ("labelOnTop" in $$props) $$invalidate(6, labelOnTop = $$new_props.labelOnTop);
		if ("prepend" in $$props) $$invalidate(7, prepend = $$new_props.prepend);
		if ("color" in $$props) $$invalidate(8, color = $$new_props.color);
		if ("bgColor" in $$props) $$invalidate(9, bgColor = $$new_props.bgColor);
		if ("dense" in $$props) $$invalidate(10, dense = $$new_props.dense);
		if ("labelDefault" in $$props) labelDefault = $$new_props.labelDefault;
		if ("add" in $$props) $$invalidate(11, add = $$new_props.add);
		if ("remove" in $$props) $$invalidate(12, remove = $$new_props.remove);
		if ("replace" in $$props) $$invalidate(13, replace = $$new_props.replace);
		if ("labelClasses" in $$props) $$invalidate(14, labelClasses = $$new_props.labelClasses);
		if ("lClasses" in $$props) $$invalidate(0, lClasses = $$new_props.lClasses);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*focused, error, labelOnTop, outlined, bgColor, prepend, dense, add, remove, replace*/ 16120) {
			 $$invalidate(0, lClasses = l.flush().add(txt(), focused && !error).add("text-error-500", focused && error).add("label-top text-xs", labelOnTop).add("text-xs", focused).remove("pt-4 pb-2 px-4 px-1 pt-0", labelOnTop && outlined).add(`ml-3 p-1 pt-0 mt-0 bg-${bgColor} dark:bg-dark-500`, labelOnTop && outlined).remove("px-4", prepend).add("pr-4 pl-10", prepend).remove("pt-4", dense).add("pt-3", dense).add(add).remove(remove).replace(replace).get());
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		lClasses,
		props,
		$$props,
		focused,
		error,
		outlined,
		labelOnTop,
		prepend,
		color,
		bgColor,
		dense,
		add,
		remove,
		replace,
		labelClasses,
		$$scope,
		$$slots
	];
}

class Label extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$2, create_fragment$2, safe_not_equal, {
			focused: 3,
			error: 4,
			outlined: 5,
			labelOnTop: 6,
			prepend: 7,
			color: 8,
			bgColor: 9,
			dense: 10,
			add: 11,
			remove: 12,
			replace: 13,
			labelClasses: 14
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Label",
			options,
			id: create_fragment$2.name
		});
	}

	get focused() {
		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set focused(value) {
		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get error() {
		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set error(value) {
		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get outlined() {
		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set outlined(value) {
		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get labelOnTop() {
		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set labelOnTop(value) {
		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get prepend() {
		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set prepend(value) {
		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get color() {
		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set color(value) {
		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get bgColor() {
		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set bgColor(value) {
		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get dense() {
		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set dense(value) {
		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get add() {
		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set add(value) {
		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get remove() {
		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set remove(value) {
		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get replace() {
		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set replace(value) {
		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get labelClasses() {
		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set labelClasses(value) {
		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/smelte/src/components/TextField/Hint.svelte generated by Svelte v3.24.0 */
const file$3 = "node_modules/smelte/src/components/TextField/Hint.svelte";

function create_fragment$3(ctx) {
	let div;
	let t0_value = (/*hint*/ ctx[1] || "") + "";
	let t0;
	let t1;
	let t2_value = (/*error*/ ctx[0] || "") + "";
	let t2;
	let div_transition;
	let current;

	const block = {
		c: function create() {
			div = element("div");
			t0 = text(t0_value);
			t1 = space();
			t2 = text(t2_value);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t0 = claim_text(div_nodes, t0_value);
			t1 = claim_space(div_nodes);
			t2 = claim_text(div_nodes, t2_value);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", /*classes*/ ctx[3]);
			add_location(div, file$3, 36, 0, 797);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t0);
			append_dev(div, t1);
			append_dev(div, t2);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if ((!current || dirty & /*hint*/ 2) && t0_value !== (t0_value = (/*hint*/ ctx[1] || "") + "")) set_data_dev(t0, t0_value);
			if ((!current || dirty & /*error*/ 1) && t2_value !== (t2_value = (/*error*/ ctx[0] || "") + "")) set_data_dev(t2, t2_value);

			if (!current || dirty & /*classes*/ 8) {
				attr_dev(div, "class", /*classes*/ ctx[3]);
			}
		},
		i: function intro(local) {
			if (current) return;

			add_render_callback(() => {
				if (!div_transition) div_transition = create_bidirectional_transition(div, fly, /*transitionProps*/ ctx[2], true);
				div_transition.run(1);
			});

			current = true;
		},
		o: function outro(local) {
			if (!div_transition) div_transition = create_bidirectional_transition(div, fly, /*transitionProps*/ ctx[2], false);
			div_transition.run(0);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (detaching && div_transition) div_transition.end();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$3.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$3($$self, $$props, $$invalidate) {
	let classesDefault = "text-xs py-1 pl-4 absolute bottom-1 left-0";
	let { error = false } = $$props;
	let { hint = "" } = $$props;
	let { add = "" } = $$props;
	let { remove = "" } = $$props;
	let { replace = "" } = $$props;
	let { transitionProps = { y: -10, duration: 100, easing: quadOut } } = $$props;
	const l = new ClassBuilder($$props.class, classesDefault);
	let Classes = i => i;
	const props = filterProps(["error", "hint"], $$props);
	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Hint", $$slots, []);

	$$self.$set = $$new_props => {
		$$invalidate(11, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("error" in $$new_props) $$invalidate(0, error = $$new_props.error);
		if ("hint" in $$new_props) $$invalidate(1, hint = $$new_props.hint);
		if ("add" in $$new_props) $$invalidate(4, add = $$new_props.add);
		if ("remove" in $$new_props) $$invalidate(5, remove = $$new_props.remove);
		if ("replace" in $$new_props) $$invalidate(6, replace = $$new_props.replace);
		if ("transitionProps" in $$new_props) $$invalidate(2, transitionProps = $$new_props.transitionProps);
	};

	$$self.$capture_state = () => ({
		utils,
		ClassBuilder,
		filterProps,
		fly,
		quadOut,
		classesDefault,
		error,
		hint,
		add,
		remove,
		replace,
		transitionProps,
		l,
		Classes,
		props,
		classes
	});

	$$self.$inject_state = $$new_props => {
		$$invalidate(11, $$props = assign(assign({}, $$props), $$new_props));
		if ("classesDefault" in $$props) classesDefault = $$new_props.classesDefault;
		if ("error" in $$props) $$invalidate(0, error = $$new_props.error);
		if ("hint" in $$props) $$invalidate(1, hint = $$new_props.hint);
		if ("add" in $$props) $$invalidate(4, add = $$new_props.add);
		if ("remove" in $$props) $$invalidate(5, remove = $$new_props.remove);
		if ("replace" in $$props) $$invalidate(6, replace = $$new_props.replace);
		if ("transitionProps" in $$props) $$invalidate(2, transitionProps = $$new_props.transitionProps);
		if ("Classes" in $$props) Classes = $$new_props.Classes;
		if ("classes" in $$props) $$invalidate(3, classes = $$new_props.classes);
	};

	let classes;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*error, hint, add, remove, replace*/ 115) {
			 $$invalidate(3, classes = l.flush().add("text-error-500", error).add("text-gray-600", hint).add(add).remove(remove).replace(replace).get());
		}
	};

	$$props = exclude_internal_props($$props);
	return [error, hint, transitionProps, classes, add, remove, replace];
}

class Hint extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$3, create_fragment$3, safe_not_equal, {
			error: 0,
			hint: 1,
			add: 4,
			remove: 5,
			replace: 6,
			transitionProps: 2
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Hint",
			options,
			id: create_fragment$3.name
		});
	}

	get error() {
		throw new Error("<Hint>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set error(value) {
		throw new Error("<Hint>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get hint() {
		throw new Error("<Hint>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set hint(value) {
		throw new Error("<Hint>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get add() {
		throw new Error("<Hint>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set add(value) {
		throw new Error("<Hint>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get remove() {
		throw new Error("<Hint>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set remove(value) {
		throw new Error("<Hint>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get replace() {
		throw new Error("<Hint>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set replace(value) {
		throw new Error("<Hint>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get transitionProps() {
		throw new Error("<Hint>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set transitionProps(value) {
		throw new Error("<Hint>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/smelte/src/components/TextField/Underline.svelte generated by Svelte v3.24.0 */
const file$4 = "node_modules/smelte/src/components/TextField/Underline.svelte";

function create_fragment$4(ctx) {
	let div1;
	let div0;
	let div0_class_value;
	let div1_class_value;

	const block = {
		c: function create() {
			div1 = element("div");
			div0 = element("div");
			this.h();
		},
		l: function claim(nodes) {
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", { class: true, style: true });
			children(div0).forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "class", div0_class_value = "" + (null_to_empty(/*classes*/ ctx[2]) + " svelte-xd9zs6"));
			set_style(div0, "height", "2px");
			set_style(div0, "transition", "width .2s ease");
			add_location(div0, file$4, 61, 2, 1133);
			attr_dev(div1, "class", div1_class_value = "line absolute bottom-0 left-0 w-full bg-gray-600 " + /*$$props*/ ctx[3].class + " svelte-xd9zs6");
			toggle_class(div1, "hidden", /*noUnderline*/ ctx[0] || /*outlined*/ ctx[1]);
			add_location(div1, file$4, 58, 0, 1009);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, div0);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*classes*/ 4 && div0_class_value !== (div0_class_value = "" + (null_to_empty(/*classes*/ ctx[2]) + " svelte-xd9zs6"))) {
				attr_dev(div0, "class", div0_class_value);
			}

			if (dirty & /*$$props*/ 8 && div1_class_value !== (div1_class_value = "line absolute bottom-0 left-0 w-full bg-gray-600 " + /*$$props*/ ctx[3].class + " svelte-xd9zs6")) {
				attr_dev(div1, "class", div1_class_value);
			}

			if (dirty & /*$$props, noUnderline, outlined*/ 11) {
				toggle_class(div1, "hidden", /*noUnderline*/ ctx[0] || /*outlined*/ ctx[1]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$4.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$4($$self, $$props, $$invalidate) {
	let { noUnderline = false } = $$props;
	let { outlined = false } = $$props;
	let { focused = false } = $$props;
	let { error = false } = $$props;
	let { color = "primary" } = $$props;
	let defaultClasses = `mx-auto w-0`;
	let { add = "" } = $$props;
	let { remove = "" } = $$props;
	let { replace = "" } = $$props;
	let { lineClasses = defaultClasses } = $$props;
	const { bg, border, txt, caret } = utils(color);
	const l = new ClassBuilder(lineClasses, defaultClasses);
	let Classes = i => i;
	const props = filterProps(["focused", "error", "outlined", "labelOnTop", "prepend", "bgcolor", "color"], $$props);
	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Underline", $$slots, []);

	$$self.$set = $$new_props => {
		$$invalidate(3, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("noUnderline" in $$new_props) $$invalidate(0, noUnderline = $$new_props.noUnderline);
		if ("outlined" in $$new_props) $$invalidate(1, outlined = $$new_props.outlined);
		if ("focused" in $$new_props) $$invalidate(4, focused = $$new_props.focused);
		if ("error" in $$new_props) $$invalidate(5, error = $$new_props.error);
		if ("color" in $$new_props) $$invalidate(6, color = $$new_props.color);
		if ("add" in $$new_props) $$invalidate(7, add = $$new_props.add);
		if ("remove" in $$new_props) $$invalidate(8, remove = $$new_props.remove);
		if ("replace" in $$new_props) $$invalidate(9, replace = $$new_props.replace);
		if ("lineClasses" in $$new_props) $$invalidate(10, lineClasses = $$new_props.lineClasses);
	};

	$$self.$capture_state = () => ({
		utils,
		ClassBuilder,
		filterProps,
		noUnderline,
		outlined,
		focused,
		error,
		color,
		defaultClasses,
		add,
		remove,
		replace,
		lineClasses,
		bg,
		border,
		txt,
		caret,
		l,
		Classes,
		props,
		classes
	});

	$$self.$inject_state = $$new_props => {
		$$invalidate(3, $$props = assign(assign({}, $$props), $$new_props));
		if ("noUnderline" in $$props) $$invalidate(0, noUnderline = $$new_props.noUnderline);
		if ("outlined" in $$props) $$invalidate(1, outlined = $$new_props.outlined);
		if ("focused" in $$props) $$invalidate(4, focused = $$new_props.focused);
		if ("error" in $$props) $$invalidate(5, error = $$new_props.error);
		if ("color" in $$props) $$invalidate(6, color = $$new_props.color);
		if ("defaultClasses" in $$props) defaultClasses = $$new_props.defaultClasses;
		if ("add" in $$props) $$invalidate(7, add = $$new_props.add);
		if ("remove" in $$props) $$invalidate(8, remove = $$new_props.remove);
		if ("replace" in $$props) $$invalidate(9, replace = $$new_props.replace);
		if ("lineClasses" in $$props) $$invalidate(10, lineClasses = $$new_props.lineClasses);
		if ("Classes" in $$props) Classes = $$new_props.Classes;
		if ("classes" in $$props) $$invalidate(2, classes = $$new_props.classes);
	};

	let classes;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*focused, error, add, remove, replace*/ 944) {
			 $$invalidate(2, classes = l.flush().add(txt(), focused && !error).add("bg-error-500", error).add("w-full", focused || error).add(bg(), focused).add(add).remove(remove).replace(replace).get());
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		noUnderline,
		outlined,
		classes,
		$$props,
		focused,
		error,
		color,
		add,
		remove,
		replace,
		lineClasses
	];
}

class Underline extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$4, create_fragment$4, safe_not_equal, {
			noUnderline: 0,
			outlined: 1,
			focused: 4,
			error: 5,
			color: 6,
			add: 7,
			remove: 8,
			replace: 9,
			lineClasses: 10
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Underline",
			options,
			id: create_fragment$4.name
		});
	}

	get noUnderline() {
		throw new Error("<Underline>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set noUnderline(value) {
		throw new Error("<Underline>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get outlined() {
		throw new Error("<Underline>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set outlined(value) {
		throw new Error("<Underline>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get focused() {
		throw new Error("<Underline>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set focused(value) {
		throw new Error("<Underline>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get error() {
		throw new Error("<Underline>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set error(value) {
		throw new Error("<Underline>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get color() {
		throw new Error("<Underline>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set color(value) {
		throw new Error("<Underline>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get add() {
		throw new Error("<Underline>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set add(value) {
		throw new Error("<Underline>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get remove() {
		throw new Error("<Underline>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set remove(value) {
		throw new Error("<Underline>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get replace() {
		throw new Error("<Underline>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set replace(value) {
		throw new Error("<Underline>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get lineClasses() {
		throw new Error("<Underline>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set lineClasses(value) {
		throw new Error("<Underline>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/smelte/src/components/TextField/TextField.svelte generated by Svelte v3.24.0 */
const file$5 = "node_modules/smelte/src/components/TextField/TextField.svelte";
const get_prepend_slot_changes = dirty => ({});
const get_prepend_slot_context = ctx => ({});
const get_append_slot_changes = dirty => ({});
const get_append_slot_context = ctx => ({});
const get_label_slot_changes = dirty => ({});
const get_label_slot_context = ctx => ({});

// (140:2) {#if label}
function create_if_block_6(ctx) {
	let current;
	const label_slot_template = /*$$slots*/ ctx[40].label;
	const label_slot = create_slot(label_slot_template, ctx, /*$$scope*/ ctx[60], get_label_slot_context);
	const label_slot_or_fallback = label_slot || fallback_block_2(ctx);

	const block = {
		c: function create() {
			if (label_slot_or_fallback) label_slot_or_fallback.c();
		},
		l: function claim(nodes) {
			if (label_slot_or_fallback) label_slot_or_fallback.l(nodes);
		},
		m: function mount(target, anchor) {
			if (label_slot_or_fallback) {
				label_slot_or_fallback.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (label_slot) {
				if (label_slot.p && dirty[1] & /*$$scope*/ 536870912) {
					update_slot(label_slot, label_slot_template, ctx, /*$$scope*/ ctx[60], dirty, get_label_slot_changes, get_label_slot_context);
				}
			} else {
				if (label_slot_or_fallback && label_slot_or_fallback.p && dirty[0] & /*labelOnTop, focused, error, outlined, prepend, color, bgColor, dense, label*/ 33952078) {
					label_slot_or_fallback.p(ctx, dirty);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(label_slot_or_fallback, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(label_slot_or_fallback, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (label_slot_or_fallback) label_slot_or_fallback.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_6.name,
		type: "if",
		source: "(140:2) {#if label}",
		ctx
	});

	return block;
}

// (142:4) <Label       {labelOnTop}       {focused}       {error}       {outlined}       {prepend}       {color}       {bgColor}       dense={dense && !outlined}     >
function create_default_slot_2(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text(/*label*/ ctx[3]);
		},
		l: function claim(nodes) {
			t = claim_text(nodes, /*label*/ ctx[3]);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*label*/ 8) set_data_dev(t, /*label*/ ctx[3]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(142:4) <Label       {labelOnTop}       {focused}       {error}       {outlined}       {prepend}       {color}       {bgColor}       dense={dense && !outlined}     >",
		ctx
	});

	return block;
}

// (141:21)      
function fallback_block_2(ctx) {
	let label_1;
	let current;

	label_1 = new Label({
			props: {
				labelOnTop: /*labelOnTop*/ ctx[25],
				focused: /*focused*/ ctx[1],
				error: /*error*/ ctx[6],
				outlined: /*outlined*/ ctx[2],
				prepend: /*prepend*/ ctx[8],
				color: /*color*/ ctx[17],
				bgColor: /*bgColor*/ ctx[18],
				dense: /*dense*/ ctx[12] && !/*outlined*/ ctx[2],
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(label_1.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(label_1.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(label_1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const label_1_changes = {};
			if (dirty[0] & /*labelOnTop*/ 33554432) label_1_changes.labelOnTop = /*labelOnTop*/ ctx[25];
			if (dirty[0] & /*focused*/ 2) label_1_changes.focused = /*focused*/ ctx[1];
			if (dirty[0] & /*error*/ 64) label_1_changes.error = /*error*/ ctx[6];
			if (dirty[0] & /*outlined*/ 4) label_1_changes.outlined = /*outlined*/ ctx[2];
			if (dirty[0] & /*prepend*/ 256) label_1_changes.prepend = /*prepend*/ ctx[8];
			if (dirty[0] & /*color*/ 131072) label_1_changes.color = /*color*/ ctx[17];
			if (dirty[0] & /*bgColor*/ 262144) label_1_changes.bgColor = /*bgColor*/ ctx[18];
			if (dirty[0] & /*dense, outlined*/ 4100) label_1_changes.dense = /*dense*/ ctx[12] && !/*outlined*/ ctx[2];

			if (dirty[0] & /*label*/ 8 | dirty[1] & /*$$scope*/ 536870912) {
				label_1_changes.$$scope = { dirty, ctx };
			}

			label_1.$set(label_1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(label_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(label_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(label_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: fallback_block_2.name,
		type: "fallback",
		source: "(141:21)      ",
		ctx
	});

	return block;
}

// (186:36) 
function create_if_block_5(ctx) {
	let input;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			input = element("input");
			this.h();
		},
		l: function claim(nodes) {
			input = claim_element(nodes, "INPUT", {
				readonly: true,
				class: true,
				disabled: true,
				value: true
			});

			this.h();
		},
		h: function hydrate() {
			input.readOnly = true;
			attr_dev(input, "class", /*iClasses*/ ctx[26]);
			input.disabled = /*disabled*/ ctx[20];
			input.value = /*value*/ ctx[0];
			add_location(input, file$5, 186, 4, 4892);
		},
		m: function mount(target, anchor) {
			insert_dev(target, input, anchor);

			if (!mounted) {
				dispose = [
					listen_dev(input, "change", /*change_handler_2*/ ctx[51], false, false, false),
					listen_dev(input, "input", /*input_handler_2*/ ctx[52], false, false, false),
					listen_dev(input, "click", /*click_handler_2*/ ctx[53], false, false, false),
					listen_dev(input, "blur", /*blur_handler_2*/ ctx[54], false, false, false),
					listen_dev(input, "focus", /*focus_handler_2*/ ctx[55], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*iClasses*/ 67108864) {
				attr_dev(input, "class", /*iClasses*/ ctx[26]);
			}

			if (dirty[0] & /*disabled*/ 1048576) {
				prop_dev(input, "disabled", /*disabled*/ ctx[20]);
			}

			if (dirty[0] & /*value*/ 1 && input.value !== /*value*/ ctx[0]) {
				prop_dev(input, "value", /*value*/ ctx[0]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(input);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_5.name,
		type: "if",
		source: "(186:36) ",
		ctx
	});

	return block;
}

// (170:32) 
function create_if_block_4(ctx) {
	let textarea_1;
	let textarea_1_placeholder_value;
	let mounted;
	let dispose;

	let textarea_1_levels = [
		{ rows: /*rows*/ ctx[10] },
		{ class: /*iClasses*/ ctx[26] },
		{ disabled: /*disabled*/ ctx[20] },
		{ "aria-label": /*label*/ ctx[3] },
		/*props*/ ctx[29],
		{
			placeholder: textarea_1_placeholder_value = !/*value*/ ctx[0] ? /*placeholder*/ ctx[4] : ""
		}
	];

	let textarea_1_data = {};

	for (let i = 0; i < textarea_1_levels.length; i += 1) {
		textarea_1_data = assign(textarea_1_data, textarea_1_levels[i]);
	}

	const block = {
		c: function create() {
			textarea_1 = element("textarea");
			this.h();
		},
		l: function claim(nodes) {
			textarea_1 = claim_element(nodes, "TEXTAREA", {
				rows: true,
				class: true,
				disabled: true,
				"aria-label": true,
				placeholder: true
			});

			children(textarea_1).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_attributes(textarea_1, textarea_1_data);
			add_location(textarea_1, file$5, 170, 4, 4544);
		},
		m: function mount(target, anchor) {
			insert_dev(target, textarea_1, anchor);
			set_input_value(textarea_1, /*value*/ ctx[0]);

			if (!mounted) {
				dispose = [
					listen_dev(textarea_1, "change", /*change_handler_1*/ ctx[47], false, false, false),
					listen_dev(textarea_1, "input", /*input_handler_1*/ ctx[48], false, false, false),
					listen_dev(textarea_1, "click", /*click_handler_1*/ ctx[49], false, false, false),
					listen_dev(textarea_1, "focus", /*focus_handler_1*/ ctx[46], false, false, false),
					listen_dev(textarea_1, "blur", /*blur_handler_1*/ ctx[50], false, false, false),
					listen_dev(textarea_1, "input", /*textarea_1_input_handler*/ ctx[57]),
					listen_dev(textarea_1, "focus", /*toggleFocused*/ ctx[28], false, false, false),
					listen_dev(textarea_1, "blur", /*toggleFocused*/ ctx[28], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			set_attributes(textarea_1, textarea_1_data = get_spread_update(textarea_1_levels, [
				dirty[0] & /*rows*/ 1024 && { rows: /*rows*/ ctx[10] },
				dirty[0] & /*iClasses*/ 67108864 && { class: /*iClasses*/ ctx[26] },
				dirty[0] & /*disabled*/ 1048576 && { disabled: /*disabled*/ ctx[20] },
				dirty[0] & /*label*/ 8 && { "aria-label": /*label*/ ctx[3] },
				/*props*/ ctx[29],
				dirty[0] & /*value, placeholder*/ 17 && textarea_1_placeholder_value !== (textarea_1_placeholder_value = !/*value*/ ctx[0] ? /*placeholder*/ ctx[4] : "") && {
					placeholder: textarea_1_placeholder_value
				}
			]));

			if (dirty[0] & /*value*/ 1) {
				set_input_value(textarea_1, /*value*/ ctx[0]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(textarea_1);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_4.name,
		type: "if",
		source: "(170:32) ",
		ctx
	});

	return block;
}

// (155:2) {#if (!textarea && !select) || autocomplete}
function create_if_block_3(ctx) {
	let input;
	let input_placeholder_value;
	let mounted;
	let dispose;

	let input_levels = [
		{ "aria-label": /*label*/ ctx[3] },
		/*props*/ ctx[29],
		{ class: /*iClasses*/ ctx[26] },
		{ disabled: /*disabled*/ ctx[20] },
		{
			placeholder: input_placeholder_value = !/*value*/ ctx[0] ? /*placeholder*/ ctx[4] : ""
		}
	];

	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	const block = {
		c: function create() {
			input = element("input");
			this.h();
		},
		l: function claim(nodes) {
			input = claim_element(nodes, "INPUT", {
				"aria-label": true,
				class: true,
				disabled: true,
				placeholder: true
			});

			this.h();
		},
		h: function hydrate() {
			set_attributes(input, input_data);
			add_location(input, file$5, 155, 4, 4216);
		},
		m: function mount(target, anchor) {
			insert_dev(target, input, anchor);
			set_input_value(input, /*value*/ ctx[0]);

			if (!mounted) {
				dispose = [
					listen_dev(input, "focus", /*toggleFocused*/ ctx[28], false, false, false),
					listen_dev(input, "blur", /*toggleFocused*/ ctx[28], false, false, false),
					listen_dev(input, "blur", /*blur_handler*/ ctx[42], false, false, false),
					listen_dev(input, "input", /*input_input_handler*/ ctx[56]),
					listen_dev(input, "change", /*change_handler*/ ctx[41], false, false, false),
					listen_dev(input, "input", /*input_handler*/ ctx[43], false, false, false),
					listen_dev(input, "click", /*click_handler*/ ctx[44], false, false, false),
					listen_dev(input, "focus", /*focus_handler*/ ctx[45], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			set_attributes(input, input_data = get_spread_update(input_levels, [
				dirty[0] & /*label*/ 8 && { "aria-label": /*label*/ ctx[3] },
				/*props*/ ctx[29],
				dirty[0] & /*iClasses*/ 67108864 && { class: /*iClasses*/ ctx[26] },
				dirty[0] & /*disabled*/ 1048576 && { disabled: /*disabled*/ ctx[20] },
				dirty[0] & /*value, placeholder*/ 17 && input_placeholder_value !== (input_placeholder_value = !/*value*/ ctx[0] ? /*placeholder*/ ctx[4] : "") && { placeholder: input_placeholder_value }
			]));

			if (dirty[0] & /*value*/ 1 && input.value !== /*value*/ ctx[0]) {
				set_input_value(input, /*value*/ ctx[0]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(input);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3.name,
		type: "if",
		source: "(155:2) {#if (!textarea && !select) || autocomplete}",
		ctx
	});

	return block;
}

// (199:2) {#if append}
function create_if_block_2(ctx) {
	let div;
	let current;
	let mounted;
	let dispose;
	const append_slot_template = /*$$slots*/ ctx[40].append;
	const append_slot = create_slot(append_slot_template, ctx, /*$$scope*/ ctx[60], get_append_slot_context);
	const append_slot_or_fallback = append_slot || fallback_block_1(ctx);

	const block = {
		c: function create() {
			div = element("div");
			if (append_slot_or_fallback) append_slot_or_fallback.c();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			if (append_slot_or_fallback) append_slot_or_fallback.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", /*aClasses*/ ctx[22]);
			add_location(div, file$5, 199, 4, 5076);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			if (append_slot_or_fallback) {
				append_slot_or_fallback.m(div, null);
			}

			current = true;

			if (!mounted) {
				dispose = listen_dev(div, "click", /*click_handler_3*/ ctx[58], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (append_slot) {
				if (append_slot.p && dirty[1] & /*$$scope*/ 536870912) {
					update_slot(append_slot, append_slot_template, ctx, /*$$scope*/ ctx[60], dirty, get_append_slot_changes, get_append_slot_context);
				}
			} else {
				if (append_slot_or_fallback && append_slot_or_fallback.p && dirty[0] & /*appendReverse, focused, iconClass, append*/ 557186) {
					append_slot_or_fallback.p(ctx, dirty);
				}
			}

			if (!current || dirty[0] & /*aClasses*/ 4194304) {
				attr_dev(div, "class", /*aClasses*/ ctx[22]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(append_slot_or_fallback, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(append_slot_or_fallback, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (append_slot_or_fallback) append_slot_or_fallback.d(detaching);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(199:2) {#if append}",
		ctx
	});

	return block;
}

// (205:8) <Icon           reverse={appendReverse}           class="{focused ? txt() : ""} {iconClass}"         >
function create_default_slot_1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text(/*append*/ ctx[7]);
		},
		l: function claim(nodes) {
			t = claim_text(nodes, /*append*/ ctx[7]);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*append*/ 128) set_data_dev(t, /*append*/ ctx[7]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(205:8) <Icon           reverse={appendReverse}           class=\\\"{focused ? txt() : \\\"\\\"} {iconClass}\\\"         >",
		ctx
	});

	return block;
}

// (204:26)          
function fallback_block_1(ctx) {
	let icon;
	let current;

	icon = new Icon({
			props: {
				reverse: /*appendReverse*/ ctx[15],
				class: "" + ((/*focused*/ ctx[1] ? /*txt*/ ctx[27]() : "") + " " + /*iconClass*/ ctx[19]),
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(icon.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(icon.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(icon, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const icon_changes = {};
			if (dirty[0] & /*appendReverse*/ 32768) icon_changes.reverse = /*appendReverse*/ ctx[15];
			if (dirty[0] & /*focused, iconClass*/ 524290) icon_changes.class = "" + ((/*focused*/ ctx[1] ? /*txt*/ ctx[27]() : "") + " " + /*iconClass*/ ctx[19]);

			if (dirty[0] & /*append*/ 128 | dirty[1] & /*$$scope*/ 536870912) {
				icon_changes.$$scope = { dirty, ctx };
			}

			icon.$set(icon_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(icon, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: fallback_block_1.name,
		type: "fallback",
		source: "(204:26)          ",
		ctx
	});

	return block;
}

// (215:2) {#if prepend}
function create_if_block_1(ctx) {
	let div;
	let current;
	let mounted;
	let dispose;
	const prepend_slot_template = /*$$slots*/ ctx[40].prepend;
	const prepend_slot = create_slot(prepend_slot_template, ctx, /*$$scope*/ ctx[60], get_prepend_slot_context);
	const prepend_slot_or_fallback = prepend_slot || fallback_block(ctx);

	const block = {
		c: function create() {
			div = element("div");
			if (prepend_slot_or_fallback) prepend_slot_or_fallback.c();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			if (prepend_slot_or_fallback) prepend_slot_or_fallback.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", /*pClasses*/ ctx[23]);
			add_location(div, file$5, 215, 4, 5385);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			if (prepend_slot_or_fallback) {
				prepend_slot_or_fallback.m(div, null);
			}

			current = true;

			if (!mounted) {
				dispose = listen_dev(div, "click", /*click_handler_4*/ ctx[59], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (prepend_slot) {
				if (prepend_slot.p && dirty[1] & /*$$scope*/ 536870912) {
					update_slot(prepend_slot, prepend_slot_template, ctx, /*$$scope*/ ctx[60], dirty, get_prepend_slot_changes, get_prepend_slot_context);
				}
			} else {
				if (prepend_slot_or_fallback && prepend_slot_or_fallback.p && dirty[0] & /*prependReverse, focused, iconClass, prepend*/ 590082) {
					prepend_slot_or_fallback.p(ctx, dirty);
				}
			}

			if (!current || dirty[0] & /*pClasses*/ 8388608) {
				attr_dev(div, "class", /*pClasses*/ ctx[23]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(prepend_slot_or_fallback, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(prepend_slot_or_fallback, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (prepend_slot_or_fallback) prepend_slot_or_fallback.d(detaching);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(215:2) {#if prepend}",
		ctx
	});

	return block;
}

// (221:8) <Icon           reverse={prependReverse}           class="{focused ? txt() : ""} {iconClass}"         >
function create_default_slot$1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text(/*prepend*/ ctx[8]);
		},
		l: function claim(nodes) {
			t = claim_text(nodes, /*prepend*/ ctx[8]);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*prepend*/ 256) set_data_dev(t, /*prepend*/ ctx[8]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$1.name,
		type: "slot",
		source: "(221:8) <Icon           reverse={prependReverse}           class=\\\"{focused ? txt() : \\\"\\\"} {iconClass}\\\"         >",
		ctx
	});

	return block;
}

// (220:27)          
function fallback_block(ctx) {
	let icon;
	let current;

	icon = new Icon({
			props: {
				reverse: /*prependReverse*/ ctx[16],
				class: "" + ((/*focused*/ ctx[1] ? /*txt*/ ctx[27]() : "") + " " + /*iconClass*/ ctx[19]),
				$$slots: { default: [create_default_slot$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(icon.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(icon.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(icon, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const icon_changes = {};
			if (dirty[0] & /*prependReverse*/ 65536) icon_changes.reverse = /*prependReverse*/ ctx[16];
			if (dirty[0] & /*focused, iconClass*/ 524290) icon_changes.class = "" + ((/*focused*/ ctx[1] ? /*txt*/ ctx[27]() : "") + " " + /*iconClass*/ ctx[19]);

			if (dirty[0] & /*prepend*/ 256 | dirty[1] & /*$$scope*/ 536870912) {
				icon_changes.$$scope = { dirty, ctx };
			}

			icon.$set(icon_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(icon, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: fallback_block.name,
		type: "fallback",
		source: "(220:27)          ",
		ctx
	});

	return block;
}

// (237:2) {#if showHint}
function create_if_block(ctx) {
	let hint_1;
	let current;

	hint_1 = new Hint({
			props: {
				error: /*error*/ ctx[6],
				hint: /*hint*/ ctx[5]
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(hint_1.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(hint_1.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(hint_1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const hint_1_changes = {};
			if (dirty[0] & /*error*/ 64) hint_1_changes.error = /*error*/ ctx[6];
			if (dirty[0] & /*hint*/ 32) hint_1_changes.hint = /*hint*/ ctx[5];
			hint_1.$set(hint_1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(hint_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(hint_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(hint_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(237:2) {#if showHint}",
		ctx
	});

	return block;
}

function create_fragment$5(ctx) {
	let div;
	let t0;
	let t1;
	let t2;
	let t3;
	let underline;
	let t4;
	let current;
	let if_block0 = /*label*/ ctx[3] && create_if_block_6(ctx);

	function select_block_type(ctx, dirty) {
		if (!/*textarea*/ ctx[9] && !/*select*/ ctx[11] || /*autocomplete*/ ctx[13]) return create_if_block_3;
		if (/*textarea*/ ctx[9] && !/*select*/ ctx[11]) return create_if_block_4;
		if (/*select*/ ctx[11] && !/*autocomplete*/ ctx[13]) return create_if_block_5;
	}

	let current_block_type = select_block_type(ctx);
	let if_block1 = current_block_type && current_block_type(ctx);
	let if_block2 = /*append*/ ctx[7] && create_if_block_2(ctx);
	let if_block3 = /*prepend*/ ctx[8] && create_if_block_1(ctx);

	underline = new Underline({
			props: {
				noUnderline: /*noUnderline*/ ctx[14],
				outlined: /*outlined*/ ctx[2],
				focused: /*focused*/ ctx[1],
				error: /*error*/ ctx[6]
			},
			$$inline: true
		});

	let if_block4 = /*showHint*/ ctx[24] && create_if_block(ctx);

	const block = {
		c: function create() {
			div = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			if (if_block2) if_block2.c();
			t2 = space();
			if (if_block3) if_block3.c();
			t3 = space();
			create_component(underline.$$.fragment);
			t4 = space();
			if (if_block4) if_block4.c();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			if (if_block0) if_block0.l(div_nodes);
			t0 = claim_space(div_nodes);
			if (if_block1) if_block1.l(div_nodes);
			t1 = claim_space(div_nodes);
			if (if_block2) if_block2.l(div_nodes);
			t2 = claim_space(div_nodes);
			if (if_block3) if_block3.l(div_nodes);
			t3 = claim_space(div_nodes);
			claim_component(underline.$$.fragment, div_nodes);
			t4 = claim_space(div_nodes);
			if (if_block4) if_block4.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", /*wClasses*/ ctx[21]);
			add_location(div, file$5, 138, 0, 3910);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			if (if_block0) if_block0.m(div, null);
			append_dev(div, t0);
			if (if_block1) if_block1.m(div, null);
			append_dev(div, t1);
			if (if_block2) if_block2.m(div, null);
			append_dev(div, t2);
			if (if_block3) if_block3.m(div, null);
			append_dev(div, t3);
			mount_component(underline, div, null);
			append_dev(div, t4);
			if (if_block4) if_block4.m(div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (/*label*/ ctx[3]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[0] & /*label*/ 8) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_6(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block1) {
				if_block1.p(ctx, dirty);
			} else {
				if (if_block1) if_block1.d(1);
				if_block1 = current_block_type && current_block_type(ctx);

				if (if_block1) {
					if_block1.c();
					if_block1.m(div, t1);
				}
			}

			if (/*append*/ ctx[7]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty[0] & /*append*/ 128) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_2(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(div, t2);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}

			if (/*prepend*/ ctx[8]) {
				if (if_block3) {
					if_block3.p(ctx, dirty);

					if (dirty[0] & /*prepend*/ 256) {
						transition_in(if_block3, 1);
					}
				} else {
					if_block3 = create_if_block_1(ctx);
					if_block3.c();
					transition_in(if_block3, 1);
					if_block3.m(div, t3);
				}
			} else if (if_block3) {
				group_outros();

				transition_out(if_block3, 1, 1, () => {
					if_block3 = null;
				});

				check_outros();
			}

			const underline_changes = {};
			if (dirty[0] & /*noUnderline*/ 16384) underline_changes.noUnderline = /*noUnderline*/ ctx[14];
			if (dirty[0] & /*outlined*/ 4) underline_changes.outlined = /*outlined*/ ctx[2];
			if (dirty[0] & /*focused*/ 2) underline_changes.focused = /*focused*/ ctx[1];
			if (dirty[0] & /*error*/ 64) underline_changes.error = /*error*/ ctx[6];
			underline.$set(underline_changes);

			if (/*showHint*/ ctx[24]) {
				if (if_block4) {
					if_block4.p(ctx, dirty);

					if (dirty[0] & /*showHint*/ 16777216) {
						transition_in(if_block4, 1);
					}
				} else {
					if_block4 = create_if_block(ctx);
					if_block4.c();
					transition_in(if_block4, 1);
					if_block4.m(div, null);
				}
			} else if (if_block4) {
				group_outros();

				transition_out(if_block4, 1, 1, () => {
					if_block4 = null;
				});

				check_outros();
			}

			if (!current || dirty[0] & /*wClasses*/ 2097152) {
				attr_dev(div, "class", /*wClasses*/ ctx[21]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block2);
			transition_in(if_block3);
			transition_in(underline.$$.fragment, local);
			transition_in(if_block4);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block0);
			transition_out(if_block2);
			transition_out(if_block3);
			transition_out(underline.$$.fragment, local);
			transition_out(if_block4);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (if_block0) if_block0.d();

			if (if_block1) {
				if_block1.d();
			}

			if (if_block2) if_block2.d();
			if (if_block3) if_block3.d();
			destroy_component(underline);
			if (if_block4) if_block4.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$5.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

const classesDefault = "mt-2 mb-6 relative text-gray-600 dark:text-gray-100";
const appendDefault = "absolute right-0 top-0 pb-2 pr-4 pt-4 text-gray-700 z-10";
const prependDefault = "absolute left-0 top-0 pb-2 pl-2 pt-4 text-xs text-gray-700 z-10";

function instance$5($$self, $$props, $$invalidate) {
	let { outlined = false } = $$props;
	let { value = null } = $$props;
	let { label = "" } = $$props;
	let { placeholder = "" } = $$props;
	let { hint = "" } = $$props;
	let { error = false } = $$props;
	let { append = "" } = $$props;
	let { prepend = "" } = $$props;
	let { persistentHint = false } = $$props;
	let { textarea = false } = $$props;
	let { rows = 5 } = $$props;
	let { select = false } = $$props;
	let { dense = false } = $$props;
	let { autocomplete = false } = $$props;
	let { noUnderline = false } = $$props;
	let { appendReverse = false } = $$props;
	let { prependReverse = false } = $$props;
	let { color = "primary" } = $$props;
	let { bgColor = "white" } = $$props;
	let { iconClass = "" } = $$props;
	let { disabled = false } = $$props;
	const inputDefault = `duration-200 ease-in pb-2 pt-6 px-4 rounded-t text-black dark:text-gray-100 w-full`;
	let { add = "" } = $$props;
	let { remove = "" } = $$props;
	let { replace = "" } = $$props;
	let { inputClasses = inputDefault } = $$props;
	let { classes = classesDefault } = $$props;
	let { appendClasses = appendDefault } = $$props;
	let { prependClasses = prependDefault } = $$props;
	const { bg, border, txt, caret } = utils(color);
	const cb = new ClassBuilder(inputClasses, inputDefault);
	const ccb = new ClassBuilder(classes, classesDefault);
	const acb = new ClassBuilder(appendClasses, appendDefault);
	const pcb = new ClassBuilder(prependClasses, prependDefault);

	let { extend = () => {
		
	} } = $$props;

	let { focused = false } = $$props;
	let wClasses = i => i;
	let aClasses = i => i;
	let pClasses = i => i;

	function toggleFocused() {
		$$invalidate(1, focused = !focused);
	}

	const props = filterProps(
		[
			"outlined",
			"label",
			"placeholder",
			"hint",
			"error",
			"append",
			"prepend",
			"persistentHint",
			"textarea",
			"rows",
			"select",
			"autocomplete",
			"noUnderline",
			"appendReverse",
			"prependReverse",
			"color",
			"bgColor",
			"disabled",
			"replace",
			"remove",
			"small"
		],
		$$props
	);

	const dispatch = createEventDispatcher();
	let { $$slots = {}, $$scope } = $$props;
	validate_slots("TextField", $$slots, ['label','append','prepend']);

	function change_handler(event) {
		bubble($$self, event);
	}

	function blur_handler(event) {
		bubble($$self, event);
	}

	function input_handler(event) {
		bubble($$self, event);
	}

	function click_handler(event) {
		bubble($$self, event);
	}

	function focus_handler(event) {
		bubble($$self, event);
	}

	function focus_handler_1(event) {
		bubble($$self, event);
	}

	function change_handler_1(event) {
		bubble($$self, event);
	}

	function input_handler_1(event) {
		bubble($$self, event);
	}

	function click_handler_1(event) {
		bubble($$self, event);
	}

	function blur_handler_1(event) {
		bubble($$self, event);
	}

	function change_handler_2(event) {
		bubble($$self, event);
	}

	function input_handler_2(event) {
		bubble($$self, event);
	}

	function click_handler_2(event) {
		bubble($$self, event);
	}

	function blur_handler_2(event) {
		bubble($$self, event);
	}

	function focus_handler_2(event) {
		bubble($$self, event);
	}

	function input_input_handler() {
		value = this.value;
		$$invalidate(0, value);
	}

	function textarea_1_input_handler() {
		value = this.value;
		$$invalidate(0, value);
	}

	const click_handler_3 = () => dispatch("click-append");
	const click_handler_4 = () => dispatch("click-prepend");

	$$self.$set = $$new_props => {
		$$invalidate(69, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("outlined" in $$new_props) $$invalidate(2, outlined = $$new_props.outlined);
		if ("value" in $$new_props) $$invalidate(0, value = $$new_props.value);
		if ("label" in $$new_props) $$invalidate(3, label = $$new_props.label);
		if ("placeholder" in $$new_props) $$invalidate(4, placeholder = $$new_props.placeholder);
		if ("hint" in $$new_props) $$invalidate(5, hint = $$new_props.hint);
		if ("error" in $$new_props) $$invalidate(6, error = $$new_props.error);
		if ("append" in $$new_props) $$invalidate(7, append = $$new_props.append);
		if ("prepend" in $$new_props) $$invalidate(8, prepend = $$new_props.prepend);
		if ("persistentHint" in $$new_props) $$invalidate(31, persistentHint = $$new_props.persistentHint);
		if ("textarea" in $$new_props) $$invalidate(9, textarea = $$new_props.textarea);
		if ("rows" in $$new_props) $$invalidate(10, rows = $$new_props.rows);
		if ("select" in $$new_props) $$invalidate(11, select = $$new_props.select);
		if ("dense" in $$new_props) $$invalidate(12, dense = $$new_props.dense);
		if ("autocomplete" in $$new_props) $$invalidate(13, autocomplete = $$new_props.autocomplete);
		if ("noUnderline" in $$new_props) $$invalidate(14, noUnderline = $$new_props.noUnderline);
		if ("appendReverse" in $$new_props) $$invalidate(15, appendReverse = $$new_props.appendReverse);
		if ("prependReverse" in $$new_props) $$invalidate(16, prependReverse = $$new_props.prependReverse);
		if ("color" in $$new_props) $$invalidate(17, color = $$new_props.color);
		if ("bgColor" in $$new_props) $$invalidate(18, bgColor = $$new_props.bgColor);
		if ("iconClass" in $$new_props) $$invalidate(19, iconClass = $$new_props.iconClass);
		if ("disabled" in $$new_props) $$invalidate(20, disabled = $$new_props.disabled);
		if ("add" in $$new_props) $$invalidate(32, add = $$new_props.add);
		if ("remove" in $$new_props) $$invalidate(33, remove = $$new_props.remove);
		if ("replace" in $$new_props) $$invalidate(34, replace = $$new_props.replace);
		if ("inputClasses" in $$new_props) $$invalidate(35, inputClasses = $$new_props.inputClasses);
		if ("classes" in $$new_props) $$invalidate(36, classes = $$new_props.classes);
		if ("appendClasses" in $$new_props) $$invalidate(37, appendClasses = $$new_props.appendClasses);
		if ("prependClasses" in $$new_props) $$invalidate(38, prependClasses = $$new_props.prependClasses);
		if ("extend" in $$new_props) $$invalidate(39, extend = $$new_props.extend);
		if ("focused" in $$new_props) $$invalidate(1, focused = $$new_props.focused);
		if ("$$scope" in $$new_props) $$invalidate(60, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({
		createEventDispatcher,
		utils,
		ClassBuilder,
		filterProps,
		Icon,
		Label,
		Hint,
		Underline,
		outlined,
		value,
		label,
		placeholder,
		hint,
		error,
		append,
		prepend,
		persistentHint,
		textarea,
		rows,
		select,
		dense,
		autocomplete,
		noUnderline,
		appendReverse,
		prependReverse,
		color,
		bgColor,
		iconClass,
		disabled,
		inputDefault,
		classesDefault,
		appendDefault,
		prependDefault,
		add,
		remove,
		replace,
		inputClasses,
		classes,
		appendClasses,
		prependClasses,
		bg,
		border,
		txt,
		caret,
		cb,
		ccb,
		acb,
		pcb,
		extend,
		focused,
		wClasses,
		aClasses,
		pClasses,
		toggleFocused,
		props,
		dispatch,
		showHint,
		labelOnTop,
		iClasses
	});

	$$self.$inject_state = $$new_props => {
		$$invalidate(69, $$props = assign(assign({}, $$props), $$new_props));
		if ("outlined" in $$props) $$invalidate(2, outlined = $$new_props.outlined);
		if ("value" in $$props) $$invalidate(0, value = $$new_props.value);
		if ("label" in $$props) $$invalidate(3, label = $$new_props.label);
		if ("placeholder" in $$props) $$invalidate(4, placeholder = $$new_props.placeholder);
		if ("hint" in $$props) $$invalidate(5, hint = $$new_props.hint);
		if ("error" in $$props) $$invalidate(6, error = $$new_props.error);
		if ("append" in $$props) $$invalidate(7, append = $$new_props.append);
		if ("prepend" in $$props) $$invalidate(8, prepend = $$new_props.prepend);
		if ("persistentHint" in $$props) $$invalidate(31, persistentHint = $$new_props.persistentHint);
		if ("textarea" in $$props) $$invalidate(9, textarea = $$new_props.textarea);
		if ("rows" in $$props) $$invalidate(10, rows = $$new_props.rows);
		if ("select" in $$props) $$invalidate(11, select = $$new_props.select);
		if ("dense" in $$props) $$invalidate(12, dense = $$new_props.dense);
		if ("autocomplete" in $$props) $$invalidate(13, autocomplete = $$new_props.autocomplete);
		if ("noUnderline" in $$props) $$invalidate(14, noUnderline = $$new_props.noUnderline);
		if ("appendReverse" in $$props) $$invalidate(15, appendReverse = $$new_props.appendReverse);
		if ("prependReverse" in $$props) $$invalidate(16, prependReverse = $$new_props.prependReverse);
		if ("color" in $$props) $$invalidate(17, color = $$new_props.color);
		if ("bgColor" in $$props) $$invalidate(18, bgColor = $$new_props.bgColor);
		if ("iconClass" in $$props) $$invalidate(19, iconClass = $$new_props.iconClass);
		if ("disabled" in $$props) $$invalidate(20, disabled = $$new_props.disabled);
		if ("add" in $$props) $$invalidate(32, add = $$new_props.add);
		if ("remove" in $$props) $$invalidate(33, remove = $$new_props.remove);
		if ("replace" in $$props) $$invalidate(34, replace = $$new_props.replace);
		if ("inputClasses" in $$props) $$invalidate(35, inputClasses = $$new_props.inputClasses);
		if ("classes" in $$props) $$invalidate(36, classes = $$new_props.classes);
		if ("appendClasses" in $$props) $$invalidate(37, appendClasses = $$new_props.appendClasses);
		if ("prependClasses" in $$props) $$invalidate(38, prependClasses = $$new_props.prependClasses);
		if ("extend" in $$props) $$invalidate(39, extend = $$new_props.extend);
		if ("focused" in $$props) $$invalidate(1, focused = $$new_props.focused);
		if ("wClasses" in $$props) $$invalidate(21, wClasses = $$new_props.wClasses);
		if ("aClasses" in $$props) $$invalidate(22, aClasses = $$new_props.aClasses);
		if ("pClasses" in $$props) $$invalidate(23, pClasses = $$new_props.pClasses);
		if ("showHint" in $$props) $$invalidate(24, showHint = $$new_props.showHint);
		if ("labelOnTop" in $$props) $$invalidate(25, labelOnTop = $$new_props.labelOnTop);
		if ("iClasses" in $$props) $$invalidate(26, iClasses = $$new_props.iClasses);
	};

	let showHint;
	let labelOnTop;
	let iClasses;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*error, hint, focused*/ 98 | $$self.$$.dirty[1] & /*persistentHint*/ 1) {
			 $$invalidate(24, showHint = error || (persistentHint ? hint : focused && hint));
		}

		if ($$self.$$.dirty[0] & /*placeholder, focused, value*/ 19) {
			 $$invalidate(25, labelOnTop = placeholder || focused || (value || value === 0));
		}

		 $$invalidate(26, iClasses = cb.flush().remove("pt-6 pb-2", outlined).add("border rounded bg-transparent py-4 duration-200 ease-in", outlined).add("border-error-500 caret-error-500", error).remove(caret(), error).add(caret(), !error).add(border(), focused && !error).add("border-gray-600", !error && !focused).add("bg-gray-100 dark:bg-dark-600", !outlined).add("bg-gray-300 dark:bg-dark-200", focused && !outlined).remove("px-4", prepend).add("pr-4 pl-10", prepend).add(add).remove("pt-6 pb-2", dense && !outlined).add("pt-4 pb-1", dense && !outlined).remove("bg-gray-100", disabled).add("bg-gray-50", disabled).add("cursor-pointer", select && !autocomplete).add($$props.class).remove(remove).replace(replace).extend(extend).get());

		if ($$self.$$.dirty[0] & /*select, autocomplete, dense, outlined, error, disabled*/ 1062980) {
			 $$invalidate(21, wClasses = ccb.flush().add("select", select || autocomplete).add("dense", dense && !outlined).remove("mb-6 mt-2", dense && !outlined).add("mb-4 mt-1", dense).replace({ "text-gray-600": "text-error-500" }, error).add("text-gray-200", disabled).get());
		}
	};

	 $$invalidate(22, aClasses = acb.flush().get());
	 $$invalidate(23, pClasses = pcb.flush().get());
	$$props = exclude_internal_props($$props);

	return [
		value,
		focused,
		outlined,
		label,
		placeholder,
		hint,
		error,
		append,
		prepend,
		textarea,
		rows,
		select,
		dense,
		autocomplete,
		noUnderline,
		appendReverse,
		prependReverse,
		color,
		bgColor,
		iconClass,
		disabled,
		wClasses,
		aClasses,
		pClasses,
		showHint,
		labelOnTop,
		iClasses,
		txt,
		toggleFocused,
		props,
		dispatch,
		persistentHint,
		add,
		remove,
		replace,
		inputClasses,
		classes,
		appendClasses,
		prependClasses,
		extend,
		$$slots,
		change_handler,
		blur_handler,
		input_handler,
		click_handler,
		focus_handler,
		focus_handler_1,
		change_handler_1,
		input_handler_1,
		click_handler_1,
		blur_handler_1,
		change_handler_2,
		input_handler_2,
		click_handler_2,
		blur_handler_2,
		focus_handler_2,
		input_input_handler,
		textarea_1_input_handler,
		click_handler_3,
		click_handler_4,
		$$scope
	];
}

class TextField extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(
			this,
			options,
			instance$5,
			create_fragment$5,
			safe_not_equal,
			{
				outlined: 2,
				value: 0,
				label: 3,
				placeholder: 4,
				hint: 5,
				error: 6,
				append: 7,
				prepend: 8,
				persistentHint: 31,
				textarea: 9,
				rows: 10,
				select: 11,
				dense: 12,
				autocomplete: 13,
				noUnderline: 14,
				appendReverse: 15,
				prependReverse: 16,
				color: 17,
				bgColor: 18,
				iconClass: 19,
				disabled: 20,
				add: 32,
				remove: 33,
				replace: 34,
				inputClasses: 35,
				classes: 36,
				appendClasses: 37,
				prependClasses: 38,
				extend: 39,
				focused: 1
			},
			[-1, -1, -1]
		);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "TextField",
			options,
			id: create_fragment$5.name
		});
	}

	get outlined() {
		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set outlined(value) {
		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value() {
		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get placeholder() {
		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set placeholder(value) {
		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get hint() {
		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set hint(value) {
		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get error() {
		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set error(value) {
		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get append() {
		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set append(value) {
		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get prepend() {
		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set prepend(value) {
		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get persistentHint() {
		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set persistentHint(value) {
		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get textarea() {
		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set textarea(value) {
		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get rows() {
		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set rows(value) {
		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get select() {
		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set select(value) {
		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get dense() {
		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set dense(value) {
		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get autocomplete() {
		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set autocomplete(value) {
		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get noUnderline() {
		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set noUnderline(value) {
		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get appendReverse() {
		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set appendReverse(value) {
		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get prependReverse() {
		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set prependReverse(value) {
		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get color() {
		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set color(value) {
		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get bgColor() {
		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set bgColor(value) {
		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get iconClass() {
		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set iconClass(value) {
		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get disabled() {
		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set disabled(value) {
		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get add() {
		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set add(value) {
		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get remove() {
		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set remove(value) {
		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get replace() {
		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set replace(value) {
		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get inputClasses() {
		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set inputClasses(value) {
		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get classes() {
		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set classes(value) {
		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get appendClasses() {
		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set appendClasses(value) {
		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get prependClasses() {
		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set prependClasses(value) {
		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get extend() {
		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set extend(value) {
		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get focused() {
		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set focused(value) {
		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { Switch as S, TextField as T };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
