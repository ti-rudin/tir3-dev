version: "3.7"

services:
  traefik:
    image: "traefik:v2.10"
    container_name: "traefik"
    command:
      #- "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.httpchallenge=true"
      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
      #- "--certificatesresolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.myresolver.acme.email=postmaster@example.com"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.web.http.redirections.entrypoint.permanent=true"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - "./letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
  whoami:
    image: "traefik/whoami"
    container_name: "simple-service"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.whoami.rule=Host(`p.ti-robots.ru`)"
      - "traefik.http.routers.whoami.entrypoints=websecure"
      - "traefik.http.routers.whoami.tls.certresolver=myresolver"
      

  node-red:
    container_name: node-red
    build:
      context: .
      dockerfile: ./nodered2.Dockerfile
    env_file: .env
    ports:
      - "1880:1880"
    networks:
      - tibotnet
    depends_on:
      - redis
    volumes:
      - ./node-red-data2:/data 
    restart: always



  redis:
    image: "redis:alpine"
    container_name: redis
    command: redis-server --requirepass YzRAdGgkFg
    ports:
     - "6379:6379"
    environment:
         - REDIS_REPLICATION_MODE=master
    volumes:
      - ./redis-data:/data
    restart: always
    networks:
      - tibotnet

  priceserver:
    container_name: priceserver
    build:
      context: ./priceserver
      dockerfile: ./Dockerfile.dev
    env_file: .env
    volumes:
      - './priceserver/:/usr/src/app'
    restart: on-failure
    depends_on:
      - redis
    networks:
      - tibotnet

  telegrambot:
    container_name: telegrambot
    build:
      context: ./telegrambot
      dockerfile: ./Dockerfile.dev
    env_file: .env
    volumes:
      - './telegrambot/:/usr/src/app'
    restart: on-failure
    depends_on:
      - redis
    networks:
      - tibotnet
  
  #front:
  #  container_name: front
  #  build:
  #    context: ./front
  #    dockerfile: ./Dockerfile.dev
  #  env_file: .env
  #  
  #  ports:
  #   - "3000:3000"
  #  volumes:
  #    - './front/:/usr/src/app'
  #  restart: always
  #  depends_on:
  #    - redis
  #    - node-red
  #  networks:
  #    - tibotnet
  #    

volumes:
  redis-data:
  node-red-data2:

networks:
  tibotnet: